{"version":3,"file":"component---src-pages-guide-unit-annotations-md-1cc500b70830b6cc3d9c.js","mappings":"4RAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,wBACH,yBACL,kBAAK,yIACL,eACE,GAAM,UACH,WACL,qBAAK,iBAAMC,WAAW,MAClB,UAAa,gBACV,6LAgBP,kBAAK,oEACL,oBACE,eAAIA,WAAW,MAAO,+DACtB,eAAIA,WAAW,MAAO,uEACtB,eAAIA,WAAW,MAAO,wDAExB,eACE,GAAM,aACH,cACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,ocA4BP,eACE,GAAM,aACH,cACL,kBAAK,gGACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,k1BA2CP,kBAAK,iFACL,kBAAK,oKAEL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,6LAWP,kBAAK,mDAAiD,cAAGA,WAAW,IAChE,KAAQ,gFACL,QAAY,KAGtB,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-testing/./src/pages/guide/unit/annotations.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-testing/commerce-testing/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"docblock-annotations\"\n    }}>{`DocBlock annotations`}</h1>\n    <p>{`A Data Provider allows you to define the test once and run it multiple times with different inputs, for checking multiple use cases.`}</p>\n    <h2 {...{\n      \"id\": \"format\"\n    }}>{`Format`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`/**\n * @dataProvider dataProviderOne\n */\n public function testOne()\n {\n    ...\n }\n\n /**\n  * @return array\n  */\n public function dataProviderOne()\n {\n     return [];\n }\n`}</code></pre>\n    <p>{`For using a data provider you need to follow up the next steps:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Create a public method, that returns an array of data sets`}</li>\n      <li parentName=\"ol\">{`Add a data provider annotation in the docblock of your test method`}</li>\n      <li parentName=\"ol\">{`Pass the data set as arguments to your test method`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"example-1\"\n    }}>{`Example 1`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`namespace Vendor\\\\Module;\n\nuse PHPUnit\\\\Framework\\\\TestCase;\n\nclass ClassToTest extends TestCase\n{\n  /**\n    * @param string $scope\n    *\n    * @dataProvider dataProviderScopes\n    */\n  public function testOne(string $scope)\n  {\n      // Do your magic here\n  }\n\n  /**\n    * @return array\n    */\n  public function dataProviderScopes(): array\n  {\n      return [\n          ['default'],\n          ['store'],\n      ];\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-2\"\n    }}>{`Example 2`}</h3>\n    <p>{`Lets check the following practical example, where we will be checking if an email is valid.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`namespace Vendor\\\\Module;\n\nuse PHPUnit\\\\Framework\\\\TestCase;\n\nclass ClassToTest extends TestCase\n{\n  /**\n    * Testable object\n    */\n  private $sut;\n\n  ...\n\n  /**\n    * Test if the email is valid\n    *\n    * @param string $email\n    * @param bool $result\n    *\n    * @dataProvider dataProviderEmails\n    */\n  public function testIsValidEmail(string $email, bool $result)\n  {\n      $expected = $this->sut->isValidEmail($email);\n      $this->assertEquals($expected, $result);\n  }\n\n  /**\n    * @return array\n    */\n  public function dataProviderEmails(): array\n  {\n    return [\n      ['first#example.com', false],\n      ['second@example', false],\n      ['second.example.com', false],\n      ['@example.com', false],\n      ['@example@example.com', false],\n      ['example@example.com', true],\n    ];\n  }\n}\n`}</code></pre>\n    <p>{`Based on our set of data, we expect that only the last email is a valid one.`}</p>\n    <p>{`Instead of having numeric keys, you can also use string keys to name each of the data set, it is easier to find the failing data set.\nCheck the below example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`/**\n * @return array\n */\npublic function dataProvider(): array\n{\n  return [\n      'First Data Set' => ['test-1', false],\n      'Second Data Set' => ['test-2', false]\n  ];\n}\n`}</code></pre>\n    <p>{`You can read more about PHPUnit Data Providers `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.phpunit.de/en/9.6/writing-tests-for-phpunit.html#data-providers\"\n      }}>{`here`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}