{"version":3,"file":"component---src-pages-guide-integration-annotations-magento-db-isolation-md-a4258e18ea2ef95fd8ed.js","mappings":"0RAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,iCACH,kCACL,kBAAK,sGAAoG,uBAAYC,WAAW,KAAM,uBAAoC,iBAC1K,kBAAK,aAAW,uBAAYA,WAAW,KAAM,uBAAoC,0BACjF,oBACE,eAAIA,WAAW,MAAO,6DACtB,eAAIA,WAAW,MAAO,wDACtB,eAAIA,WAAW,MAAO,qDAExB,eACE,GAAM,UACH,WACL,kBAAK,mCACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,+BACV,yDAIP,eACE,GAAM,yBACH,0BACL,kBAAK,2KAC0B,eAAIA,WAAW,KAAM,sCAA2C,+QAGd,uBAAYA,WAAW,KAAM,uBAAoC,+BAClJ,kBAAK,aACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,+BACV,g/BAqCP,eACE,GAAM,oBACH,qBACL,kBAAK,qEAAmE,uBAAYA,WAAW,KAAM,uBAAoC,mBACzI,qBAAK,iBAAMA,WAAW,MAClB,UAAa,+BACV,8cAcV,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-testing/./src/pages/guide/integration/annotations/magento-db-isolation.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-testing/commerce-testing/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"database-isolation-annotation\"\n    }}>{`Database isolation annotation`}</h1>\n    <p>{`To isolate database changes between tests, the Integration testing framework (ITF) implements the `}<inlineCode parentName=\"p\">{`@magentoDbIsolation`}</inlineCode>{` annotation.`}</p>\n    <p>{`When the `}<inlineCode parentName=\"p\">{`@magentoDbIsolation`}</inlineCode>{` is enabled, the ITF:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`starts a database transaction before the test/test case.`}</li>\n      <li parentName=\"ul\">{`avoids a database commit during the test/test case.`}</li>\n      <li parentName=\"ul\">{`restores the database after the test/test case.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"format\"\n    }}>{`Format`}</h2>\n    <p>{`Database isolation annotation:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php?start_inline=1\"\n      }}>{`/**\n * @magentoDbIsolation enabled|disabled\n */\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"test-case-declaration\"\n    }}>{`Test case declaration`}</h2>\n    <p>{`Use test case declarations when a sequence of tests introduces changes to the database and relies on the changes made by each other.\nFor example, typical CRUD tests: `}<em parentName=\"p\">{`create -> read -> update -> delete`}</em>{`.\nEvery next test relies on a database state after the previous one.\nIf at any point of that sequence (after creation) the test fails, the database will be polluted with test data.\nTo apply a database rollback after the test case, create a separate test case with `}<inlineCode parentName=\"p\">{`@magentoDbIsolation`}</inlineCode>{` enabled at a class level.`}</p>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php?start_inline=1\"\n      }}>{`/**\n * @magentoDbIsolation enabled\n */\nclass Some\\\\EntityTest extends \\\\PHPUnit\\\\Framework\\\\TestCase\n{\n    public function testCreate()\n    {\n        $this->object->setData($this->initialData)->save();\n        $this->assertNotEmpty($this->object->getId());\n        return $this->object->getId();\n    }\n\n    public function testRead($objectId)\n    {\n        $this->object->load($objectId);\n        $this->assertEquals($this->initialData, $this->object->getData());\n        return $objectId;\n    }\n\n    public function testUpdate($objectId)\n    {\n        $this->object->setData($newData)->save();\n        $object = new Some_Entity();\n        $object->load($objectId);\n        $this->assertEquals($newData, $object->getData());\n        return $objectId;\n    }\n\n    public function testDelete($objectId)\n    {\n        $this->object->delete();\n        $object = new Some_Entity();\n        $object->load($objectId);\n        $this->assertEmpty($object->getData());\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"test-declaration\"\n    }}>{`Test declaration`}</h2>\n    <p>{`To isolate changes made to database by a single test, enable the `}<inlineCode parentName=\"p\">{`@magentoDbIsolation`}</inlineCode>{` for the test.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php?start_inline=1\"\n      }}>{`/**\n* @magentoDbIsolation enabled\n*/\npublic function testSave()\n{\n    $taxClassDataObject = $this->taxClassFactory->create();\n    $taxClassDataObject->setClassName(self::SAMPLE_TAX_CLASS_NAME)\n        ->setClassType(TaxClassManagementInterface::TYPE_CUSTOMER);\n    $taxClassId = $this->taxClassRepository->save($taxClassDataObject);\n    $this->assertEquals(self::SAMPLE_TAX_CLASS_NAME, $this->taxClassModel->load($taxClassId)->getClassName());\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}