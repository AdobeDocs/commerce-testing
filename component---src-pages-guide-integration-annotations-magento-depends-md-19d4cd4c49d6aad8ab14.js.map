{"version":3,"file":"component---src-pages-guide-integration-annotations-magento-depends-md-19d4cd4c49d6aad8ab14.js","mappings":"4RAQaA,EAAe,CAAC,EAOvBC,GALgBC,EAKY,cALJ,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,EACjB,GAHqBD,MAMtB,MAAMI,EAAc,CAClBN,gBAEIO,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,yBACH,0BACL,kBAAK,QAAM,uBAAYC,WAAW,KAAM,YAAyB,uEACjE,eACE,GAAM,UACH,WACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,wCAIP,SAACX,EAAD,CAAaY,QAAQ,UAAUC,MAAM,OAAOH,QAAQ,iBACpD,kBAAK,6JACL,eACE,GAAM,aACH,cACL,kBAAK,6CACL,qBAAK,iBAAMC,WAAW,MAClB,UAAa,gBACV,8RAqBP,eACE,GAAM,aACH,cACL,SAACX,EAAD,CAAaY,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,kBAAK,4FACL,qBAAK,iBAAMC,WAAW,MAClB,UAAa,gBACV,4fAmCP,eACE,GAAM,aACH,cACL,kBAAK,4GACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,wuBA2BP,kBAAK,0DAAwD,cAAGA,WAAW,IACvE,KAAQ,2DACL,QAAY,KAGtB,CAEDH,EAAWM,gBAAiB,C","sources":["webpack://commerce-testing/./src/pages/guide/integration/annotations/magento-depends.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-testing/commerce-testing/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"dependency-annotation\"\n    }}>{`Dependency annotation`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`@depends`}</inlineCode>{` annotation helps you to define some dependencies between methods.`}</p>\n    <h2 {...{\n      \"id\": \"format\"\n    }}>{`Format`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`/**\n * @depends methodName\n */\n`}</code></pre>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Please note that dependencies don't define the order in which the test methods are executed, so you still have to keep to proper order for your methods.`}</p>\n    <h3 {...{\n      \"id\": \"example-1\"\n    }}>{`Example 1`}</h3>\n    <p>{`Let's check the following basic example.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`/**\n * @return int\n */\npublic function testOne(): int\n{\n    $number = 2;\n    $this->assertEquals(2, $number);\n\n    return $number;\n}\n\n/**\n * @depends testOne\n *\n * @param $number\n */\npublic function testNumber($number)\n{\n    $this->assertEquals(2, $number);\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-2\"\n    }}>{`Example 2`}</h3>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`If using multiple dependencies, arguments are passed in the annotations' defined order.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`/**\n * @return int\n */\npublic function testTwo(): int\n{\n    $number = 2;\n    $this->assertEquals(2, $number);\n\n    return $number;\n}\n\n/**\n * @return int\n */\npublic function testOne(): int\n{\n    $number = 1;\n    $this->assertEquals(1, $number);\n\n    return $number;\n}\n\n/**\n * @depends testOne\n * @depends testTwo\n *\n * @param $one\n * @param $two\n */\npublic function testNumber(int $one, int $two)\n{\n    $this->assertEquals(1, $one);\n    $this->assertEquals(2, $two);\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example-3\"\n    }}>{`Example 3`}</h3>\n    <p>{`Let's check the following practical example, where we'll be checking the customer email by customer ID.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`use Magento\\\\Customer\\\\Api\\\\CustomerRepositoryInterface;\nuse Magento\\\\Customer\\\\Api\\\\Data\\\\CustomerInterface;\nuse Magento\\\\TestFramework\\\\Helper\\\\Bootstrap;\n...\n\n/**\n * @magentoDataFixture Magento/Customer/_files/customer.php\n */\npublic function testLoadCustomer(): CustomerInterface\n{\n    $customerId = 1;\n    $objectManager = Bootstrap::getObjectManager();\n    $customerRepository = $objectManager->create(CustomerRepositoryInterface::class);\n\n    return $customerRepository->getById($customerId);\n}\n\n/**\n * @depends testLoadCustomer\n *\n * @param CustomerInterface $customer\n */\npublic function testEmail(CustomerInterface $customer)\n{\n    $this->assertEquals('customer@example.com', $customer->getEmail());\n}\n`}</code></pre>\n    <p>{`You can read more about PHPUnit dependency annotation `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.phpunit.de/en/9.6/annotations.html#depends\"\n      }}>{`here`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}