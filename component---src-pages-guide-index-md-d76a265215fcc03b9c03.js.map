{"version":3,"file":"component---src-pages-guide-index-md-d76a265215fcc03b9c03.js","mappings":"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","sources":["webpack://commerce-testing/./src/pages/guide/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-testing/commerce-testing/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"application-testing-guide-introduction\"\n    }}>{`Application Testing Guide introduction`}</h1>\n    <p>{`The Commerce framework actively leverages various testing strategies to ensure product and code quality. Product quality matters to the end-users working with the storefront, admin panel, web APIs and CLI. Product quality tests verify that the user gets expected results while interacting with the system.`}</p>\n    <p>{`Code quality is important to developers working with the codebase including:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`System integrators`}</li>\n      <li parentName=\"ul\">{`Extension developers`}</li>\n      <li parentName=\"ul\">{`Adobe core team`}</li>\n      <li parentName=\"ul\">{`Community contributors`}</li>\n    </ul>\n    <p>{`Code quality matters for:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Extensibility - It should be straightforward to extend or modify existing behavior. Good extensibility allows for:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Customizations and extensions using modularity of the platform.`}</li>\n          <li parentName=\"ul\">{`Evolution of the platform with new releases.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Maintainability - It should be straightforward for developers to work within the system. It can be improved with:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Complexity management - Reduce the learning curve and risk of adding new bugs.`}</li>\n          <li parentName=\"ul\">{`Automatic bug detection - Reduces total cost of ownership.`}</li>\n          <li parentName=\"ul\">{`Coding standards - Ensures consistency and readability.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <p>{`Automated tests are required by `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/commerce/contributor/guides/code-contributions/definition-of-done/\"\n      }}>{`definition of done`}</a>{` for any code changes.`}</p>\n    <h2 {...{\n      \"id\": \"product-quality-tests\"\n    }}>{`Product Quality Tests`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/magento/mtf\"\n        }}>{`Functional Testing Framework`}</a>{` - Tests the storefront and admin panel UI.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://developer.adobe.com/commerce/webapi/get-started/web-api-functional-testing.html\"\n        }}>{`Web API Functional`}</a>{` - Tests the REST, SOAP, and GraphQL areas.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"integration/index.md\"\n        }}>{`Integration`}</a>{` - Ensures that all the parts work together seamlessly.`}</li>\n      <li parentName=\"ul\">{`Performance - Tracks changes in CPU, Memory and other metrics. Executed nightly for develop branches. Custom builds can be configured using `}<a parentName=\"li\" {...{\n          \"href\": \"https://experienceleague.adobe.com/docs/commerce-operations/configuration-guide/cli/generate-data.html\"\n        }}>{`performance toolkit`}</a>{`.`}</li>\n      <li parentName=\"ul\">{`Client-side performance - Measures total page load times in the browser.`}</li>\n      <li parentName=\"ul\">{`Load - Tracks the trends of system behavior under the load. Executed internally for each release using scenarios defined in the `}<a parentName=\"li\" {...{\n          \"href\": \"https://experienceleague.adobe.com/docs/commerce-operations/configuration-guide/cli/generate-data.html\"\n        }}>{`performance toolkit`}</a></li>\n      <li parentName=\"ul\">{`Upgrade - Ensures that a seamless upgrade is possible from previously released product versions to the new one. Executed internally for each release.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"js/index.md\"\n        }}>{`JavaScript`}</a>{` - Tests JS modules and other JS portions of the UI. These tests are similar to integration tests used for server-side testing.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"code-quality-tests\"\n    }}>{`Code Quality Tests`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Static`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://developer.adobe.com/commerce/php/coding-standards/php/\"\n            }}>{`PhpCs`}</a>{` - Warns developers about coding standard violations. It can be integrated into an IDE to analyze the code as soon as you write it.`}</li>\n          <li parentName=\"ul\"><a parentName=\"li\" {...{\n              \"href\": \"https://phpmd.org/\"\n            }}>{`PhpMd`}</a>{` - Used for monitoring code complexity and potential bugs. Can be integrated with an IDE for instant feedback.`}</li>\n          <li parentName=\"ul\">{`Dependency - Prevents incorrect dependencies between modules.`}</li>\n          <li parentName=\"ul\">{`Legacy code - Prevents usage of the legacy functionality.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`Unit - Used for testing of isolated algorithms or discreet pieces of code.`}</li>\n      <li parentName=\"ul\">{`Extensibility - Ensures the system is extensible as designed. Extensibility tests can be written using `}<a parentName=\"li\" {...{\n          \"href\": \"integration/index.md\"\n        }}>{`Integration`}</a>{`, `}<a parentName=\"li\" {...{\n          \"href\": \"js/index.md\"\n        }}>{`JavaScript`}</a>{` and `}<a parentName=\"li\" {...{\n          \"href\": \"https://developer.adobe.com/commerce/webapi/get-started/web-api-functional-testing.html\"\n        }}>{`Web API Functional`}</a>{` testing frameworks.`}</li>\n      <li parentName=\"ul\">{`Backward-compatibility - Enforces `}<a parentName=\"li\" {...{\n          \"href\": \"https://developer.adobe.com/commerce/contributor/guides/code-contributions/backward-compatibility-policy/\"\n        }}>{`backward compatibility policy`}</a>{` at all levels including source code, database, message queue,  and web API.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"functional\"\n    }}>{`Functional`}</h2>\n    <p>{`Functional tests are mainly used for system tests at a very high level by remote controlling a browser. The application is treated as a black box, and tests happen from a user perspective.`}</p>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/mtf\"\n      }}>{`Functional Testing Framework`}</a>{` (MFTF) is the main way to do functional testing. It uses XML files to run browser testing.`}</p>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/mtf\"\n      }}>{`Functional Testing Framework`}</a>{` (FTF) was the original framework used for testing Magento. It used PHP scripts to run browser testing.\nThis framework is no longer supported and FTF tests were `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento-functional-tests-migration\"\n      }}>{`ported over`}</a>{` to MFTF.\nUntil the porting to MFTF is finished, the FTF can still be run to ensure complete functional testing coverage.`}</p>\n    <h2 {...{\n      \"id\": \"api-functional\"\n    }}>{`API Functional`}</h2>\n    <p>{`The Web `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/api\"\n      }}>{`API`}</a>{` testing framework enables you to test the `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/web-api\"\n      }}>{`Web API`}</a>{` from the client application point of view.`}</p>\n    <p>{`For more information, see the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/commerce/webapi/get-started/web-api-functional-testing.html\"\n      }}>{`Web API functional testing`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"integration\"\n    }}>{`Integration`}</h2>\n    <p>{`Integration tests run `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/php\"\n      }}>{`PHP`}</a>{` code in varying degrees of isolation. They tend to be a lot more low-level then functional tests. Because they do not utilize a browser to execute the tests, they can be a lot more granular in what they test. They also tend to run a lot quicker then functional tests.`}</p>\n    <p>{`For more information, see `}<a parentName=\"p\" {...{\n        \"href\": \"integration/index.md\"\n      }}>{`Running Integration Tests`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"javascript\"\n    }}>{`JavaScript`}</h2>\n    <p>{`Much of the functionality is provided with the help of sophisticated `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/javascript\"\n      }}>{`JavaScript`}</a>{`. JavaScript tests ensure the `}<a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/frontend\"\n      }}>{`frontend`}</a>{` portion of functions as expected.`}</p>\n    <p>{`For more information, please see the `}<a parentName=\"p\" {...{\n        \"href\": \"js/index.md\"\n      }}>{`Extension Developer Guide on JavaScript Tests`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"static\"\n    }}>{`Static`}</h2>\n    <p>{`Static code analysis checks that PHP code follows the Magento 2 coding standards and best practices.\nThey are executed during continuous integration using the `}<inlineCode parentName=\"p\">{`bin/magento`}</inlineCode>{` tool.`}</p>\n    <p>{`See the `}<a parentName=\"p\" {...{\n        \"href\": \"https://experienceleague.adobe.com/docs/commerce-operations/configuration-guide/cli/unit-tests.html\"\n      }}><inlineCode parentName=\"a\">{`magento dev:tests:run`}</inlineCode></a>{` documentation for more information, using the test type `}<inlineCode parentName=\"p\">{`static`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"phpstan\"\n    }}>{`PHPStan`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/phpstan/phpstan\"\n      }}>{`PHPStan`}</a>{` is a static analysis tool for PHP. The application integrates PHPStan by default.\nIt is available for developers to use in their own work, located at `}<inlineCode parentName=\"p\">{`Magento\\\\Test\\\\Php\\\\LiveCodeTest::testPhpStan()`}</inlineCode>{`.`}</p>\n    <p>{`It is run on changed `}<inlineCode parentName=\"p\">{`*.php`}</inlineCode>{` files using rule strictness `}<a parentName=\"p\" {...{\n        \"href\": \"https://phpstan.org/user-guide/rule-levels\"\n      }}>{`level 1`}</a>{` and detects issues such as:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Method should return something but return statement is missing.`}</li>\n      <li parentName=\"ul\">{`Access to constant on an unknown class`}</li>\n      <li parentName=\"ul\">{`Access to undefined constant`}</li>\n      <li parentName=\"ul\">{`Access to an undefined property`}</li>\n      <li parentName=\"ul\">{`Anonymous function has an unused use`}</li>\n      <li parentName=\"ul\">{`Array has N duplicate keys`}</li>\n      <li parentName=\"ul\">{`Call to an undefined method`}</li>\n      <li parentName=\"ul\">{`Possibly undefined variables`}</li>\n      <li parentName=\"ul\">{`Unknown magic methods and properties on classes with `}<inlineCode parentName=\"li\">{`__call`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`__get`}</inlineCode>{` (supports DataObject's magic methods: get/set/has/uns)`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"suppressing-errors\"\n    }}>{`Suppressing errors`}</h4>\n    <p>{`To ignore errors in a particular piece of code, use the `}<inlineCode parentName=\"p\">{`phpstan:ignore`}</inlineCode>{` annotation.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// phpstan:ignore \"Error message\"\n`}</code></pre>\n    <p>{`The error message text is optional.\nIt is possible to use the `}<inlineCode parentName=\"p\">{`*`}</inlineCode>{` wildcard within messages.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`/**\n * Class ClassWithIgnoreAnnotation\n */\nclass ClassWithIgnoreAnnotation\n{\n    /**\n     * Test method.\n     * phpstan:ignore \"Method level error\"\n     */\n    public function getProductList()\n    {\n        // phpstan:ignore \"Method Magento\\\\PhpStan\\\\Formatters\\\\Fixtures\\\\ClassWithIgnoreAnnotation::testMethod() invoked with 2 parameters, 1 required.\"\n        $this->testMethod('test1', 'test2');\n        // phpstan:ignore \"Method * invoked with 2 parameters, 1 required.\"\n        $this->testMethod('test1', 'test2');\n        // phpstan:ignore\n        $this->testMethod('test1', 'test2');\n        $this->testMethod('test1', 'test2'); // phpstan:ignore\n    }\n    /**\n     * @param string $arg1\n     * @return string\n     */\n    private function testMethod(string $arg1)\n    {\n        return $arg1;\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"adding-files-and-directories-to-phpstan-blacklist\"\n    }}>{`Adding files and directories to PHPStan blacklist`}</h4>\n    <p>{`If some files are broken on purpose, add them to the blacklist to ignore them.`}</p>\n    <p>{`The blacklist is located at `}<inlineCode parentName=\"p\">{`dev/tests/static/testsuite/Magento/Test/Php/_files/phpstan/blacklist/`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-config\"\n      }}>{`lib/internal/Magento/Framework/Interception/Test/Unit/Config/ConfigTest.php\nlib/internal/Magento/Framework/Cache/Backend/Eaccelerator.php\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"exclude-error-messages-from-the-analysis-results\"\n    }}>{`Exclude error messages from the analysis results`}</h4>\n    <p>{`If some error messages are not relevant for the current testing scenario, use regular expressions to filter them.`}</p>\n    <p>{`The PHPStan configuration file is `}<inlineCode parentName=\"p\">{`dev/tests/static/testsuite/Magento/Test/Php/_files/phpstan/phpstan.neon`}</inlineCode>{`.`}</p>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-config\"\n      }}>{`ignoreErrors:\n    # Ignore PHPStan\\\\Rules\\\\Classes\\\\UnusedConstructorParametersRule\n   - '#Constructor of class [a-zA-Z0-9\\\\\\\\_]+ has an unused parameter#'\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"exclude-files-and-directories-from-analysis\"\n    }}>{`Exclude files and directories from analysis`}</h4>\n    <p>{`As needed in some cases, you can exclude specific directories and files using the `}<inlineCode parentName=\"p\">{`excludes_analyse`}</inlineCode>{` section in the PHPStan configuration file:\n`}<inlineCode parentName=\"p\">{`dev/tests/static/testsuite/Magento/Test/Php/_files/phpstan/phpstan.neon`}</inlineCode>{`.`}</p>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-config\"\n      }}>{`excludes_analyse:\n   - %rootDir%/../../../*/_files/*\n   - %rootDir%/../../../dev/tests/*/Fixtures/*\n   - %rootDir%/../../../dev/tests/*/tmp/*\n   - %rootDir%/../../../pub/*\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"unit\"\n    }}>{`Unit`}</h2>\n    <p>{`Unit tests are used to check a single unit of PHP code in isolation. They are usually written during development using `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Test-driven_development\"\n      }}>{`test-driven development`}</a>{` (TDD).`}</p>\n    <p>{`Because they do not require the full application stack to be initialized, they run an order of magnitude faster then integration tests.`}</p>\n    <p>{`For more information, see `}<a parentName=\"p\" {...{\n        \"href\": \"unit/index.md\"\n      }}>{`Running Unit Tests`}</a>{`.`}</p>\n    <p>{`Please refer to the article `}<a parentName=\"p\" {...{\n        \"href\": \"unit/writing-testable-code.md\"\n      }}>{`Writing testable code`}</a>{` for more information on what to keep in mind when starting with TDD.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`bin/magento`}</inlineCode>{` tool provides a common entry point to execute any of the tests, which can be useful for continuous integration.\nPlease see the `}<a parentName=\"p\" {...{\n        \"href\": \"https://experienceleague.adobe.com/docs/commerce-operations/configuration-guide/cli/unit-tests.html\"\n      }}>{`System Administrators Guide on Running Tests`}</a>{` for more information.`}</p>\n    <h2 {...{\n      \"id\": \"where-to-find-the-tests-in-the-file-system\"\n    }}>{`Where to find the tests in the file system`}</h2>\n    <p>{`Each test type described above corresponds to a subdirectory in `}<inlineCode parentName=\"p\">{`<magento2 root dir>/dev/tests`}</inlineCode>{`, as shown here:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tree\"\n      }}>{`<repo_root>\n    <dev/tests/>\n        acceptance      (since v2.2.4)\n        api-functional\n        functional\n        integration\n        js/jasmine\n        setup-integration\n        static\n        unit\n`}</code></pre>\n    <p>{`Each of these test types must satisfy different requirements before the MFTF can execute them.`}</p>\n    <p>{`MFTF tests are kept within its respective Module folder:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tree\"\n      }}>{`<extension_repo_root>\n├── <Module1>\n│   ├── ...\n│   ├── Test\n│   │   ├── Unit\n│   │   ├── Integration\n│   │   └── Mftf\n│   │       ├── TestSuite\n│   │       └── composer.json\n│   └── ...\n├── <Module2>\n├── <Module1SampleData>\n└── <Module2SampleData>\n`}</code></pre>\n    {\n      /* Link Definitions */\n    }\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}