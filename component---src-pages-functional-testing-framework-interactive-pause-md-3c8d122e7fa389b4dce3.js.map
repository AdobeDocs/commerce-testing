{"version":3,"file":"component---src-pages-functional-testing-framework-interactive-pause-md-3c8d122e7fa389b4dce3.js","mappings":"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","sources":["webpack://commerce-testing/./src/pages/functional-testing-framework/interactive-pause.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-testing/commerce-testing/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"interactive-pause\"\n    }}>{`Interactive pause`}</h1>\n    <p>{`It can be difficut to write a successful test on the first attempt. You will need to try different commands, with different arguments, before you find the correct path.`}</p>\n    <p>{`Since Codeception 3.0, you can pause execution in any point and enter an interactive shell where you will be able to try commands in action.`}</p>\n    <p>{`Now this `}<inlineCode parentName=\"p\">{`Interactive Pause`}</inlineCode>{` feature is available in MFTF. All you need to do is to set `}<inlineCode parentName=\"p\">{`ENABLE_PAUSE`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` in `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{`.`}</p>\n    <p>{`Check `}<a parentName=\"p\" {...{\n        \"href\": \"https://codeception.com/docs/02-GettingStarted#Interactive-Pause\"\n      }}>{`pause on codeception.com`}</a>{` for documentation and a video to see `}<inlineCode parentName=\"p\">{`Interactive Pause`}</inlineCode>{` in action.`}</p>\n    <p>{`In short, when a test gets to `}<inlineCode parentName=\"p\">{`$I->pause()`}</inlineCode>{` step, it stops and shows a console where you can try all available commands with auto-completion, stash commands, save screenshots, etc.`}</p>\n    <h2 {...{\n      \"id\": \"how-to-configure-interactive-pause\"\n    }}>{`How to Configure Interactive Pause`}</h2>\n    <p>{`To be able to use Interactive console you need to install `}<inlineCode parentName=\"p\">{`hoa/console`}</inlineCode>{` library by running `}<inlineCode parentName=\"p\">{`composer require hoa/console`}</inlineCode>{` command in your project. This will allow `}<inlineCode parentName=\"p\">{`<pause />`}</inlineCode>{` action to work.\nThe Functional Testing Framework supports `}<inlineCode parentName=\"p\">{`Interactive Pause`}</inlineCode>{` when `}<inlineCode parentName=\"p\">{`ENABLE_PAUSE`}</inlineCode>{` is set to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` in `}<inlineCode parentName=\"p\">{`<project_root>/dev/tests/acceptance/.env`}</inlineCode>{` file.`}</p>\n    <h2 {...{\n      \"id\": \"functional-testing-framework-run-commands\"\n    }}>{`Functional Testing Framework run commands`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf run:group\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf run:test\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf run:manifest\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf run:failed\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"use-interactive-pause-during-test-development\"\n    }}>{`Use `}<inlineCode parentName=\"h3\">{`Interactive Pause`}</inlineCode>{` during test development`}</h3>\n    <p>{`Here is a typical work flow for this use case:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Set `}<inlineCode parentName=\"li\">{`ENABLE_PAUSE`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{` under `}<inlineCode parentName=\"li\">{`.env`}</inlineCode></li>\n      <li parentName=\"ul\">{`Add `}<inlineCode parentName=\"li\">{`<pause>`}</inlineCode>{` action in a test where you want to pause execution for debugging`}</li>\n      <li parentName=\"ul\">{`Run test`}</li>\n      <li parentName=\"ul\">{`Execution should pause at `}<inlineCode parentName=\"li\">{`<pause>`}</inlineCode>{` action and invoke interactive console`}</li>\n      <li parentName=\"ul\">{`Try out commands in interactive console`}</li>\n      <li parentName=\"ul\">{`Resume test execution by pressing `}<inlineCode parentName=\"li\">{`ENTER`}</inlineCode></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"use-pause-on-test-failure\"\n    }}>{`Use `}<inlineCode parentName=\"h3\">{`Pause`}</inlineCode>{` on test failure`}</h3>\n    <p>{`When `}<inlineCode parentName=\"p\">{`ENABLE_PAUSE`}</inlineCode>{` is set to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`, the Functional Testing Framework automatically generates `}<inlineCode parentName=\"p\">{`pause()`}</inlineCode>{` action in `}<inlineCode parentName=\"p\">{`_failed()`}</inlineCode>{` hook for tests and in `}<inlineCode parentName=\"p\">{`_failed()`}</inlineCode>{` function in `}<inlineCode parentName=\"p\">{`MagentoWebDriver`}</inlineCode>{`.\nThis allows you to use `}<inlineCode parentName=\"p\">{`pause`}</inlineCode>{` to debug test failure for a long running test. The work flow might look like:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Set `}<inlineCode parentName=\"li\">{`ENABLE_PAUSE`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{` under `}<inlineCode parentName=\"li\">{`.env`}</inlineCode></li>\n      <li parentName=\"ul\">{`Run test`}</li>\n      <li parentName=\"ul\">{`Execution pauses and invokes interactive console right after test fails`}</li>\n      <li parentName=\"ul\">{`Examine and debug on the spot of failure`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"functional-testing-framework-codecept-run-command\"\n    }}>{`Functional Testing Framework Codecept run command`}</h2>\n    <p>{`You can also use MFTF's wrapper command to run Codeception directly and activate `}<inlineCode parentName=\"p\">{`Interactive Pause`}</inlineCode>{` by passing `}<inlineCode parentName=\"p\">{`--debug`}</inlineCode>{` option.\nYou do not need to set `}<inlineCode parentName=\"p\">{`ENABLE_PAUSE`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` for this command if you don't want to pause on test failure.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf codecept:run --debug\n`}</code></pre>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The Functional Testing Framework command \"--debug\" option has different meaning than Codeception command \"--debug\" mode option.`}</p>\n    {\n      /* Link definitions */\n    }\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}