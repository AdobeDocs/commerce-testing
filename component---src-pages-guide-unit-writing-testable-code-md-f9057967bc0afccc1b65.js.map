{"version":3,"file":"component---src-pages-guide-unit-writing-testable-code-md-f9057967bc0afccc1b65.js","mappings":"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","sources":["webpack://commerce-testing/./src/pages/guide/unit/writing-testable-code.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-testing/commerce-testing/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"writing-testable-code\"\n    }}>{`Writing testable code`}</h1>\n    <p>{`This topic does not aim to be a replacement for existing documentation about testing, but rather tries to highlight some thoughts on the subject. Although the truth of anything depends somewhat on the context, this topic attempts to provide information that is applicable in `}<em parentName=\"p\">{`most`}</em>{` situations.`}</p>\n    <h2 {...{\n      \"id\": \"tests-should-be-simple\"\n    }}>{`Tests should be simple`}</h2>\n    <p>{`Tests should be trivial to write. Simple, small classes with few collaborators are easy to test. If testing a class is difficult, the class probably has grown too large and does too much. Split the class into several classes, each of which does only one thing.`}</p>\n    <h2 {...{\n      \"id\": \"manage-dependencies\"\n    }}>{`Manage dependencies`}</h2>\n    <p>{`A big part of making code testable is managing its dependencies. Dependencies can take many forms and they can be clearly stated or hidden.`}</p>\n    <p>{`The fewer dependencies a class has and the more obvious they are, the easier it is to maintain and test the class. At the same time, the class is less likely to break because of future changes.`}</p>\n    <h3 {...{\n      \"id\": \"creating-new-instances\"\n    }}>{`Creating new instances`}</h3>\n    <p>{`We strongly recommend you do `}<em parentName=\"p\">{`not`}</em>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Use `}<inlineCode parentName=\"li\">{`new`}</inlineCode>{` to instantiate new objects, because that removes the flexibility the dependency configuration offers.`}</li>\n      <li parentName=\"ul\">{`Use the `}<inlineCode parentName=\"li\">{`ObjectManager`}</inlineCode>{` directly in production code.`}</li>\n    </ul>\n    <p>{`There always is a better alternative, usually a `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/commerce/php/development/components/code-generation/\"\n      }}>{`generated`}</a>{` `}<inlineCode parentName=\"p\">{`Factory`}</inlineCode>{` class, or a `}<inlineCode parentName=\"p\">{`Locator`}</inlineCode>{` class of sorts.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`This rule applies only to production code. When writing `}<a parentName=\"p\" {...{\n        \"href\": \"../integration/index.md\"\n      }}>{`integration tests`}</a>{`, this is not true. In fact, the object manager is recommended for integration tests.`}</p>\n    <h3 {...{\n      \"id\": \"collaborator-classes\"\n    }}>{`Collaborator classes`}</h3>\n    <p>{`Whenever an external class property, class constant, or a class method is used in a file, this file depends on the class containing the method or constant. Even if the external class is not used as an instantiated object, the current class is still hard-wired to depend on it.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://glossary.magento.com/php\"\n      }}>{`PHP`}</a>{` cannot execute the code unless it can load the external class, too. That is why such external classes are referred to as `}<em parentName=\"p\">{`dependencies`}</em>{`. Try to keep the number of dependencies to a minimum.`}</p>\n    <p>{`Collaborator instances should be passed into the class using `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/commerce/php/development/components/dependency-injection/\"\n      }}>{`constructor injection`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"the-environment-file-system-time-global-variables\"\n    }}>{`The environment (file system, time, global variables)`}</h3>\n    <p>{`Whenever your code requires access to some part of the environment, try to use a collaborator class that can easily be replaced by a test double (also referred to as a `}<em parentName=\"p\">{`mock`}</em>{`) instead.`}</p>\n    <p>{`For example, if you need...`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`file system access?`}</p>\n        <p parentName=\"li\">{`Use `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/Filesystem/Io/IoInterface.php\"\n          }}><inlineCode parentName=\"a\">{`\\\\Magento\\\\Framework\\\\Filesystem\\\\Io\\\\IoInterface`}</inlineCode></a>{` instead of `}<inlineCode parentName=\"p\">{`fopen()`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`dir()`}</inlineCode>{` or other native methods.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`the current time?`}</p>\n        <p parentName=\"li\">{`Inject a `}<a parentName=\"p\" {...{\n            \"href\": \"https://www.php.net/manual/en/refs.calendar.php\"\n          }}><inlineCode parentName=\"a\">{`\\\\DateTimeInterface`}</inlineCode></a>{` instance (for example `}<inlineCode parentName=\"p\">{`\\\\DateTimeImmutable`}</inlineCode>{`) and use that.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`the remote IP?`}</p>\n        <p parentName=\"li\">{`Use `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/HTTP/PhpEnvironment/RemoteAddress.php\"\n          }}><inlineCode parentName=\"a\">{`\\\\Magento\\\\Framework\\\\HTTP\\\\PhpEnvironment\\\\RemoteAddress`}</inlineCode></a>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`access to `}<inlineCode parentName=\"p\">{`$_SERVER`}</inlineCode>{`?`}</p>\n        <p parentName=\"li\">{`Consider using `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/magento/magento2/blob/2.4/lib/internal/Magento/Framework/HTTP/PhpEnvironment/Request.php\"\n          }}><inlineCode parentName=\"a\">{`\\\\Magento\\\\Framework\\\\HTTP\\\\PhpEnvironment\\\\Request::getServerValue()`}</inlineCode></a>{`.`}</p>\n      </li>\n    </ul>\n    <p>{`Anything that can be easily replaced by a test double is preferable to using low-level functions.`}</p>\n    <h2 {...{\n      \"id\": \"interfaces-over-classes\"\n    }}>{`Interfaces over classes`}</h2>\n    <p>{`Dependencies on `}<em parentName=\"p\">{`interfaces`}</em>{` should be preferred over dependencies on `}<em parentName=\"p\">{`classes`}</em>{` because the former decouples your code from implementation details. This helps to isolate your code from future changes.`}</p>\n    <p>{`This guideline is true only if you exclusively use the methods and constants defined in the interface. If your code also uses other public methods specific to the class implementing the interface, your code is no longer independent of the implementation details.`}</p>\n    <p>{`You lose any benefits of having an interface if you use methods of a concrete class.`}</p>\n    <p>{`Even worse, the code is lying, because apparently there is a dependency on the interface only; however, you could not use a different implementation of the same interface. This can lead to considerable maintenance costs down the road. In such cases, using the class name of the concrete implementation is preferable to using the interface name as a dependency.`}</p>\n    <p>{`To illustrate, assume there is a theoretical `}<inlineCode parentName=\"p\">{`RequestInterface`}</inlineCode>{` with two methods, `}<inlineCode parentName=\"p\">{`getPathInfo()`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`getParam($name)`}</inlineCode>{`.`}</p>\n    <p>{`For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`interface RequestInterface\n{\n    public function getPathInfo();\n    public function getParam($name);\n}\n`}</code></pre>\n    <p>{`Assume there is a concrete implementation `}<inlineCode parentName=\"p\">{`HttpRequest`}</inlineCode>{` that also has a public method `}<inlineCode parentName=\"p\">{`getParams()`}</inlineCode>{` in addition to the two interface methods.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class HttpRequest implements RequestInterface\n{\n    public function getPathInfo() {...}\n    public function getParam($name) {...}\n    public function getParams() {...}\n}\n`}</code></pre>\n    <p>{`Any code that depends on `}<inlineCode parentName=\"p\">{`RequestInterface`}</inlineCode>{` should avoid using the `}<inlineCode parentName=\"p\">{`getParams()`}</inlineCode>{` method, because it is not part of the interface.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`class MyClass\n{\n    /**\n     * @var RequestInterface\n     */\n    private $request;\n\n    public function __construct(RequestInterface $request)\n    {\n        $this->request = $request;\n    }\n\n    public function doSomething()\n    {\n        foreach ($this->request->getParams() as $paramName => $value) {\n            // ... some more code\n        }\n    }\n}\n`}</code></pre>\n    <p>{`This completely defeats the purpose of the interface. A better solution might be the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`public function doSomething()\n{\n    foreach (['foo', 'bar'] as $paramName) {\n        $value = $this->request->getParam($paramName);\n        // ... some more code\n    }\n}\n`}</code></pre>\n    <p>{`The second example method `}<inlineCode parentName=\"p\">{`doSomething()`}</inlineCode>{` does not call the `}<inlineCode parentName=\"p\">{`getParams()`}</inlineCode>{` method.`}</p>\n    <p>{`If `}<inlineCode parentName=\"p\">{`getParams()`}</inlineCode>{` had been called, the class `}<inlineCode parentName=\"p\">{`MyClass`}</inlineCode>{` would have instantly depended on the `}<inlineCode parentName=\"p\">{`HttpRequest`}</inlineCode>{` implementation and the benefit of having an interface would have been completely lost.`}</p>\n    <p>{`If cannot avoid using `}<inlineCode parentName=\"p\">{`getParams()`}</inlineCode>{`, you can do any of the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Add the `}<inlineCode parentName=\"li\">{`getParams()`}</inlineCode>{` method to `}<inlineCode parentName=\"li\">{`RequestInterface`}</inlineCode></li>\n      <li parentName=\"ul\">{`Make `}<inlineCode parentName=\"li\">{`MyClass`}</inlineCode>{` dependent on `}<inlineCode parentName=\"li\">{`HttpRequest`}</inlineCode>{` directly instead of using `}<inlineCode parentName=\"li\">{`RequestInterface`}</inlineCode>{` as a constructor argument`}</li>\n    </ul>\n    <p>{`The benefit `}<em parentName=\"p\">{`interfaces`}</em>{` offer is that interfaces keep code decoupled from implementation details. This means that future changes will not cause your code to fail unless the interface is changed too.`}</p>\n    <p>{`Also, interfaces can very easily be replaced by test doubles (also referred to as `}<em parentName=\"p\">{`mocks`}</em>{`). Mocking concrete classes can be much more complex.`}</p>\n    <h2 {...{\n      \"id\": \"class-and-method-size\"\n    }}>{`Class and method size`}</h2>\n    <p>{`Try to keep the number of methods in a class and the number of lines of code per method as few as possible.`}</p>\n    <p>{`Shorter methods do less, which in turn means they are easier to test. The same is true for small classes.`}</p>\n    <p>{`As a rule of thumb, try to keep methods to five or fewer lines of code.`}</p>\n    <h3 {...{\n      \"id\": \"each-function-has-one-single-purpose\"\n    }}>{`Each function has one single purpose`}</h3>\n    <p>{`Functions should do only one thing and they should do it very well.`}</p>\n    <p>{`Once you respect the `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Single_responsibility_principle\"\n      }}>{`single responsibility principle`}</a>{`, you will know exactly what you are testing and your functions will be smaller and clearer.\nHave a look at the following examples:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// Wrong\n\npublic function execute($customer)\n{\n    $this->notifyCustomer($customer);\n}\n\n/**\n * Save customer and notify by email\n */\npublic function notifyCustomer($customer)\n{\n    $this->customerRepository->save($customer);\n    $this->email->sendEmail($customer->getEmail());\n}\n`}</code></pre>\n    <p>{`In the above example, the `}<inlineCode parentName=\"p\">{`notifyCustomer`}</inlineCode>{` method does more than the method's name suggests. Such methods will be harder to maintain and can have some side effects you would not assume by its name.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`// Correct\n\npublic function execute($customer)\n{\n    $this->saveCustomer($customer);\n    $this->notifyCustomer($customer->getEmail());\n}\n\n/**\n * Save Customer\n */\npublic function saveCustomer($customer)\n{\n    $this->customerRepository->save($customer);\n}\n\n/**\n * Notify customer by email\n */\npublic function notifyCustomer($email)\n{\n    $this->email->sendEmail($email);\n}\n`}</code></pre>\n    <p>{`In the correct example, the `}<inlineCode parentName=\"p\">{`notifyCustomer`}</inlineCode>{` method is slightly refactored, and the only thing it does is to notify the customer by email. The rest of the logic was moved into a separate method, which has a clear name.`}</p>\n    <h3 {...{\n      \"id\": \"testing-private-and-protected-methods\"\n    }}>{`Testing private and protected methods`}</h3>\n    <p>{`When you see the need to write tests for `}<inlineCode parentName=\"p\">{`private`}</inlineCode>{` scope methods, it usually is a sign that the class under test is doing too much.`}</p>\n    <p>{`Consider extracting the private functionality into a separate class and using that class as a collaborator. The extracted class then provides the functionality using a public method and can easily be tested.`}</p>\n    <h2 {...{\n      \"id\": \"helpful-principles\"\n    }}>{`Helpful principles`}</h2>\n    <p>{`Many good practices for software development in general and object-oriented programming in particular have been formulated as principles over the last decades. Applying these rules of thumb helps to keep code in good shape and also leads to more easily testable code.`}</p>\n    <p>{`The following list of principles is by no means complete, but they can serve as a starting point when you start to write testable code.`}</p>\n    <h3 {...{\n      \"id\": \"tell-do-not-ask\"\n    }}>{`Tell, do not ask`}</h3>\n    <p>{`Try to use as few getters as possible. Instead, use methods that tell the objects directly what to do. Asking for object values is a sign of misplaced responsibilities. `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Kent_Beck\"\n      }}>{`Kent Beck`}</a>{` called that \"feature envy\".`}</p>\n    <p>{`Consider moving the code that needs the value into a class that has the data available as the following example shows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`function extractMatchingDocuments(Document $searchDoc, array $documents)\n{\n    return array_filter($documents, function (Document $doc) use ($searchDoc){\n        return $doc->getFieldValue() === $searchDoc->getFieldValue();\n    });\n}\n`}</code></pre>\n    <p>{`The following example moves the comparison into a `}<inlineCode parentName=\"p\">{`matches()`}</inlineCode>{` method on the `}<inlineCode parentName=\"p\">{`Document`}</inlineCode>{` class instead.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`function extractMatchingDocuments(Document $searchDoc, array $documents)\n{\n    return array_filter($documents, function (Document $doc) use ($searchDoc){\n        return $searchDoc->matches($doc);\n    });\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"the-law-of-demeter\"\n    }}>{`The Law of Demeter`}</h3>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Law_of_Demeter\"\n      }}>{`Law of Demeter`}</a>{` principle is sometimes stated as \"Talk to friends only\" or \"Do not talk to strangers.\" It states that code can call methods only on objects that it received in one of the following ways:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Objects received as constructor arguments`}</li>\n      <li parentName=\"ul\">{`Objects received as arguments to the current method`}</li>\n      <li parentName=\"ul\">{`Objects instantiated in the current method`}</li>\n    </ul>\n    <p>{`The principle explicitly states that no method can be called on objects that are the return value of another method call. Calling method calls on returned objects introduces a hidden dependency on the returned object type.`}</p>\n    <p>{`The following example violates the Law of Demeter by calling the method `}<inlineCode parentName=\"p\">{`getByName()`}</inlineCode>{` on the return value of `}<inlineCode parentName=\"p\">{`getHeaders()`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`function isJsonResponse(Response $response)\n{\n    $headers = $response->getHeaders();\n    return $headers->getByName('Content-Type') === 'application/json';\n}\n`}</code></pre>\n    <p>{`The solution is to add the method `}<inlineCode parentName=\"p\">{`isJsonResponse()`}</inlineCode>{` to the response object instead.`}</p>\n    <p>{`Method chaining (for example, `}<inlineCode parentName=\"p\">{`$foo->getSomething()->setThat($x)->doBar()`}</inlineCode>{`) is often a sign of this problem. When testing this type of code, you must often create test doubles that must be set up to return other test doubles and so on (\"Mocks returning mocks...\").`}</p>\n    <h3 {...{\n      \"id\": \"i-do-not-care\"\n    }}>{`\"I do not care\"`}</h3>\n    <p>{`An interesting approach to writing more testable code is to try to delegate as much as possible to other classes. Every time any currently not available resource is needed, just think \"I do not care where that comes from\" and add a collaborator class that provides it.`}</p>\n    <p>{`At first, this might seem like it causes the number of classes to explode, but in fact, each one of the classes is very short and simple and usually has very limited responsibilities.`}</p>\n    <p>{`Almost as a side effect, those classes are very easy to test.`}</p>\n    <h2 {...{\n      \"id\": \"for-more-information\"\n    }}>{`For more information`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://martinfowler.com/bliki/BeckDesignRules.html\"\n        }}>{`Rules of simple software design`}</a>{` by Kent Beck`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://books.google.com/books/about/Clean_Code.html?id=dwSfGQAACAAJ\"\n        }}>{`Clean Code`}</a>{` by Robert C. Martin`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://martinfowler.com/books/refactoring.html\"\n        }}>{`Refactoring`}</a>{` by Martin Fowler`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`Growing Object Oriented Software Guided by Tests`}</em>{` by Steve Freeman and Nat Pryce`}</li>\n    </ul>\n    {\n      /* Link definitions */\n    }\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}