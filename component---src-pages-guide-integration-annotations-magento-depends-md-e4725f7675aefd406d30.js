"use strict";(self.webpackChunkcommerce_testing=self.webpackChunkcommerce_testing||[]).push([[348],{58706:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return p},default:function(){return c}});var r,o=t(87462),a=t(63366),s=(t(15007),t(64983)),m=t(91515),u=["components"],p={},d=(r="InlineAlert",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.mdx)("div",e)}),i={_frontmatter:p},l=m.Z;function c(e){var n=e.components,t=(0,a.Z)(e,u);return(0,s.mdx)(l,(0,o.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,s.mdx)("h1",{id:"dependency-annotation"},"Dependency annotation"),(0,s.mdx)("p",null,"The ",(0,s.mdx)("inlineCode",{parentName:"p"},"@depends")," annotation helps you to define some dependencies between methods."),(0,s.mdx)("h2",{id:"format"},"Format"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-php"},"/**\n * @depends methodName\n */\n")),(0,s.mdx)(d,{variant:"warning",slots:"text",mdxType:"InlineAlert"}),(0,s.mdx)("p",null,"Please note that dependencies don't define the order in which the test methods are executed, so you still have to keep to proper order for your methods."),(0,s.mdx)("h3",{id:"example-1"},"Example 1"),(0,s.mdx)("p",null,"Let's check the following basic example."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-php"},"/**\n * @return int\n */\npublic function testOne(): int\n{\n    $number = 2;\n    $this->assertEquals(2, $number);\n\n    return $number;\n}\n\n/**\n * @depends testOne\n *\n * @param $number\n */\npublic function testNumber($number)\n{\n    $this->assertEquals(2, $number);\n}\n")),(0,s.mdx)("h3",{id:"example-2"},"Example 2"),(0,s.mdx)(d,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,s.mdx)("p",null,"If using multiple dependencies, arguments are passed in the annotations' defined order."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-php"},"/**\n * @return int\n */\npublic function testTwo(): int\n{\n    $number = 2;\n    $this->assertEquals(2, $number);\n\n    return $number;\n}\n\n/**\n * @return int\n */\npublic function testOne(): int\n{\n    $number = 1;\n    $this->assertEquals(1, $number);\n\n    return $number;\n}\n\n/**\n * @depends testOne\n * @depends testTwo\n *\n * @param $one\n * @param $two\n */\npublic function testNumber(int $one, int $two)\n{\n    $this->assertEquals(1, $one);\n    $this->assertEquals(2, $two);\n}\n")),(0,s.mdx)("h3",{id:"example-3"},"Example 3"),(0,s.mdx)("p",null,"Let's check the following practical example, where we'll be checking the customer email by customer ID."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-php"},"use Magento\\Customer\\Api\\CustomerRepositoryInterface;\nuse Magento\\Customer\\Api\\Data\\CustomerInterface;\nuse Magento\\TestFramework\\Helper\\Bootstrap;\n...\n\n/**\n * @magentoDataFixture Magento/Customer/_files/customer.php\n */\npublic function testLoadCustomer(): CustomerInterface\n{\n    $customerId = 1;\n    $objectManager = Bootstrap::getObjectManager();\n    $customerRepository = $objectManager->create(CustomerRepositoryInterface::class);\n\n    return $customerRepository->getById($customerId);\n}\n\n/**\n * @depends testLoadCustomer\n *\n * @param CustomerInterface $customer\n */\npublic function testEmail(CustomerInterface $customer)\n{\n    $this->assertEquals('customer@example.com', $customer->getEmail());\n}\n")),(0,s.mdx)("p",null,"You can read more about PHPUnit dependency annotation ",(0,s.mdx)("a",{parentName:"p",href:"https://phpunit.readthedocs.io/en/8.2/annotations.html#depends"},"here"),"."))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guide-integration-annotations-magento-depends-md-e4725f7675aefd406d30.js.map