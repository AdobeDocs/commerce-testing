{"version":3,"file":"component---src-pages-functional-testing-framework-extending-md-1e0829a678c1e1cb8210.js","mappings":"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","sources":["webpack://commerce-testing/./src/pages/functional-testing-framework/extending.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-testing/commerce-testing/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"extending\"\n    }}>{`Extending`}</h1>\n    <p>{`There are cases when you need to create many tests that are very similar to each other.\nFor example, only one or two parameters (for example, URL) might vary between tests.\nTo avoid copy-pasting and to save some time the Functional Testing Framework (MFTF) enables you to extend test components such as `}<a parentName=\"p\" {...{\n        \"href\": \"test/index.md\"\n      }}>{`test`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"data.md\"\n      }}>{`data`}</a>{`, and `}<a parentName=\"p\" {...{\n        \"href\": \"test/action-groups.md\"\n      }}>{`action group`}</a>{`.\nYou can create or update any component of the parent body in your new test/action group/entity.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`A test starting with `}<inlineCode parentName=\"li\">{`<test name=\"SampleTest\" extends=\"ParentTest\">`}</inlineCode>{` creates a test `}<inlineCode parentName=\"li\">{`SampleTest`}</inlineCode>{` that takes body of existing test `}<inlineCode parentName=\"li\">{`ParentTest`}</inlineCode>{` and adds to it the body of `}<inlineCode parentName=\"li\">{`SampleTest`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`An action group starting with `}<inlineCode parentName=\"li\">{`<actionGroup name=\"SampleActionGroup\" extends=\"ParentActionGroup\">`}</inlineCode>{` creates an action group based on the `}<inlineCode parentName=\"li\">{`ParentActionGroup`}</inlineCode>{`, but with the changes specified in `}<inlineCode parentName=\"li\">{`SampleActionGroup`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`An entity starting with `}<inlineCode parentName=\"li\">{`<entity name=\"SampleEntity\" extends=\"ParentEntity\">`}</inlineCode>{` creates an entity `}<inlineCode parentName=\"li\">{`SampleEntity`}</inlineCode>{` that is equivalent to merging the `}<inlineCode parentName=\"li\">{`SampleEntity`}</inlineCode>{` with the `}<inlineCode parentName=\"li\">{`ParentEntity`}</inlineCode>{`.`}</li>\n    </ul>\n    <p>{`Specify needed variations for a parent object and produce a copy of the original that incorporates the specified changes (the \"delta\").`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Unlike merging, the parent test (or action group) will still exist after the test generation.`}</p>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The extended test will be skipped if the parent test is skipped.`}</p>\n    <h2 {...{\n      \"id\": \"extending-tests\"\n    }}>{`Extending tests`}</h2>\n    <h3 {...{\n      \"id\": \"update-a-test-step\"\n    }}>{`Update a test step`}</h3>\n    <p><strong parentName=\"p\">{`Use case`}</strong>{`: Create two similar tests with a different action group reference by overwriting a `}<inlineCode parentName=\"p\">{`stepKey`}</inlineCode>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Test with \"extends\":`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<tests>\n    <test name=\"AdminLoginSuccessfulTest\">\n        <actionGroup ref=\"AdminLoginActionGroup\" stepKey=\"loginAsAdmin\"/>\n        <actionGroup ref=\"AssertAdminSuccessLoginActionGroup\" stepKey=\"assertLoggedIn\"/>\n        <actionGroup ref=\"AdminLogoutActionGroup\" stepKey=\"logoutFromAdmin\"/>\n    </test>\n    <test name=\"AdminLoginAsOtherUserSuccessfulTest\" extends=\"AdminLoginSuccessfulTest\">\n        <actionGroup ref=\"AdminLoginAsOtherUserActionGroup\" stepKey=\"loginAsAdmin\"/>\n    </test>\n</tests>\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Test without \"extends\":`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<tests>\n    <test name=\"AdminLoginSuccessfulTest\">\n        <actionGroup ref=\"AdminLoginActionGroup\" stepKey=\"loginAsAdmin\"/>\n        <actionGroup ref=\"AssertAdminSuccessLoginActionGroup\" stepKey=\"assertLoggedIn\"/>\n        <actionGroup ref=\"AdminLogoutActionGroup\" stepKey=\"logoutFromAdmin\"/>\n    </test>\n    <test name=\"AdminLoginAsOtherUserSuccessfulTest\">\n        <actionGroup ref=\"AdminLoginAsOtherUserActionGroup\" stepKey=\"loginAsAdmin\"/>\n        <actionGroup ref=\"AssertAdminSuccessLoginActionGroup\" stepKey=\"assertLoggedIn\"/>\n        <actionGroup ref=\"AdminLogoutActionGroup\" stepKey=\"logoutFromAdmin\"/>\n    </test>\n</tests>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"add-a-test-step\"\n    }}>{`Add a test step`}</h3>\n    <p><strong parentName=\"p\">{`Use case`}</strong>{`: Create two similar tests where the second test contains two additional steps specified to occur `}<inlineCode parentName=\"p\">{`before`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`after`}</inlineCode>{` other `}<inlineCode parentName=\"p\">{`stepKeys`}</inlineCode>{`.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Tests with \"extends\":`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<tests>\n    <test name=\"AdminLoginSuccessfulTest\">\n        <actionGroup ref=\"AdminLoginActionGroup\" stepKey=\"loginAsAdmin\"/>\n        <actionGroup ref=\"AssertAdminSuccessLoginActionGroup\" stepKey=\"assertLoggedIn\"/>\n        <actionGroup ref=\"AdminLogoutActionGroup\" stepKey=\"logoutFromAdmin\"/>\n    </test>\n    <test name=\"AdminLoginCheckRememberMeSuccessfulTest\" extends=\"AdminLoginSuccessfulTest\">\n        <actionGroup ref=\"AdminCheckRememberMeActionGroup\" stepKey=\"checkRememberMe\" after=\"loginAsAdmin\"/>\n        <actionGroup ref=\"AssertAdminRememberMeActionGroup\" stepKey=\"assertRememberMe\" before=\"logoutFromAdmin\"/>\n    </test>\n</tests>\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Tests without \"extends\":`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<tests>\n    <test name=\"AdminLoginSuccessfulTest\">\n        <actionGroup ref=\"AdminLoginActionGroup\" stepKey=\"loginAsAdmin\"/>\n        <actionGroup ref=\"AssertAdminSuccessLoginActionGroup\" stepKey=\"assertLoggedIn\"/>\n        <actionGroup ref=\"AdminLogoutActionGroup\" stepKey=\"logoutFromAdmin\"/>\n    </test>\n    <test name=\"AdminLoginCheckRememberMeSuccessfulTest\">\n        <actionGroup ref=\"AdminLoginActionGroup\" stepKey=\"loginAsAdmin\"/>\n        <actionGroup ref=\"AdminCheckRememberMeActionGroup\" stepKey=\"checkRememberMe\"/>\n        <actionGroup ref=\"AssertAdminSuccessLoginActionGroup\" stepKey=\"assertLoggedIn\"/>\n        <actionGroup ref=\"AssertAdminRememberMeActionGroup\" stepKey=\"assertRememberMe\"/>\n        <actionGroup ref=\"AdminLogoutActionGroup\" stepKey=\"logoutFromAdmin\"/>\n    </test>\n</tests>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"update-a-test-before-hook\"\n    }}>{`Update a test before hook`}</h3>\n    <p><strong parentName=\"p\">{`Use case`}</strong>{`: Create two similar tests where the second test contains an additional action in the `}<inlineCode parentName=\"p\">{`before`}</inlineCode>{` hook.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Tests with \"extends\":`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<tests>\n    <test name=\"AdminLoginSuccessfulTest\">\n        <before>\n            <actionGroup ref=\"AdminLoginActionGroup\" stepKey=\"loginAsAdmin\"/>\n        </before>\n        <actionGroup ref=\"AssertAdminSuccessLoginActionGroup\" stepKey=\"assertLoggedIn\"/>\n        <actionGroup ref=\"AdminLogoutActionGroup\" stepKey=\"logoutFromAdmin\"/>\n    </test>\n    <test name=\"AdminLoginCheckRememberMeSuccessfulTest\" extends=\"AdminLoginSuccessfulTest\">\n        <before>\n            <actionGroup ref=\"AdminCheckRememberMeActionGroup\" stepKey=\"checkRememberMe\" after=\"loginAsAdmin\"/>\n        </before>\n    </test>\n</tests>\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Tests without \"extends\":`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<tests>\n    <test name=\"AdminLoginSuccessfulTest\">\n        <before>\n            <actionGroup ref=\"AdminLoginActionGroup\" stepKey=\"loginAsAdmin\"/>\n        </before>\n        <actionGroup ref=\"AssertAdminSuccessLoginActionGroup\" stepKey=\"assertLoggedIn\"/>\n        <actionGroup ref=\"AdminLogoutActionGroup\" stepKey=\"logoutFromAdmin\"/>\n    </test>\n    <test name=\"AdminLoginCheckRememberMeSuccessfulTest\">\n        <before>\n            <actionGroup ref=\"AdminLoginActionGroup\" stepKey=\"loginAsAdmin\"/>\n            <actionGroup ref=\"AdminCheckRememberMeActionGroup\" stepKey=\"checkRememberMe\"/>\n        </before>\n        <actionGroup ref=\"AssertAdminSuccessLoginActionGroup\" stepKey=\"assertLoggedIn\"/>\n        <actionGroup ref=\"AdminLogoutActionGroup\" stepKey=\"logoutFromAdmin\"/>\n    </test>\n</tests>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"extending-action-groups\"\n    }}>{`Extending action groups`}</h2>\n    <p>{`Extend an `}<a parentName=\"p\" {...{\n        \"href\": \"test/action-groups.md\"\n      }}>{`action group`}</a>{` to add or update `}<a parentName=\"p\" {...{\n        \"href\": \"test/actions.md\"\n      }}>{`actions`}</a>{` in your module.`}</p>\n    <h3 {...{\n      \"id\": \"update-an-action\"\n    }}>{`Update an action`}</h3>\n    <p><strong parentName=\"p\">{`Use case`}</strong>{`: The `}<inlineCode parentName=\"p\">{`AssertAdminCountProductActionGroup`}</inlineCode>{` action group counts the particular product.\nModify the action group to use another product.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Action groups with \"extends\":`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<actionGroups>\n    <actionGroup name=\"AssertAdminCountProductActionGroup\">\n        <arguments>\n            <argument name=\"count\" type=\"string\"/>\n        </arguments>\n        <grabMultiple selector=\"selectorForProductA\" stepKey=\"grabProducts\"/>\n        <assertCount stepKey=\"assertCount\">\n            <expectedResult type=\"int\">{{count}}</expectedResult>\n            <actualResult type=\"variable\">grabProducts</actualResult>\n        </assertCount>\n    </actionGroup>\n\n    <actionGroup name=\"AssertAdminOtherCountProductActionGroup\" extends=\"AssertAdminCountProductActionGroup\">\n        <grabMultiple selector=\"selectorForProductB\" stepKey=\"grabProducts\"/>\n    </actionGroup>\n</actionGroups>\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Action groups without \"extends\":`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<actionGroups>\n    <actionGroup name=\"AssertAdminCountProductActionGroup\">\n        <arguments>\n            <argument name=\"count\" type=\"string\"/>\n        </arguments>\n        <grabMultiple selector=\"selectorForProductA\" stepKey=\"grabProducts\"/>\n        <assertCount stepKey=\"assertCount\">\n            <expectedResult type=\"int\">{{count}}</expectedResult>\n            <actualResult type=\"variable\">grabProducts</actualResult>\n        </assertCount>\n    </actionGroup>\n\n    <actionGroup name=\"AssertAdminOtherCountProductActionGroup\">\n        <arguments>\n            <argument name=\"count\" type=\"string\"/>\n        </arguments>\n        <grabMultiple selector=\"selectorForProductB\" stepKey=\"grabProducts\"/>\n        <assertCount stepKey=\"assertCount\">\n            <expectedResult type=\"int\">{{count}}</expectedResult>\n            <actualResult type=\"variable\">grabProducts</actualResult>\n        </assertCount>\n    </actionGroup>\n</actionGroups>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"add-an-action\"\n    }}>{`Add an action`}</h3>\n    <p><strong parentName=\"p\">{`Use case`}</strong>{`: The `}<inlineCode parentName=\"p\">{`AdminGetProductCountActionGroup`}</inlineCode>{` action group returns the count of products.\nAdd a new test `}<inlineCode parentName=\"p\">{`AssertAdminVerifyProductCountActionGroup`}</inlineCode>{` that asserts the count of products:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Action groups with \"extends\":`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<actionGroups>\n    <actionGroup name=\"AdminGetProductCountActionGroup\">\n        <arguments>\n            <argument name=\"productSelector\" type=\"string\"/>\n        </arguments>\n        <grabMultiple selector=\"{{productSelector}}\" stepKey=\"grabProducts\"/>\n    </actionGroup>\n\n    <actionGroup name=\"AssertAdminVerifyProductCountActionGroup\" extends=\"AdminGetProductCountActionGroup\">\n        <arguments>\n            <argument name=\"count\" type=\"string\"/>\n        </arguments>\n        <assertCount stepKey=\"assertCount\" after=\"grabProducts\">\n            <expectedResult type=\"int\">{{count}}</expectedResult>\n            <actualResult type=\"variable\">grabProducts</actualResult>\n        </assertCount>\n    </actionGroup>\n</actionGroups>\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Action groups without \"extends\":`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<actionGroups>\n    <actionGroup name=\"AdminGetProductCountActionGroup\">\n        <arguments>\n            <argument name=\"productSelector\" type=\"string\"/>\n        </arguments>\n        <grabMultiple selector=\"{{productSelector}}\" stepKey=\"grabProducts\"/>\n    </actionGroup>\n\n    <actionGroup name=\"AssertAdminVerifyProductCountActionGroup\">\n        <arguments>\n            <argument name=\"count\" type=\"string\"/>\n            <argument name=\"productSelector\" type=\"string\"/>\n        </arguments>\n        <grabMultiple selector=\"{{productSelector}}\" stepKey=\"grabProducts\"/>\n        <assertCount stepKey=\"assertCount\">\n            <expectedResult type=\"int\">{{count}}</expectedResult>\n            <actualResult type=\"variable\">grabProducts</actualResult>\n        </assertCount>\n    </actionGroup>\n</actionGroups>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"extending-data\"\n    }}>{`Extending data`}</h2>\n    <p>{`Extend data to reuse entities in your module.`}</p>\n    <h3 {...{\n      \"id\": \"update-a-data-entry\"\n    }}>{`Update a data entry`}</h3>\n    <p><strong parentName=\"p\">{`Use case`}</strong>{`: Create an entity named `}<inlineCode parentName=\"p\">{`DivPanelGreen`}</inlineCode>{`, which is similar to the `}<inlineCode parentName=\"p\">{`DivPanel`}</inlineCode>{` entity, except that it is green.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Entities with \"extends\":`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<entities>\n    <entity name=\"DivPanel\">\n        <data key=\"divColor\">Red</data>\n        <data key=\"divSize\">80px</data>\n        <data key=\"divWidth\">100%</data>\n    </entity>\n    <entity name=\"DivPanelGreen\" extends=\"DivPanel\">\n        <data key=\"divColor\">Green</data>\n    </entity>\n</entities>\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Entities without \"extends\":`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<entities>\n    <entity name=\"DivPanel\">\n        <data key=\"divColor\">Red</data>\n        <data key=\"divSize\">80px</data>\n        <data key=\"divWidth\">100%</data>\n    </entity>\n    <entity name=\"DivPanelGreen\" extends=\"DivPanel\">\n        <data key=\"divColor\">Green</data>\n        <data key=\"divSize\">80px</data>\n        <data key=\"divWidth\">100%</data>\n    </entity>\n</entities>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"add-a-data-entry\"\n    }}>{`Add a data entry`}</h3>\n    <p><strong parentName=\"p\">{`Use case`}</strong>{`: Create an entity named `}<inlineCode parentName=\"p\">{`DivPanelGreen`}</inlineCode>{`, which is similar to the `}<inlineCode parentName=\"p\">{`DivPanel`}</inlineCode>{` entity, except that it has a specific panel color.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Entities with \"extends\":`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<entities>\n    <entity name=\"DivPanel\">\n        <data key=\"divColor\">Red</data>\n        <data key=\"divSize\">80px</data>\n        <data key=\"divWidth\">100%</data>\n    </entity>\n    <entity name=\"DivPanelGreen\" extends=\"DivPanel\">\n        <data key=\"divColor\">#000000</data>\n        <data key=\"AttributeHidden\">True</data>\n    </entity>\n</entities>\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Entities without \"extends\":`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<entities>\n    <entity name=\"DivPanel\">\n        <data key=\"divColor\">Red</data>\n        <data key=\"divSize\">80px</data>\n        <data key=\"divWidth\">100%</data>\n    </entity>\n    <entity name=\"DivPanelGreen\" extends=\"DivPanel\">\n        <data key=\"divColor\">#000000</data>\n        <data key=\"divSize\">80px</data>\n        <data key=\"divWidth\">100%</data>\n        <data key=\"AttributeHidden\">True</data>\n    </entity>\n</entities>\n`}</code></pre>\n    {\n      /* Link definitions */\n    }\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","InlineAlert","name","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}