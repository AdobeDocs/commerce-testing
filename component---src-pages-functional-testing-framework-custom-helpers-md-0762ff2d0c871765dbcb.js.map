{"version":3,"file":"component---src-pages-functional-testing-framework-custom-helpers-md-0762ff2d0c871765dbcb.js","mappings":"8MAUsBA,E,wEAFTC,EAAe,CAAC,EAOvBC,GALgBF,EAKY,cALJ,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EACjB,GAGKG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,kBADR,mBAGA,SAACT,EAAD,CAAaU,QAAQ,UAAUC,MAAM,OAAOF,QAAQ,iBACpD,gKACA,wLACA,iFACA,oBACE,eAAIG,WAAW,OAAK,uBAAYA,WAAW,MAAvB,yBACpB,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,kBAEtB,8QACA,wKAAyJ,uBAAYA,WAAW,KAAvB,YAAzJ,aACA,eACE,GAAM,WADR,YAGA,yGACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,qCAIL,sFACA,oBACE,eAAIA,WAAW,MAAf,mDACA,eAAIA,WAAW,MAAf,0CACA,eAAIA,WAAW,MAAf,2CACA,eAAIA,WAAW,MAAf,+BAEF,oIACA,eACE,GAAM,YADR,aAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,q6CA8CL,eACE,GAAM,6BADR,8BAGA,gFACA,oBACE,eAAIA,WAAW,MAAf,QAA4B,uBAAYA,WAAW,MAAvB,aAA5B,mCAAqH,uBAAYA,WAAW,MAAvB,yDACrH,eAAIA,WAAW,MAAf,mBAAuC,uBAAYA,WAAW,MAAvB,kBAAvC,gCAAkI,uBAAYA,WAAW,MAAvB,OAAlI,yBACA,eAAIA,WAAW,MAAf,4CAAgE,uBAAYA,WAAW,MAAvB,uFAAhE,MACA,eAAIA,WAAW,MAAf,sEACA,eAAIA,WAAW,MAAf,4HAAgJ,uBAAYA,WAAW,MAAvB,mEAAhJ,6CAEF,gMACA,eACE,GAAM,yBADR,0BAGA,2GACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,4iBAUL,eACE,GAAM,uBADR,wBAGA,oBACE,eAAIA,WAAW,MAAf,mJACA,eAAIA,WAAW,MAAf,QAA4B,uBAAYA,WAAW,MAAvB,SAA5B,gEACA,eAAIA,WAAW,MAAf,8CAAkE,uBAAYA,WAAW,MAAvB,UAAlE,gBACA,eAAIA,WAAW,MAAf,mEAAuF,uBAAYA,WAAW,MAAvB,WAAvF,6BAAwK,uBAAYA,WAAW,MAAvB,+BAAxK,6BACA,eAAIA,WAAW,MAAf,sFAEF,eACE,GAAM,iBADR,kBAGA,4IACA,mHAAoG,cAAGA,WAAW,IAC9G,KAAQ,oGADwF,yBAApG,gEAGA,oHACA,6HACA,eACE,GAAM,cADR,eAGA,mBAAG,cAAGA,WAAW,IACb,KAAQ,oGADT,qCAAH,+CAKH,CAEDL,EAAWM,gBAAiB,C","sources":["webpack://commerce-testing/./src/pages/functional-testing-framework/custom-helpers.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-testing/commerce-testing/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"custom-helpers\"\n    }}>{`Custom Helpers`}</h1>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Due to complexity, you should only write new custom helpers as a last resort, after trying to implement your test using built-in actions.`}</p>\n    <p>{`Custom Helpers allow test writers to write custom test actions to solve advanced requirements beyond what the Functional Testing Framework offers out of the box.`}</p>\n    <p>{`In version 3.0.0, the following test actions were removed:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<executeInSelenium>`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<performOn>`}</inlineCode></li>\n    </ul>\n    <p>{`These actions were removed because they allowed custom PHP code to be written inline inside of XML files. This code was difficult to read. It had no proper syntax highlighting and no linting. It was difficult to maintain, troubleshoot, and modify.`}</p>\n    <p>{`However, sometimes custom logic beyond what the Functional Testing Framework offers is necessary so we have provided an alternative solution: the `}<inlineCode parentName=\"p\">{`<helper>`}</inlineCode>{` action.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`Custom helpers are implemented in PHP files that must be placed in this directory:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`<ModuleName>/Test/Mftf/Helper\n`}</code></pre>\n    <p>{`This custom helper selects text on the page with this approach:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Move to a very specific X,Y starting position.`}</li>\n      <li parentName=\"ol\">{`Click and hold the mouse button down.`}</li>\n      <li parentName=\"ol\">{`Move to another specific X,Y position.`}</li>\n      <li parentName=\"ol\">{`Release the mouse button.`}</li>\n    </ol>\n    <p>{`This functionality is used to select text on the page and cannot be accomplished using built-in test actions.`}</p>\n    <h3 {...{\n      \"id\": \"php-file\"\n    }}>{`PHP file`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright &copy; Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n\nnamespace Magento\\\\PageBuilder\\\\Test\\\\Mftf\\\\Helper;\n\nuse Magento\\\\FunctionalTestingFramework\\\\Helper\\\\Helper;\n\n/**\n * Class SelectText provides an ability to select needed text.\n */\nclass SelectText extends Helper\n{\n    /**\n     * Select needed text.\n     *\n     * @param string $context\n     * @param int $startX\n     * @param int $startY\n     * @param int $endX\n     * @param int $endY\n     * @return void\n     */\n    public function selectText(string $context, int $startX, int $startY, int $endX, int $endY)\n    {\n        try {\n            /** @var \\\\Magento\\\\FunctionalTestingFramework\\\\Module\\\\MagentoWebDriver $webDriver */\n            $webDriver = $this->getModule('\\\\Magento\\\\FunctionalTestingFramework\\\\Module\\\\MagentoWebDriver');\n\n            $contextElement = $webDriver->webDriver->findElement(\\\\Facebook\\\\WebDriver\\\\WebDriverBy::xpath($context));\n            $actions = new \\\\Facebook\\\\WebDriver\\\\Interactions\\\\WebDriverActions($webDriver->webDriver);\n            $actions->moveToElement($contextElement, $startX, $startY)\n                ->clickAndHold()\n                ->moveToElement($contextElement, $endX, $endY)\n                ->release()\n                ->perform();\n        } catch (\\\\Exception $e) {\n            $this->fail($e->getMessage());\n        }\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"notes-about-this-php-file\"\n    }}>{`Notes about this PHP file`}</h3>\n    <p>{`The following details are important about the above file:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`The `}<inlineCode parentName=\"li\">{`namespace`}</inlineCode>{` must match the file location: `}<inlineCode parentName=\"li\">{`namespace Magento\\\\PageBuilder\\\\Test\\\\Mftf\\\\Helper;`}</inlineCode></li>\n      <li parentName=\"ol\">{`The class must `}<inlineCode parentName=\"li\">{`extends Helper`}</inlineCode>{` and have the corresponding `}<inlineCode parentName=\"li\">{`use`}</inlineCode>{` statement to match.`}</li>\n      <li parentName=\"ol\">{`You may access the WebDriver object via `}<inlineCode parentName=\"li\">{`$this->getModule('\\\\Magento\\\\FunctionalTestingFramework\\\\Module\\\\MagentoWebDriver')`}</inlineCode>{`.`}</li>\n      <li parentName=\"ol\">{`You may implement multiple related methods within the same class.`}</li>\n      <li parentName=\"ol\">{`Specify the correct function argument types to match the type of values you want to pass in. In this case, we specified `}<inlineCode parentName=\"li\">{`string $context, int $startX, int $startY, int $endX, int $endY`}</inlineCode>{`. In the XML we will match these types.`}</li>\n    </ol>\n    <p>{`You should follow the same patterns in any custom helpers that you write yourself, but you may implement any logic or iteration that you need to solve for your use case.`}</p>\n    <h3 {...{\n      \"id\": \"referencing-in-a-test\"\n    }}>{`Referencing in a test`}</h3>\n    <p>{`Once you have implemented something like the above PHP file, reference it in a test:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<helper class=\"\\\\Magento\\\\PageBuilder\\\\Test\\\\Mftf\\\\Helper\\\\SelectText\" method=\"selectText\" stepKey=\"selectHeadingTextInTinyMCE\">\n    <argument name=\"context\">//div[contains(@class, 'inline-wysiwyg')]//h2</argument>\n    <argument name=\"startX\">{{TinyMCEPartialHeadingSelection.startX}}</argument>\n    <argument name=\"startY\">{{TinyMCEPartialHeadingSelection.startY}}</argument>\n    <argument name=\"endX\">{{TinyMCEPartialHeadingSelection.endX}}</argument>\n    <argument name=\"endY\">{{TinyMCEPartialHeadingSelection.endY}}</argument>\n</helper>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"notes-about-the-xml\"\n    }}>{`Notes about the XML`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`Specify an argument value for every argument that matches our PHP implementation. This allows us to pass other test data to the Custom Helper.`}</li>\n      <li parentName=\"ol\">{`The `}<inlineCode parentName=\"li\">{`class`}</inlineCode>{` attribute matches the namespace specified in the PHP file.`}</li>\n      <li parentName=\"ol\">{`Specify the method from the class via the `}<inlineCode parentName=\"li\">{`method`}</inlineCode>{` attribute.`}</li>\n      <li parentName=\"ol\">{`If the function has a return value, it will be assigned to the `}<inlineCode parentName=\"li\">{`stepKey`}</inlineCode>{` variable. In this case, `}<inlineCode parentName=\"li\">{`$selectHeadingTextInTinyMCE`}</inlineCode>{` holds the return value.`}</li>\n      <li parentName=\"ol\">{`The types of argument values must match the PHP implementation's expected types.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"key-takeaways\"\n    }}>{`Key takeaways`}</h2>\n    <p>{`Custom helpers allow you to solve complex use cases such as conditional logic, iteration, or complex WebDriver usage.`}</p>\n    <p>{`With access to the WebDriver object, you have a lot of flexibility available to you. See the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Codeception/module-webdriver/blob/master/src/Codeception/Module/WebDriver.php\"\n      }}>{`Codeception WebDriver`}</a>{` for technical details and functionality available for use.`}</p>\n    <p>{`A custom helper is written in a PHP file and then referenced in test XML, like other actions.`}</p>\n    <p>{`You should only use these as a last resort after trying to implement your test using built-in actions.`}</p>\n    <h2 {...{\n      \"id\": \"references\"\n    }}>{`References`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Codeception/module-webdriver/blob/master/src/Codeception/Module/WebDriver.php\"\n      }}>{`Codeception WebDriver source code`}</a>{` - Reference for using the WebDriver Object`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","variant","slots","parentName","isMDXComponent"],"sourceRoot":""}