"use strict";(self.webpackChunkcommerce_testing=self.webpackChunkcommerce_testing||[]).push([[4682],{60531:function(t,e,a){a.r(e),a.d(e,{_frontmatter:function(){return r},default:function(){return c}});var n=a(87462),s=a(63366),l=(a(15007),a(64983)),o=a(91515),i=["components"],r={},d={_frontmatter:r},m=o.Z;function c(t){var e=t.components,a=(0,s.Z)(t,i);return(0,l.mdx)(m,(0,n.Z)({},d,a,{components:e,mdxType:"MDXLayout"}),(0,l.mdx)("h1",{id:"database-isolation-attribute"},"Database isolation attribute"),(0,l.mdx)("p",null,"To isolate database changes between tests, the Integration testing framework (ITF) implements the ",(0,l.mdx)("inlineCode",{parentName:"p"},"DbIsolation")," attribute.\nWhen the ",(0,l.mdx)("inlineCode",{parentName:"p"},"DbIsolation")," attribute is enabled, the ITF:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},"Starts a database transaction before the test/test case."),(0,l.mdx)("li",{parentName:"ul"},"Avoids a database commit during the test/test case."),(0,l.mdx)("li",{parentName:"ul"},"Restores the database after the test/test case.")),(0,l.mdx)("h2",{id:"format"},"Format"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-php?start_inline=1"},"#[\n    DbIsolation(bool $state = true)\n]\n")),(0,l.mdx)("h3",{id:"parameters"},"Parameters"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("strong",{parentName:"li"},"state"),(0,l.mdx)("ul",{parentName:"li"},(0,l.mdx)("li",{parentName:"ul"},"Enables or disables database isolation.")))),(0,l.mdx)("h2",{id:"test-class-attribute"},"Test class attribute"),(0,l.mdx)("p",null,"Use test class declarations when a sequence of tests introduces changes to the database and relies on the changes made by each other.\nFor example, typical CRUD tests: ",(0,l.mdx)("em",{parentName:"p"},"create -> read -> update -> delete"),".\nEvery next test method relies on a database state after the previous one.\nIf at any point of that sequence (after creation) the test method fails, the database will be polluted with test data.\nTo apply a database rollback after the test class, create a separate test class with ",(0,l.mdx)("inlineCode",{parentName:"p"},"DbIsolation")," enabled at a class level."),(0,l.mdx)("p",null,"Example:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-php?start_inline=1"},"#[\n    DbIsolation(true)\n]\nclass Some\\EntityTest extends \\PHPUnit\\Framework\\TestCase\n{\n    public function testCreate()\n    {\n        $this->object->setData($this->initialData)->save();\n        $this->assertNotEmpty($this->object->getId());\n        return $this->object->getId();\n    }\n\n    public function testRead($objectId)\n    {\n        $this->object->load($objectId);\n        $this->assertEquals($this->initialData, $this->object->getData());\n        return $objectId;\n    }\n\n    public function testUpdate($objectId)\n    {\n        $this->object->setData($newData)->save();\n        $object = new Some_Entity();\n        $object->load($objectId);\n        $this->assertEquals($newData, $object->getData());\n        return $objectId;\n    }\n\n    public function testDelete($objectId)\n    {\n        $this->object->delete();\n        $object = new Some_Entity();\n        $object->load($objectId);\n        $this->assertEmpty($object->getData());\n    }\n}\n")),(0,l.mdx)("h2",{id:"test-method-attribute"},"Test method attribute"),(0,l.mdx)("p",null,"To isolate changes made to the database by a single test, enable the ",(0,l.mdx)("inlineCode",{parentName:"p"},"DbIsolation")," attribute for the test method."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-php?start_inline=1"},"#[\n    DbIsolation(true)\n]\npublic function testSave()\n{\n    $taxClassDataObject = $this->taxClassFactory->create();\n    $taxClassDataObject->setClassName(self::SAMPLE_TAX_CLASS_NAME)\n        ->setClassType(TaxClassManagementInterface::TYPE_CUSTOMER);\n    $taxClassId = $this->taxClassRepository->save($taxClassDataObject);\n    $this->assertEquals(self::SAMPLE_TAX_CLASS_NAME, $this->taxClassModel->load($taxClassId)->getClassName());\n}\n")))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-guide-integration-attributes-db-isolation-md-e5db6a5fef04706a12a8.js.map