{"version":3,"file":"component---src-pages-functional-testing-framework-section-parameterized-selectors-md-dc52c9abe8a41ec5ea55.js","mappings":"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","sources":["webpack://commerce-testing/./src/pages/functional-testing-framework/section/parameterized-selectors.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-testing/commerce-testing/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"parameterized-selectors\"\n    }}>{`Parameterized selectors`}</h1>\n    <p>{`Use the following examples to create and use parameterized selectors in the MFTF.`}</p>\n    <h2 {...{\n      \"id\": \"set-up-a-selector-in-section\"\n    }}>{`Set up a selector in section`}</h2>\n    <p>{`Create a new `}<inlineCode parentName=\"p\">{`<element/>`}</inlineCode>{` in a `}<inlineCode parentName=\"p\">{`<section></section>`}</inlineCode>{`, :`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<section name=\"SampleSection\">\n    <element name=\"\" type=\"\" selector=\"\"/>\n</section>\n`}</code></pre>\n    <p>{`Add the attribute `}<inlineCode parentName=\"p\">{`parameterized=\"true\"`}</inlineCode>{` to the `}<inlineCode parentName=\"p\">{`<element/>`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<section name=\"SampleSection\">\n    <element name=\"\" type=\"\" selector=\"\" parameterized=\"true\"/>\n</section>\n`}</code></pre>\n    <p>{`Add your selector in the `}<inlineCode parentName=\"p\">{`selector=\"\"`}</inlineCode>{` attribute:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<section name=\"SampleSection\">\n    <element name=\"\" type=\"\" selector=\"#element\" parameterized=\"true\"/>\n</section>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"selector-with-single-variable\"\n    }}>{`Selector with single variable`}</h3>\n    <p>{`For the parameterized part of the selector, add `}<inlineCode parentName=\"p\">{`{{var1}}`}</inlineCode>{` to represent the first piece of data that you want to replace:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<section name=\"SampleSection\">\n    <element name=\"\" type=\"\" selector=\"#element .{{var1}}\" parameterized=\"true\"/>\n</section>\n`}</code></pre>\n    <p>{`Add a descriptive name in the `}<inlineCode parentName=\"p\">{`name=\"\"`}</inlineCode>{` attribute:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<section name=\"SampleSection\">\n    <element name=\"oneParamElement\" type=\"\" selector=\"#element .{{var1}}\" parameterized=\"true\"/>\n</section>\n`}</code></pre>\n    <p>{`Add the type of UI element that the `}<inlineCode parentName=\"p\">{`<element/>`}</inlineCode>{` represents in `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<section name=\"SampleSection\">\n    <element name=\"oneParamElement\" type=\"text\" selector=\"#element .{{var1}}\" parameterized=\"true\"/>\n</section>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"selector-with-multiple-variables\"\n    }}>{`Selector with multiple variables`}</h3>\n    <p>{`For the parameterized part of the selector, add `}<inlineCode parentName=\"p\">{`{{var1}}, {{var2}}, ..., {{varN}}`}</inlineCode>{` for each parameter that you need to pass in:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<section name=\"SampleSection\">\n    <element name=\"threeParamElement\" type=\"text\" selector=\"#element .{{var1}} .{{var2}}\" parameterized=\"true\"/>\n</section>\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<section name=\"SampleSection\">\n    <element name=\"threeParamElement\" type=\"text\" selector=\"#element .{{var1}} .{{var2}}-{{var3}}\" parameterized=\"true\"/>\n</section>\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`There is no need to use sequential variables like `}<inlineCode parentName=\"p\">{`{{var1}}`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`{{var2}}`}</inlineCode>{`. Parameterized replacement reads variables and maps them to the test call of the element sequentially from left to right, meaning you can use a selector like `}<inlineCode parentName=\"p\">{`#element .{{categoryId}} .{{productId}}`}</inlineCode>{`.\"`}</p>\n    <h2 {...{\n      \"id\": \"use-a-parameterized-selector-in-a-test\"\n    }}>{`Use a parameterized selector in a test`}</h2>\n    <p>{`Create a new `}<a parentName=\"p\" {...{\n        \"href\": \"../test/index.md\"\n      }}>{`test`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<test name=\"SampleTest\">\n\n</test>\n`}</code></pre>\n    <p>{`Add an action:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<test name=\"SampleTest\">\n    <click selector=\"\" stepKey=\"click1\"/>\n</test>\n`}</code></pre>\n    <p>{`Enter `}<inlineCode parentName=\"p\">{`\"{{}}\"`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`selector=\"\"`}</inlineCode>{` attribute:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<test name=\"SampleTest\">\n    <click selector=\"{{}}\" stepKey=\"click1\"/>\n</test>\n`}</code></pre>\n    <p>{`Make a reference to the section that the element is assigned to inside the `}<inlineCode parentName=\"p\">{`{{}}`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<test name=\"SampleTest\">\n    <click selector=\"{{SampleSection}}\" stepKey=\"click1\"/>\n</test>\n`}</code></pre>\n    <p>{`Add name of a parameterized element, separated by `}<inlineCode parentName=\"p\">{`\".\"`}</inlineCode>{`, inside the `}<inlineCode parentName=\"p\">{`{{}}`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<test name=\"SampleTest\">\n    <click selector=\"{{SampleSection.threeParamElement}}\" stepKey=\"click1\"/>\n</test>\n`}</code></pre>\n    <p>{`Add a set of `}<inlineCode parentName=\"p\">{`\"()\"`}</inlineCode>{` following the parameterized element inside the `}<inlineCode parentName=\"p\">{`{{}}`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<test name=\"SampleTest\">\n    <click selector=\"{{SampleSection.threeParamElement()}}\" stepKey=\"click1\"/>\n</test>\n`}</code></pre>\n    <p>{`Add the first parameter, that you would like to pass to the selector, inside of the `}<inlineCode parentName=\"p\">{`()`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<test name=\"SampleTest\">\n    <click selector=\"{{SampleSection.threeParamElement(_defaultCategory.is_active)}}\" stepKey=\"click1\"/>\n</test>\n`}</code></pre>\n    <p>{`Add the second or third parameters, that you'd like to pass to the selector, separated by `}<inlineCode parentName=\"p\">{`,`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<test name=\"SampleTest\">\n    <click selector=\"{{SampleSection.threeParamElement(_defaultCategory.is_active,'StringLiteral',$createDataKey.id$)}}\" stepKey=\"click1\"/>\n</test>\n`}</code></pre>\n    <p>{`Any data can be used in parameterized elements, as well as entered in test actions:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`_defaultCategory.is_active`}</inlineCode>{` is a reference to `}<inlineCode parentName=\"li\">{`<data key=\"is_active\">`}</inlineCode>{` in `}<inlineCode parentName=\"li\">{`<entity name=\"_defaultCategory\" ... ></entity>`}</inlineCode>{` in the corresponding `}<inlineCode parentName=\"li\">{`.../Data/*.xml`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`'StringLiteral'`}</inlineCode>{` is a literal.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`$createDataKey.id$`}</inlineCode>{` is a reference to persisted data created in the `}<inlineCode parentName=\"li\">{`SampleTest1`}</inlineCode>{` within the `}<inlineCode parentName=\"li\">{`stepKey=\"createDataKey\"`}</inlineCode>{` action.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`{$variable}`}</inlineCode>{` is a reference to data returned by a test action, like `}<inlineCode parentName=\"li\">{`<grabValueFrom>`}</inlineCode>{`.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}