{"version":3,"file":"component---src-pages-functional-testing-framework-test-writing-test-modularity-md-10f245ac5ae628136a2e.js","mappings":"sRAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,mBADR,oBAGA,oGACA,eACE,GAAM,2BADR,4BAGA,iGACA,oBACE,eAAIC,WAAW,MAAf,YACA,eAAIA,WAAW,MAAf,eAEF,eACE,GAAM,yBADR,0BAGA,0EAA2D,cAAGA,WAAW,IACrE,KAAQ,iBAD+C,WAA3D,uDAGA,eACE,GAAM,0BADR,2BAGA,4NACA,yPACA,uDACA,oBACE,eAAIA,WAAW,MAAf,qDACA,eAAIA,WAAW,MAAf,sCACA,eAAIA,WAAW,MAAf,sKAEF,yHACA,eACE,GAAM,oCADR,sCAGA,wQACA,iQACA,eACE,GAAM,qCADR,uCAGA,gIACA,eACE,GAAM,qCADR,sCAGA,yGAA0F,uBAAYA,WAAW,KAAvB,eAA1F,yBACA,eACE,GAAM,uBADR,wBAGA,mLACA,oCAAqB,uBAAYA,WAAW,KAAvB,YAArB,SAAkF,uBAAYA,WAAW,KAAvB,aAAlF,4BAAmK,uBAAYA,WAAW,KAAvB,OAAnK,aACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,4EAIL,oJACA,eACE,GAAM,aADR,cAGA,yKACA,+BAAgB,uBAAYA,WAAW,KAAvB,iBAAhB,2CAAoH,uBAAYA,WAAW,KAAvB,qBAApH,mJAAoU,uBAAYA,WAAW,KAAvB,SAApU,YACA,yDAA0C,uBAAYA,WAAW,KAAvB,kBAA1C,QAA4G,uBAAYA,WAAW,KAAvB,OAA5G,0CACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,qBADZ,yUAOL,0HACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,qHAIL,sDAAuC,uBAAYA,WAAW,KAAvB,iBAAvC,uBAAuH,uBAAYA,WAAW,KAAvB,WAAvH,sDACA,mIACA,eACE,GAAM,6BADR,+BAGA,oLAAqK,uBAAYA,WAAW,KAAvB,qBAArK,gEACA,0BAAW,uBAAYA,WAAW,KAAvB,iBAAX,iHACA,0BAAW,cAAGA,WAAW,IACrB,KAAQ,uBADD,iBAAX,0BAQH,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-testing/./src/pages/functional-testing-framework/test-writing/test-modularity.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-testing/commerce-testing/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"test-modularity\"\n    }}>{`Test Modularity`}</h1>\n    <p>{`One of the framework's most distinguishing functionalities is its modularity.`}</p>\n    <h2 {...{\n      \"id\": \"what-is-test-modularity\"\n    }}>{`What is test modularity`}</h2>\n    <p>{`Within the framework, test modularity can refer to two different concepts:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Merging`}</li>\n      <li parentName=\"ul\">{`Materials`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"test-material-merging\"\n    }}>{`Test material merging`}</h3>\n    <p>{`Test material merging is covered extensively in the `}<a parentName=\"p\" {...{\n        \"href\": \"../merging.md\"\n      }}>{`merging`}</a>{` topic, so it will not be our focus in this guide.`}</p>\n    <h3 {...{\n      \"id\": \"modular-test-materials\"\n    }}>{`Modular test materials`}</h3>\n    <p>{`This refers to test materials being correctly owned by the right Adobe Commerce or Magento Open Source module, and for tests to have references to only what their parent module has a dependency on.`}</p>\n    <p>{`Since the framework queries the Adobe Commerce or Magento Open Source instance for enabled modules, test materials are included or excluded from the merging process dynamically, making proper ownership and dependencies a must.`}</p>\n    <p>{`Consider the following scenario:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`TestA in ModuleA is using materials form ModuleB`}</li>\n      <li parentName=\"ul\">{`In Magento, I now disable ModuleB`}</li>\n      <li parentName=\"ul\">{`TestA will try to use ModuleB materials, which are no longer being read by the framework since the Adobe Commerce or Magento Open Source instance has it disable`}</li>\n    </ul>\n    <p>{`Since TestA's dependencies are out of sync with ModuleA, the tests are no longer properly modular.`}</p>\n    <h2 {...{\n      \"id\": \"why-is-test-modularity-important\"\n    }}>{`Why is test modularity important?`}</h2>\n    <p>{`This concept is important simply because without proper modularity, tests or test materials may be incorrectly merged in (or left out), leading to the the test itself being out of sync with the Adobe Commerce or Magento Open Source instance.`}</p>\n    <p>{`For example, in a situation where an extension drastically alters the login process (for instance: two factor authentication), the only way the tests will be able to pass is if the test materials are correctly nested in the extension.`}</p>\n    <h2 {...{\n      \"id\": \"how-can-i-achieve-test-modularity\"\n    }}>{`How can I achieve test modularity?`}</h2>\n    <p>{`Test modularity can be challenging, depending on the breadth of the changes being introduced in a module.`}</p>\n    <h3 {...{\n      \"id\": \"determine-test-material-ownership\"\n    }}>{`Determine test material ownership`}</h3>\n    <p>{`This is should be the first step when creating new test materials. We will use the `}<inlineCode parentName=\"p\">{`New Product`}</inlineCode>{` page as an example.`}</p>\n    <h4 {...{\n      \"id\": \"intuitive-reasoning\"\n    }}>{`Intuitive reasoning`}</h4>\n    <p>{`The easiest way to do this has limited application, but some times it is fairly obvious where test material comes from due to nomenclature or functionality.`}</p>\n    <p>{`The following `}<inlineCode parentName=\"p\">{`<select>`}</inlineCode>{` for `}<inlineCode parentName=\"p\">{`Tax Class`}</inlineCode>{` clearly belongs to the `}<inlineCode parentName=\"p\">{`Tax`}</inlineCode>{` module:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<select class=\"admin__control-select\" name=\"product[tax_class_id]\"/>\n`}</code></pre>\n    <p>{`This approach will work on getting the quickest ownership, but it is fairly obvious that it may be necessary to double check.`}</p>\n    <h4 {...{\n      \"id\": \"deduction\"\n    }}>{`Deduction`}</h4>\n    <p>{`This is the next step up in difficulty from the above method, as it involves searching through the Adobe Commerce or Magento Open Source codebase.`}</p>\n    <p>{`Take the `}<inlineCode parentName=\"p\">{`Add Attribute`}</inlineCode>{` button for example. The button has an `}<inlineCode parentName=\"p\">{`id=\"addAttribute\"`}</inlineCode>{` and since we know Adobe Commerce and Magento Open Source uses XML to declare much of its layout/CSS properties we can start by searching only `}<inlineCode parentName=\"p\">{`*.xml`}</inlineCode>{` files.`}</p>\n    <p>{`Searching through the codebase for `}<inlineCode parentName=\"p\">{`\"addAttribute\"`}</inlineCode>{` in `}<inlineCode parentName=\"p\">{`xml`}</inlineCode>{` files leads to four different files:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-terminal\"\n      }}>{`app/code/Magento/Customer/Test/Mftf/Section/AdminCustomerActivitiesConfigureSection.xml\napp/code/Magento/GiftRegistry/Test/Mftf/Section/AdminGiftRegistrySection.xml\napp/code/Magento/Catalog/Test/Mftf/ActionGroup/AdminProductAttributeActionGroup.xml\napp/code/Magento/Catalog/view/adminhtml/ui_component/product_form.xml\n`}</code></pre>\n    <p>{`The first three are clearly test materials, which leaves us with the final file, and the line below`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<button name=\"addAttribute\" class=\"Magento\\\\Catalog\\\\Block\\\\Adminhtml\\\\Product\\\\Edit\\\\Button\\\\AddAttribute\"/>\n`}</code></pre>\n    <p>{`This means we can safely assume `}<inlineCode parentName=\"p\">{`Add Attribute`}</inlineCode>{` button belongs to `}<inlineCode parentName=\"p\">{`Catalog`}</inlineCode>{` based on the above class namespace and filepath.`}</p>\n    <p>{`This kind of deduction is more involved, but it much more likely to give you the true source of the element.`}</p>\n    <h3 {...{\n      \"id\": \"use-binmftf-static-checks\"\n    }}>{`Use bin/mftf static-checks`}</h3>\n    <p>{`For tests to be fully modular, it must have the same dependencies as its parent module. This is quite difficult to do by hand, and requires checking of every `}<inlineCode parentName=\"p\">{`{{test.material}}`}</inlineCode>{` call and any other references to test materials in a test.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`static-checks`}</inlineCode>{` command includes a test material ownership check that should help suss out these kind of dependency issues.`}</p>\n    <p>{`See `}<a parentName=\"p\" {...{\n        \"href\": \"../commands/mftf.md\"\n      }}>{`mftf commands`}</a>{` for more information.`}</p>\n    {\n      /* Link definitions */\n    }\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}