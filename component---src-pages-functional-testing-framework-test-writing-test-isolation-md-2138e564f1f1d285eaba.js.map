{"version":3,"file":"component---src-pages-functional-testing-framework-test-writing-test-isolation-md-2138e564f1f1d285eaba.js","mappings":"0RAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,gBAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAHgC,WACjCC,GAEC,EADEC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,kBACH,mBACL,kBAAK,8JACL,eACE,GAAM,0BACH,4BACL,kBAAK,wJACL,kBAAK,6CACL,oBACE,eAAIC,WAAW,MAAO,mCACtB,eAAIA,WAAW,MAAO,wHACtB,eAAIA,WAAW,MAAO,mDACtB,eAAIA,WAAW,MAAO,gFAExB,eACE,GAAM,6BACH,8BACL,kBAAK,2NACL,kBAAK,qDACL,oBACE,eAAIA,WAAW,MAAO,aACtB,eAAIA,WAAW,MAAO,eACtB,eAAIA,WAAW,MAAO,qCAExB,kBAAK,qDACL,oBACE,eAAIA,WAAW,MAAO,+BAExB,kBAAK,uOACL,eACE,GAAM,8BACH,gCACL,kBAAK,iQACL,eACE,GAAM,oCACH,sCACL,kBAAK,kMACL,eACE,GAAM,oBACH,qBACL,kBAAK,sCAAoC,uBAAYA,WAAW,KAAM,gBAA6B,uBAAqB,uBAAYA,WAAW,KAAM,gBAA6B,YAAU,eAAIA,WAAW,KAAM,QAAa,yBAAuB,uBAAYA,WAAW,KAAM,WAAwB,YAC1S,kBAAK,uBAAqB,uBAAYA,WAAW,KAAM,gBAA6B,2BAAyB,uBAAYA,WAAW,KAAM,YAAyB,kCACnK,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,ibAaP,kBAAK,0HACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,uiBAeP,kBAAK,yMAAuM,uBAAYA,WAAW,KAAM,WAAwB,YACjQ,eACE,GAAM,6BACH,8BACL,kBAAK,iEAA+D,uBAAYA,WAAW,KAAM,gBAA6B,cAC9H,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,6YAYP,kBAAK,+CAA6C,uBAAYA,WAAW,KAAM,gBAA6B,2EAAyE,uBAAYA,WAAW,KAAM,gBAA6B,eAC/O,kBAAK,kKACL,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBACV,khCAaP,kBAAK,sKAAoK,uBAAYA,WAAW,KAAM,gBAA6B,YAGtO,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-testing/./src/pages/functional-testing-framework/test-writing/test-isolation.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-testing/commerce-testing/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"test-isolation\"\n    }}>{`Test Isolation`}</h1>\n    <p>{`Because the Functional Testing Framework is a framework for testing a highly customizable and ever changing application, tests must be properly isolated.`}</p>\n    <h2 {...{\n      \"id\": \"what-is-test-isolation\"\n    }}>{`What is test isolation?`}</h2>\n    <p>{`Test isolation refers to a test that does not leave behind any data or configuration changes in the Adobe Commerce or Magento Open Source instance.`}</p>\n    <p>{`An test is considered fully isolated if:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`It does not leave data behind.`}</li>\n      <li parentName=\"ol\">{`It does not leave Adobe Commerce or Magento Open Source configured in a different state than when the test started.`}</li>\n      <li parentName=\"ol\">{`It does not affect a following test's outcome.`}</li>\n      <li parentName=\"ol\">{`It does not rely on an irregular configuration to start its preconditions.`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"deleting-versus-restoring\"\n    }}>{`Deleting versus restoring`}</h3>\n    <p>{`In the above list, points 1 and 2 refer to leaving things behind during test execution. This means you are either deleting or restoring entities in Adobe Commerce or Magento Open Source after your test's execution.`}</p>\n    <p>{`Some examples of entities to be deleted include:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Products`}</li>\n      <li parentName=\"ol\">{`Categories`}</li>\n      <li parentName=\"ol\">{`Rules (Price, Related Products)`}</li>\n    </ol>\n    <p>{`The list of entities to restore is much simpler:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Application Configuration`}</li>\n    </ol>\n    <p>{`The distinction above is because test expect the environment to be in a completely clean state, outside of a test or suite's preconditions. Data must be cleaned up and any application configuration must go back to the default.`}</p>\n    <h2 {...{\n      \"id\": \"why-is-isolation-important\"\n    }}>{`Why is isolation important?`}</h2>\n    <p>{`As mentioned above, isolation is important because poor isolation can lead to other test failures. For a test to be useful, you must have high confidence in the test's outcome, and by introducing test isolation issues it can invalidate a test's result.`}</p>\n    <h2 {...{\n      \"id\": \"how-can-i-achieve-test-isolation\"\n    }}>{`How can I achieve test isolation?`}</h2>\n    <p>{`This is difficult to do given how large the Adobe Commerce and Magento Open Source applications are, but a systematic approach can ensure a high level of confidence in you test's isolation.`}</p>\n    <h3 {...{\n      \"id\": \"cleaning-up-data\"\n    }}>{`Cleaning up data`}</h3>\n    <p>{`If your test creates any data via `}<inlineCode parentName=\"p\">{`<createData>`}</inlineCode>{` then a subsequent `}<inlineCode parentName=\"p\">{`<deleteData>`}</inlineCode>{` action `}<em parentName=\"p\">{`must`}</em>{` exist in the test's `}<inlineCode parentName=\"p\">{`<after>`}</inlineCode>{` block.`}</p>\n    <p>{`This includes both `}<inlineCode parentName=\"p\">{`<createData>`}</inlineCode>{` actions in the test's `}<inlineCode parentName=\"p\">{`<before>`}</inlineCode>{` as well as in the test body.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<test name=\"SampleTest\">\n    <before>\n        <createData entity=\"SimpleSubCategory\" stepKey=\"category\"/>\n    </before>\n    <after>\n        <deleteData createDataKey=\"category\" stepKey=\"deleteCategory\"/>\n        <deleteData createDataKey=\"entityCreatedDuringWorkflow\" stepKey=\"deleteCategory\"/>\n    </after>\n    ...\n    <createData entity=\"SimpleSubCategory\" stepKey=\"entityCreatedDuringWorkflow\"/>\n    ...\n</test>\n`}</code></pre>\n    <p>{`Other test data can be more difficult to detect, and requires an understanding of what the test does in its workflow.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<test name=\"AdminAddImageForCategoryTest\">\n    <before>\n        <actionGroup ref=\"LoginAsAdmin\" stepKey=\"loginAsAdmin\"/>\n    </before>\n    <after>\n        <actionGroup ref=\"DeleteCategory\" stepKey=\"DeleteCategory\">\n            <argument name=\"categoryEntity\" value=\"SimpleSubCategory\"/>\n        </actionGroup>\n        <actionGroup ref=\"logout\" stepKey=\"logout\"/>\n    </after>\n    <!-- Go to create a new category with image -->\n    <actionGroup ref=\"goToCreateCategoryPage\" stepKey=\"goToCreateCategoryPage\"/>\n    ...\n</test>\n`}</code></pre>\n    <p>{`Note that the test contains a context setting comment describing the workflow; this is very helpful in determining that a new category will be created, which will need to be cleaned up in the test `}<inlineCode parentName=\"p\">{`<after>`}</inlineCode>{` block.`}</p>\n    <h3 {...{\n      \"id\": \"cleaning-up-configuration\"\n    }}>{`Cleaning up configuration`}</h3>\n    <p>{`Similarly, configuration changes can be easily identified by `}<inlineCode parentName=\"p\">{`<magentoCLI>`}</inlineCode>{` actions.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<test name=\"AddOutOfStockProductToCompareListTest\">\n    <before>\n        <magentoCLI command=\"config:set cataloginventory/options/show_out_of_stock 0\" stepKey=\"displayOutOfStockNo\"/>\n        ...\n    </before>\n    <after>\n        <magentoCLI command=\"config:set cataloginventory/options/show_out_of_stock 1\" stepKey=\"displayOutOfStockNo\"/>\n        ...\n    </after>\n    ...\n</test>\n`}</code></pre>\n    <p>{`Configuration changes can also be done via `}<inlineCode parentName=\"p\">{`<createData>`}</inlineCode>{` actions, but that is not recommended as it is much easier to identify `}<inlineCode parentName=\"p\">{`<magentoCLI>`}</inlineCode>{` commands.`}</p>\n    <p>{`A test's workflow can also alter the application's configuration, and much like data cleanup, this can only be identified by understanding a test's workflow:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<test name=\"AdminMoveProductBetweenCategoriesTest\">\n    ...\n    <!-- Enable \\`Use Categories Path for Product URLs\\` on Stores -> Configuration -> Catalog -> Catalog -> Search Engine Optimization -->\n    <amOnPage url=\"{{AdminCatalogSearchConfigurationPage.url}}\" stepKey=\"onConfigPage\"/>\n    <waitForPageLoad stepKey=\"waitForLoading\"/>\n    <conditionalClick selector=\"{{AdminCatalogSearchEngineConfigurationSection.searchEngineOptimization}}\" dependentSelector=\"{{AdminCatalogSearchEngineConfigurationSection.openedEngineOptimization}}\" visible=\"false\" stepKey=\"clickEngineOptimization\"/>\n    <uncheckOption selector=\"{{AdminCatalogSearchEngineConfigurationSection.systemValueUseCategoriesPath}}\" stepKey=\"uncheckDefault\"/>\n    <selectOption userInput=\"Yes\" selector=\"{{AdminCatalogSearchEngineConfigurationSection.selectUseCategoriesPatForProductUrls}}\" stepKey=\"selectYes\"/>\n    <click selector=\"{{AdminConfigSection.saveButton}}\" stepKey=\"saveConfig\"/>\n    <waitForPageLoad stepKey=\"waitForSaving\"/>\n    ...\n</test>\n`}</code></pre>\n    <p>{`One thing to note, unless a test is specifically testing the configuration page's frontend capabilities, configuring the application should always be done with a `}<inlineCode parentName=\"p\">{`<magentoCLI>`}</inlineCode>{` action.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}