"use strict";(self.webpackChunkcommerce_testing=self.webpackChunkcommerce_testing||[]).push([[5882],{70525:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return l},default:function(){return m}});var a=n(87462),o=n(45987),r=(n(35776),n(3905)),s=n(91515);const i=["components"],l={},c={_frontmatter:l},d=s.Z;function m(e){let{components:t}=e,n=(0,o.Z)(e,i);return(0,r.mdx)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"tips-and-tricks"},"Tips and Tricks"),(0,r.mdx)("p",null,"Sometimes, little changes can make a big difference in your project. Here are some test writing tips to keep everything running smoothly."),(0,r.mdx)("h2",{id:"actions-and-action-groups"},"Actions and action groups"),(0,r.mdx)("h3",{id:"use-parameterized-selectors-in-action-groups-with-argument-references"},"Use parameterized selectors in action groups with argument references"),(0,r.mdx)("p",null,"Clarity and readability are important factors in good test writing.\nHaving to parse through unreadable code can be time consuming. Save time by writing clearly.\nThe good example clearly shows what the selector arguments refer to.\nIn the bad example we see two parameters being passed into the selector with little clue as to their purpose."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Why?")," The next person maintaining the test or extending it may not be able to understand what the parameters are referencing."),(0,r.mdx)("span",{style:{color:"green"}},"Good"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<test>\n    <actionGroup ref="VerifyOptionInProductStorefront" stepKey="verifyConfigurableOption" after="AssertProductInStorefrontProductPage">\n        <argument name="attributeCode" value="$createConfigProductAttribute.default_frontend_label$"/>\n        <argument name="optionName" value="$createConfigProductAttributeOption1.option[store_labels][1][label]$"/>\n    </actionGroup>\n</test>\n\n<actionGroup name="VerifyOptionInProductStorefront">\n    <arguments>\n        <argument name="attributeCode" type="string"/>\n        <argument name="optionName" type="string"/>\n    </arguments>\n    <seeElement selector="{{StorefrontProductInfoMainSection.attributeOptionByAttributeID(attributeCode, optionName)}}" stepKey="verifyOptionExists"/>\n</actionGroup>\n')),(0,r.mdx)("span",{style:{color:"red"}},"Bad"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<test>\n    <seeElement selector="{{StorefrontProductInfoMainSection.attributeOptionByAttributeID($createConfigProductAttribute.default_frontend_label$, $createConfigProductAttributeOption1.option[store_labels][1][label]$)}}" stepKey="verifyOptionExists"/>\n</test>\n')),(0,r.mdx)("h3",{id:"perform-the-most-critical-actions-first-in-the-after-block"},"Perform the most critical actions first in the ",(0,r.mdx)("inlineCode",{parentName:"h3"},"<after>")," block"),(0,r.mdx)("p",null,"Perform non-browser driving actions first. These are more likely to succeed as no UI is involved.\nIn the good example, ",(0,r.mdx)("inlineCode",{parentName:"p"},"magentoCLI")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"deleteData")," are run first to ensure a proper state.\nIn the bad example, we perform some heavy UI steps first."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Why?")," If something goes wrong there, then the critical ",(0,r.mdx)("inlineCode",{parentName:"p"},"magentoCLI")," commands may not get a chance to run, leaving Adobe Commerce or Magento Open Source configured incorrectly for any upcoming tests."),(0,r.mdx)("span",{style:{color:"green"}},"Good:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<after>\n    <magentoCLI command="indexer:set-mode" arguments="schedule" stepKey="setIndexerMode"/>\n    <magentoCLI command="config:set catalog/frontend/flat_catalog_category 0" stepKey="setFlatCatalogCategory"/>\n    <deleteData createDataKey="category" stepKey="deleteCategory"/>\n    <deleteData createDataKey="createSimpleProduct" stepKey="deleteSimpleProduct"/>\n    <actionGroup ref="AdminDeleteStoreViewActionGroup" stepKey="deleteStoreViewEn">\n        <argument name="customStore" value="customStoreEN"/>\n    </actionGroup>\n    <actionGroup ref="AdminDeleteStoreViewActionGroup" stepKey="deleteStoreViewFr">\n        <argument name="customStore" value="customStoreFR"/>\n    </actionGroup>\n    <actionGroup ref="logout" stepKey="logout"/>\n</after>\n')),(0,r.mdx)("span",{style:{color:"red"}},"Bad:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<after>\n    <actionGroup ref="AdminDeleteStoreViewActionGroup" stepKey="deleteStoreViewEn">\n        <argument name="customStore" value="customStoreEN"/>\n    </actionGroup>\n    <actionGroup ref="AdminDeleteStoreViewActionGroup" stepKey="deleteStoreViewFr">\n        <argument name="customStore" value="customStoreFR"/>\n    </actionGroup>\n    <deleteData createDataKey="category" stepKey="deleteCategory"/>\n    <deleteData createDataKey="createSimpleProduct" stepKey="deleteSimpleProduct"/>\n    <magentoCLI command="config:set catalog/frontend/flat_catalog_category 0" stepKey="setFlatCatalogCategory"/>\n    <magentoCLI command="indexer:set-mode" arguments="schedule" stepKey="setIndexerMode"/>\n    <actionGroup ref="logout" stepKey="logout"/>\n</after>\n')),(0,r.mdx)("h3",{id:"when-to-use-see-vs-seeelement"},"When to use see vs. seeElement"),(0,r.mdx)("p",null,"Use ",(0,r.mdx)("inlineCode",{parentName:"p"},"see")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"seeElement")," wisely.\nIf you need to see some element and verify that the text inside is shown correctly, use the ",(0,r.mdx)("inlineCode",{parentName:"p"},"see")," action.\nIf you need to verify that element present on page, use ",(0,r.mdx)("inlineCode",{parentName:"p"},"seeElement"),".\nBut never use ",(0,r.mdx)("inlineCode",{parentName:"p"},"seeElement")," and build a xPath which contains the expected text."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Why?")," For ",(0,r.mdx)("inlineCode",{parentName:"p"},"see")," it will output something similar to this:\n",(0,r.mdx)("inlineCode",{parentName:"p"},'Failed asserting that any element by #some_selector contains text "some_text"'),"\nAnd for ",(0,r.mdx)("inlineCode",{parentName:"p"},"seeElement")," it will output something like this:\n",(0,r.mdx)("inlineCode",{parentName:"p"},"Element by #some_selector is not visible."),"\nThere is a subtle distinction: The first is a failure but it is the desired result: a 'positive failure'.\nThe second is a proper result of the action."),(0,r.mdx)("span",{style:{color:"green"}},"Good:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<see selector="//div[@data-element=\'content\']//p" userInput="SOME EXPECTED TEXT" stepKey="seeSlide1ContentStorefront"/>\n')),(0,r.mdx)("span",{style:{color:"red"}},"Bad:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},"<seeElement selector=\"//div[@data-element='content']//p[.='SOME EXPECTED TEXT']\" stepKey=\"seeSlide1ContentStorefront\"/>\n")),(0,r.mdx)("h3",{id:"always-specify-a-default-value-for-action-group-arguments"},"Always specify a default value for action group arguments"),(0,r.mdx)("p",null,"Whenever possible, specify a ",(0,r.mdx)("inlineCode",{parentName:"p"},"defaultValue")," for action group arguments."),(0,r.mdx)("span",{style:{color:"green"}},"GOOD:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<actionGroup name="StorefrontAssertProductImagesOnProductPageActionGroup">\n    <arguments>\n        <argument name="productImage" type="string" defaultValue="Magento_Catalog/images/product/placeholder/image.jpg" />\n    </arguments>\n    <waitForElementNotVisible selector="{{StorefrontProductMediaSection.gallerySpinner}}" stepKey="waitGallerySpinnerDisappear" />\n    <seeElement selector="{{StorefrontProductMediaSection.gallery}}" stepKey="seeProductGallery" />\n    <seeElement selector="{{StorefrontProductMediaSection.productImage(productImage)}}" stepKey="seeProductImage" />\n    <click selector="{{StorefrontProductMediaSection.productImage(productImage)}}" stepKey="openFullscreenImage" />\n    <waitForPageLoad stepKey="waitForGalleryLoaded" />\n    <seeElement selector="{{StorefrontProductMediaSection.productImageFullscreen(productImage)}}" stepKey="seeFullscreenProductImage" />\n    <click selector="{{StorefrontProductMediaSection.closeFullscreenImage}}" stepKey="closeFullScreenImage" />\n    <waitForPageLoad stepKey="waitForGalleryDisappear" />\n</actionGroup>\n')),(0,r.mdx)("span",{style:{color:"red"}},"BAD:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<actionGroup name="StorefrontAssertProductImagesOnProductPageActionGroup">\n    <arguments>\n        <argument name="productImage" type="string" />\n    </arguments>\n    <waitForElementNotVisible selector="{{StorefrontProductMediaSection.gallerySpinner}}" stepKey="waitGallerySpinnerDisappear" />\n    <seeElement selector="{{StorefrontProductMediaSection.gallery}}" stepKey="seeProductGallery" />\n    <seeElement selector="{{StorefrontProductMediaSection.productImage(productImage)}}" stepKey="seeProductImage" />\n    <click selector="{{StorefrontProductMediaSection.productImage(productImage)}}" stepKey="openFullscreenImage" />\n    <waitForPageLoad stepKey="waitForGalleryLoaded" />\n    <seeElement selector="{{StorefrontProductMediaSection.productImageFullscreen(productImage)}}" stepKey="seeFullscreenProductImage" />\n    <click selector="{{StorefrontProductMediaSection.closeFullscreenImage}}" stepKey="closeFullScreenImage" />\n    <waitForPageLoad stepKey="waitForGalleryDisappear" />\n</actionGroup>\n')),(0,r.mdx)("h3",{id:"build-tests-from-action-groups"},"Build tests from action groups"),(0,r.mdx)("p",null,"Build your tests using action groups, even if an action group contains a single action."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Why?")," For extension developers, this will make it easier to extend or customize tests.\nExtending a single action group will update all tests that use this group.\nThis improves maintainability as multiple instances of a failure can be fixed with a single action group update."),(0,r.mdx)("span",{style:{color:"green"}},"GOOD:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<test name="NavigateClamberWatchEntityTest">\n    <annotations>\n        \x3c!--some annotations--\x3e\n    </annotations>\n\n    <actionGroup ref="StorefrontOpenProductPageActionGroup" stepKey="openProductPage">\n        <argument name="productUrl" value="{{ClamberWatch.url_key}}" />\n    </actionGroup>\n    <actionGroup ref="StorefrontAssertProductNameOnProductPageActionGroup" stepKey="assertProductName">\n        <argument name="productName" value="{{ClamberWatch.name}}" />\n    </actionGroup>\n    <actionGroup ref="StorefrontAssertProductSkuOnProductPageActionGroup" stepKey="assertProductSku">\n        <argument name="productSku" value="{{ClamberWatch.sku}}" />\n    </actionGroup>\n    <actionGroup ref="StorefrontAssertProductPriceOnProductPageActionGroup" stepKey="assertProductPrice">\n        <argument name="productPrice" value="{{ClamberWatch.price}}" />\n    </actionGroup>\n    <actionGroup ref="StorefrontAssertProductImagesOnProductPageActionGroup" stepKey="assertProductImage">\n        <argument name="productImage" value="{{ClamberWatch.image}}" />\n    </actionGroup>\n</test>\n')),(0,r.mdx)("span",{style:{color:"red"}},"BAD:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<test name="NavigateClamberWatchEntityTest">\n    <annotations>\n                \x3c!--some annotations--\x3e\n    </annotations>\n\n    <amOnPage url="{{StorefrontProductPage.url(ClamberWatch.url_key)}}" stepKey="openProductPage"/>\n    <see selector="{{StorefrontProductInfoMainSection.productName}}" userInput="{{ClamberWatch.name}}" stepKey="seeProductName" />\n    <see selector="{{StorefrontProductInfoMainSection.productSku}}" userInput="{{ClamberWatch.sku}}" stepKey="seeProductSku" />\n    <see selector="{{StorefrontProductInfoMainSection.price}}" userInput="{{ClamberWatch.price}}" stepKey="seeProductPrice" />\n    <waitForElementNotVisible selector="{{StorefrontProductMediaSection.gallerySpinner}}" stepKey="waitGallerySpinnerDisappear" />\n    <seeElement selector="{{StorefrontProductMediaSection.gallery}}" stepKey="seeProductGallery" />\n    <seeElement selector="{{StorefrontProductMediaSection.productImage(ClamberWatch.productImage)}}" stepKey="seeProductImage" />\n    <click selector="{{StorefrontProductMediaSection.productImage(ClamberWatch.productImage)}}" stepKey="openFullscreenImage" />\n    <waitForPageLoad stepKey="waitForGalleryLoaded" />\n    <seeElement selector="{{StorefrontProductMediaSection.productImageFullscreen(ClamberWatch.productImage)}}" stepKey="seeFullscreenProductImage" />\n</test>\n')),(0,r.mdx)("h3",{id:"use-descriptive-stepkey-names"},"Use descriptive stepKey names"),(0,r.mdx)("p",null,"Make ",(0,r.mdx)("inlineCode",{parentName:"p"},"stepKeys")," values as descriptive as possible.\nDo not use numbers to make a ",(0,r.mdx)("inlineCode",{parentName:"p"},"stepKey")," unique."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Why?")," This helps with readability and clarity."),(0,r.mdx)("span",{style:{color:"green"}},"GOOD:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<click selector="{{StorefrontNavigationSection.topCategory(SimpleSubCategory.name)}}" stepKey="clickSimpleSubCategoryLink" />\n<waitForPageLoad stepKey="waitForSimpleSubCategoryPageLoad" />\n<click selector="{{StorefrontCategoryMainSection.productLinkByHref(SimpleProduct.urlKey)}}" stepKey="clickSimpleProductLink" />\n<waitForPageLoad stepKey="waitForSimpleProductPageLoad" />\n\n\x3c!-- Perform some actions / Assert product page --\x3e\n\n<click selector="{{StorefrontNavigationSection.topCategory(CustomCategory.name)}}" stepKey="clickCustomCategoryLink" />\n<waitForPageLoad stepKey="waitForCustomCategoryPageLoad" />\n<click selector="{{StorefrontCategoryMainSection.productLinkByHref(CustomSimpleProduct.urlKey)}}" stepKey="clickCustomSimpleProductLink" />\n<waitForPageLoad stepKey="waitForCustomSimpleProductPageLoad" />\n')),(0,r.mdx)("span",{style:{color:"red"}},"BAD:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<click selector="{{StorefrontNavigationSection.topCategory(SimpleSubCategory.name)}}" stepKey="clickCategoryLink1" />\n<waitForPageLoad stepKey="waitForPageLoad1" />\n<click selector="{{StorefrontCategoryMainSection.productLinkByHref(SimpleProduct.urlKey)}}" stepKey="clickProductLink1" />\n<waitForPageLoad stepKey="waitForPageLoad2" />\n\n\x3c!-- Perform some actions / Assert product page --\x3e\n\n<click selector="{{StorefrontNavigationSection.topCategory(CustomCategory.name)}}" stepKey="clickCategoryLink2" />\n<waitForPageLoad stepKey="waitForPageLoad3" />\n<click selector="{{StorefrontCategoryMainSection.productLinkByHref(CustomSimpleProduct.urlKey)}}" stepKey="clickProductLink2" />\n<waitForPageLoad stepKey="waitForPageLoad4" />\n')),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Exception:")),(0,r.mdx)("p",null,"Use numbers within ",(0,r.mdx)("inlineCode",{parentName:"p"},"stepKeys")," when order is important, such as with testing sort order."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<createData entity="BasicMsiStock1" stepKey="createCustomStock1"/>\n<createData entity="BasicMsiStock2" stepKey="createCustomStock2"/>\n<createData entity="BasicMsiStock3" stepKey="createCustomStock3"/>\n<createData entity="BasicMsiStock4" stepKey="createCustomStock4"/>\n')),(0,r.mdx)("h2",{id:"selectors"},"Selectors"),(0,r.mdx)("h3",{id:"use-contains-around-text"},"Use contains() around text()"),(0,r.mdx)("p",null,"When possible, use ",(0,r.mdx)("inlineCode",{parentName:"p"},"contains(text(), 'someTextHere')")," rather than ",(0,r.mdx)("inlineCode",{parentName:"p"},"text()='someTextHere'"),".\n",(0,r.mdx)("inlineCode",{parentName:"p"},"contains()")," ignores whitespace while ",(0,r.mdx)("inlineCode",{parentName:"p"},"text()")," accounts for it."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Why?"),"\nIf you are comparing text within a selector and have an unexpected space, or a blank line above or below the string, ",(0,r.mdx)("inlineCode",{parentName:"p"},"text()")," will fail while the ",(0,r.mdx)("inlineCode",{parentName:"p"},"contains(text())")," format will catch it.\nIn this scenario ",(0,r.mdx)("inlineCode",{parentName:"p"},"text()")," is more exacting. Use it when you need to be very precise about what is getting compared."),(0,r.mdx)("span",{style:{color:"green"}},"GOOD:"),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"//span[contains(text(), 'SomeTextHere')]")),(0,r.mdx)("span",{style:{color:"red"}},"BAD:"),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"//span[text()='SomeTextHere']")),(0,r.mdx)("h3",{id:"build-selectors-in-proper-order"},"Build selectors in proper order"),(0,r.mdx)("p",null,"When building selectors for form elements, start with the parent context of the form element.\nThen specify the element ",(0,r.mdx)("inlineCode",{parentName:"p"},"name")," attribute in your selector to ensure the correct element is targeted.\nTo build a selector for an input, use the pattern: ",(0,r.mdx)("inlineCode",{parentName:"p"},"{{section_selector}} {{input_selector}}")," or for a button: ",(0,r.mdx)("inlineCode",{parentName:"p"},"{{section_selector}} {{button_selector}}")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Why?")," Traversing the DOM takes a finite amount of time and reducing the scope of the selector makes the selector lookup as efficient as possible."),(0,r.mdx)("p",null,"Example:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<div class="admin__field _required" data-bind="css: $data.additionalClasses, attr: {\'data-index\': index}, visible: visible" data-index="name">\n    <div class="admin__field-label" data-bind="visible: $data.labelVisible">\n        <span data-bind="attr: {\'data-config-scope\': $data.scopeLabel}, i18n: label" data-config-scope="[STORE VIEW]">Product Name</span>\n    </div>\n    <div class="admin__field-control" data-bind="css: {\'_with-tooltip\': $data.tooltip, \'_with-reset\': $data.showFallbackReset && $data.isDifferedFromDefault}">\n        <input class="admin__control-text" type="text" name="product[name]" aria-describedby="notice-EXNI71H" id="EXNI71H" maxlength="255" data-bind="\n            attr: {\n                name: inputName,\n                placeholder: placeholder,\n                maxlength: 255}"/>\n    </div>\n</div>\n')),(0,r.mdx)("span",{style:{color:"green"}},"GOOD:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<element name="productName" type="input" selector="*[data-index=\'product-details\'] input[name=\'product[name]\']"/>\n')),(0,r.mdx)("span",{style:{color:"red"}},"BAD:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<element name="productName" type="input" selector=".admin__field[data-index=name] input"/>\n')),(0,r.mdx)("h2",{id:"general-tips"},"General tips"),(0,r.mdx)("h3",{id:"use-data-references-to-avoid-hardcoded-values"},"Use data references to avoid hardcoded values"),(0,r.mdx)("p",null,"If you need to run a command such as  ",(0,r.mdx)("inlineCode",{parentName:"p"},'<magentoCLI command="config:set" />'),", do not hardcode paths and values to the command.\nRather, create an appropriate ",(0,r.mdx)("inlineCode",{parentName:"p"},"ConfigData.xml")," file, which contains the required parameters for running the command.\nIt will simplify the future maintanence of tests."),(0,r.mdx)("span",{style:{color:"green"}},"GOOD:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<magentoCLI command="config:set {{StorefrontCustomerCaptchaLength3ConfigData.path}} {{StorefrontCustomerCaptchaLength3ConfigData.value}}" stepKey="setCaptchaLength" />\n')),(0,r.mdx)("span",{style:{color:"red"}},"BAD:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<magentoCLI command="config:set customer/captcha/length 3" stepKey="setCaptchaLength" />\n')),(0,r.mdx)("p",null,"For example:\n",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/blob/2.3/app/code/Magento/Captcha/Test/Mftf/Test/StorefrontCaptchaRegisterNewCustomerTest.xml#L24"},"This test")," refers to this ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/magento/magento2/blob/2.3/app/code/Magento/Captcha/Test/Mftf/Data/CaptchaConfigData.xml"},"Data file"),"."),(0,r.mdx)("h3",{id:"use-descriptive-variable-names"},"Use descriptive variable names"),(0,r.mdx)("p",null,"Use descriptive variable names to increase readability.\n",(0,r.mdx)("strong",{parentName:"p"},"Why?")," It makes the code easier to follow and update."),(0,r.mdx)("span",{style:{color:"green"}},"GOOD:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<element name="storeName" type="checkbox" selector="//label[contains(text(),\'{{storeName}}\')]" parameterized="true"/>\n')),(0,r.mdx)("span",{style:{color:"red"}},"BAD:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<element name="storeName" type="checkbox" selector="//label[contains(text(),\'{{var1}}\')]" parameterized="true"/>\n')),(0,r.mdx)("h3",{id:"use-proper-checkbox-actions"},"Use proper checkbox actions"),(0,r.mdx)("p",null,"When working with input type ",(0,r.mdx)("inlineCode",{parentName:"p"},"checkbox"),", do not use the ",(0,r.mdx)("inlineCode",{parentName:"p"},"click")," action; use ",(0,r.mdx)("inlineCode",{parentName:"p"},"checkOption")," or ",(0,r.mdx)("inlineCode",{parentName:"p"},"uncheckOption")," instead.\n",(0,r.mdx)("strong",{parentName:"p"},"Why?")," A click does not make it clear what the ending state will be; it will simply toggle the current state. Using the proper actions will ensure the expected state of the checkbox."),(0,r.mdx)("span",{style:{color:"green"}},"GOOD:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<checkOption selector="{{ProductInWebsitesSection.website(\'Second Website\')}}" stepKey="selectSecondWebsite"/>\n<uncheckOption selector="{{ProductInWebsitesSection.website(\'Second Website\')}}" stepKey="unselectSecondWebsite"/>\n')),(0,r.mdx)("span",{style:{color:"red"}},"BAD:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<click selector="{{ProductInWebsitesSection.website(\'Second Website\')}}" stepKey="selectSecondWebsite"/>\n<click selector="{{ProductInWebsitesSection.website(\'Second Website\')}}" stepKey="unselectSecondWebsite"/>\n')))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-functional-testing-framework-test-writing-tips-tricks-md-df314b4df4ce039f880e.js.map