{"version":3,"file":"component---src-pages-functional-testing-framework-commands-mftf-md-458e3cbd66cd12f7d29d.js","mappings":"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","sources":["webpack://commerce-testing/./src/pages/functional-testing-framework/commands/mftf.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-testing/commerce-testing/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"cli-commands-vendorbinmftf\"\n    }}>{`CLI commands: vendor/bin/mftf`}</h1>\n    <p>{`The Functional Testing Framework (MFTF) introduces the command line interface (CLI) tool `}<inlineCode parentName=\"p\">{`vendor/bin/mftf`}</inlineCode>{` to facilitate your interaction with the framework.`}</p>\n    <p>{`Note that `}<inlineCode parentName=\"p\">{`mftf`}</inlineCode>{` commands replace the `}<inlineCode parentName=\"p\">{`robo`}</inlineCode>{` commands that were used in previous releases.`}</p>\n    <h2 {...{\n      \"id\": \"command-format\"\n    }}>{`Command format`}</h2>\n    <p>{`In the project root directory (where you have installed the framework as a composer dependency), run commands using the following format:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf command [options] [<arguments>] [--remove|-r]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"useful-commands\"\n    }}>{`Useful commands`}</h2>\n    <p>{`Use the following commands to run commonly performed tasks.`}</p>\n    <h3 {...{\n      \"id\": \"apply-the-configuration-parameters\"\n    }}>{`Apply the configuration parameters`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf build:project\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"upgrade-the-project\"\n    }}>{`Upgrade the project`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf build:project --upgrade\n`}</code></pre>\n    <p>{`Upgrades all installed test after a major Functional Testing Framework upgrade.`}</p>\n    <h3 {...{\n      \"id\": \"generate-all-tests\"\n    }}>{`Generate all tests`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf generate:tests\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"generate-tests-by-test-name\"\n    }}>{`Generate tests by test name`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf generate:tests AdminLoginSuccessfulTest StorefrontPersistedCustomerLoginTest\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"generate-tests-by-testnamestxt-file\"\n    }}>{`Generate tests by testNames.txt file`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf generate:tests -p path/to/your/testNames.txt\n`}</code></pre>\n    <p>{`This command generate all tests specified in a testNames.txt file.`}</p>\n    <h4 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`testName1\ntestName2\ntestNameN\nsuiteName:testInSuite\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"generate-test-by-test-and-suite-name\"\n    }}>{`Generate test by test and suite name`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf generate:tests WYSIWYGDisabledSuite:AdminCMSPageCreatePageTest\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"generate-test-dependencies\"\n    }}>{`Generate test dependencies`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf generate:tests -l testEntityJson\n`}</code></pre>\n    <p>{`This command generate json file consist of all test dependent module.`}</p>\n    <h3 {...{\n      \"id\": \"generate-test-dependencies-by-test-name\"\n    }}>{`Generate test dependencies by test name`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf generate:tests testName1  testName2 .. testNameN -l testEntityJson\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"generate-and-run-the-tests-for-a-specified-group\"\n    }}>{`Generate and run the tests for a specified group`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf run:group product -r\n`}</code></pre>\n    <p>{`This command cleans up the previously generated tests; generates and runs tests for the product group (where `}<inlineCode parentName=\"p\">{`group=\"product\"`}</inlineCode>{`).`}</p>\n    <h3 {...{\n      \"id\": \"generate-and-run-particular-tests\"\n    }}>{`Generate and run particular tests`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf run:test AdminLoginSuccessfulTest StorefrontPersistedCustomerLoginTest -r\n`}</code></pre>\n    <p>{`This command cleans up the previously generated tests; generates and runs the `}<inlineCode parentName=\"p\">{`AdminLoginSuccessfulTest`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`StorefrontPersistedCustomerLoginTest`}</inlineCode>{` tests.`}</p>\n    <h3 {...{\n      \"id\": \"generate-and-run-particular-test-in-a-specific-suites-context\"\n    }}>{`Generate and run particular test in a specific suite's context`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf run:test WYSIWYGDisabledSuite:AdminCMSPageCreatePageTest -r\n`}</code></pre>\n    <p>{`This command cleans up previously generated tests; generates and run `}<inlineCode parentName=\"p\">{`AdminCMSPageCreatePageTest`}</inlineCode>{` within the context of the `}<inlineCode parentName=\"p\">{`WYSIWYGDisabledSuite`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"generate-and-run-a-testmanifesttxt-file\"\n    }}>{`Generate and run a testManifest.txt file`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf run:manifest path/to/your/testManifest.txt\n`}</code></pre>\n    <p>{`This command runs all tests specified in a `}<inlineCode parentName=\"p\">{`testManifest.txt`}</inlineCode>{` file. When you generate tests, a `}<inlineCode parentName=\"p\">{`testManifest.txt`}</inlineCode>{` file is also generated for you. You can pass this file directly to the `}<inlineCode parentName=\"p\">{`run:manifest`}</inlineCode>{` command and it will execute all listed tests. You can also create your own file in the same format to execute a subset of tests. Note: This command does not generate tests.`}</p>\n    <h3 {...{\n      \"id\": \"generate-previously-failed-tests\"\n    }}>{`Generate previously failed tests`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf generate:failed\n`}</code></pre>\n    <p>{`This command cleans up the previously generated tests; generates the tests listed in `}<inlineCode parentName=\"p\">{`dev/tests/acceptance/tests/_output/failed`}</inlineCode>{`.\nFor more details about `}<inlineCode parentName=\"p\">{`failed`}</inlineCode>{`, refer to `}<a parentName=\"p\" {...{\n        \"href\": \"../reporting.md\"\n      }}>{`Reporting`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"run-previously-failed-tests\"\n    }}>{`Run previously failed tests`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf run:failed\n`}</code></pre>\n    <p>{`This command runs the tests listed in `}<inlineCode parentName=\"p\">{`dev/tests/acceptance/tests/_output/failed`}</inlineCode>{`.\nFor more details about `}<inlineCode parentName=\"p\">{`failed`}</inlineCode>{`, refer to `}<a parentName=\"p\" {...{\n        \"href\": \"../reporting.md\"\n      }}>{`Reporting`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"error-tolerance-during-generation\"\n    }}>{`Error tolerance during generation`}</h2>\n    <p>{`Starting from version 3.2.0, the Functional Testing Framework will not fail right away when encountering generation errors.\nInstead, the Functional Testing Framework will generate as many tests and suites as it can, log errors to `}<inlineCode parentName=\"p\">{`mftf.log`}</inlineCode>{`, and exit with a non-zero generation status.`}</p>\n    <p>{`Note:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Not all errors are tolerable at generation. For example, schema validation errors, parser errors, and WebApi authentication errors will cause `}<inlineCode parentName=\"li\">{`hard`}</inlineCode>{` failures, with no tests or suites being generated.`}</li>\n      <li parentName=\"ul\">{`Error tolerance in generation is meant to help local test development and testing and is expected to be run locally. All generation errors must be fixed in order to use other framework functionality, pass static checks, and to deliver test.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"reference\"\n    }}>{`Reference`}</h2>\n    <h3 {...{\n      \"id\": \"buildproject\"\n    }}><inlineCode parentName=\"h3\">{`build:project`}</inlineCode></h3>\n    <h4 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h4>\n    <p>{`Clone the example configuration files and build the Codeception project.`}</p>\n    <h4 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf build:project [--upgrade] [config_param_options]\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"options\"\n    }}>{`Options`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Option`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`-u`}</inlineCode>{`, `}<inlineCode parentName=\"td\">{`--upgrade`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Upgrades all installed test according to requirements of the last major release. Specifying this flag upgrades only those tests in the default location. Example: `}<inlineCode parentName=\"td\">{`build:project --upgrade`}</inlineCode>{`.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`You can include options to set configuration parameter values for your environment since the project build process also `}<a parentName=\"p\" {...{\n        \"href\": \"#setupenv\"\n      }}>{`sets up the environment`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf build:project --MAGENTO_BASE_URL=http://magento.local/ --MAGENTO_BACKEND_NAME=admin214365\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"doctor\"\n    }}><inlineCode parentName=\"h3\">{`doctor`}</inlineCode></h3>\n    <h4 {...{\n      \"id\": \"description-1\"\n    }}>{`Description`}</h4>\n    <p>{`Diagnose the Functional Testing Framework configuration and setup. Currently this command will check the following:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Verify admin credentials are valid. Allows the Functional Testing Framework to authenticate and run API requests to Adobe Commerce or Magento Open Source through cURL`}</li>\n      <li parentName=\"ul\">{`Verify that Selenium is up and running and available for MFTF`}</li>\n      <li parentName=\"ul\">{`Verify that new session of browser can open Admin and store front urls`}</li>\n      <li parentName=\"ul\">{`Verify that the Functional Testing Framework can run Adobe Commerce and Magento Open Source CLI commands`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"usage-1\"\n    }}>{`Usage`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf doctor\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"options-1\"\n    }}>{`Options`}</h4>\n    <h3 {...{\n      \"id\": \"generatetests\"\n    }}><inlineCode parentName=\"h3\">{`generate:tests`}</inlineCode></h3>\n    <h4 {...{\n      \"id\": \"description-2\"\n    }}>{`Description`}</h4>\n    <p>{`Perform XML schema validation and generate PHP code from the tests defined in XML files.\nThe path is set in the `}<inlineCode parentName=\"p\">{`TESTS_MODULE_PATH`}</inlineCode>{` `}<a parentName=\"p\" {...{\n        \"href\": \"../configuration.md\"\n      }}>{`configuration`}</a>{` parameter.`}</p>\n    <h4 {...{\n      \"id\": \"usage-2\"\n    }}>{`Usage`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf generate:tests [option] [<test name>] [<test name>] [--remove]\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"options-2\"\n    }}>{`Options`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Option`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--config=[<default> or <singleRun> or <parallel>]`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Creates a single manifest file with a list of all tests. The default location is `}<inlineCode parentName=\"td\">{`tests/functional/Magento/FunctionalTest/_generated/testManifest.txt`}</inlineCode>{`.`}<br />{` You can split the list into multiple groups using `}<inlineCode parentName=\"td\">{`--config=parallel`}</inlineCode>{`; the groups will be generated in `}<inlineCode parentName=\"td\">{`_generated/groups/`}</inlineCode>{` like `}<inlineCode parentName=\"td\">{`_generated/groups/group1.txt, group2.txt, ...`}</inlineCode>{`.`}<br />{` Available values: `}<inlineCode parentName=\"td\">{`default`}</inlineCode>{` (default), `}<inlineCode parentName=\"td\">{`singleRun`}</inlineCode>{`(same as `}<inlineCode parentName=\"td\">{`default`}</inlineCode>{`), and `}<inlineCode parentName=\"td\">{`parallel`}</inlineCode>{`.`}<br />{` Example: `}<inlineCode parentName=\"td\">{`generate:tests --config=parallel`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--filter`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Option to filter tests to be generated.`}<br />{`Template: '`}{`<`}{`filterName`}{`>`}{`:`}{`<`}{`filterValue`}{`>`}{`'.`}<br />{`Existing filter types: severity, includeGroup, excludeGroup.`}<br />{`Existing severity values: BLOCKER, CRITICAL, MAJOR, AVERAGE, MINOR.`}<br />{`Example: `}<inlineCode parentName=\"td\">{`vendor/bin/mftf generate:tests --filter=severity:CRITICAL --filter=severity:BLOCKER --filter=includeGroup:customer`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--force`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Forces test generation, regardless of the module merge order defined in the Adobe Commerce or Magento Open Source instance. Example: `}<inlineCode parentName=\"td\">{`generate:tests --force`}</inlineCode>{`.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`-i,--time`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Set time in minutes to determine the group size when `}<inlineCode parentName=\"td\">{`--config=parallel`}</inlineCode>{` is used. `}<br />{`Example: `}<inlineCode parentName=\"td\">{`generate:tests --config=parallel --time=15`}</inlineCode>{` `}<br />{`Option `}<inlineCode parentName=\"td\">{`--time`}</inlineCode>{` will be the default and the `}<strong parentName=\"td\">{`default value`}</strong>{` is `}<inlineCode parentName=\"td\">{`10`}</inlineCode>{` when neither `}<inlineCode parentName=\"td\">{`--time`}</inlineCode>{` nor `}<inlineCode parentName=\"td\">{`--groups`}</inlineCode>{` is specified. `}<br />{`Example: `}<inlineCode parentName=\"td\">{`generate:tests --config=parallel`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`-g,--groups`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Set number of groups to be split into when `}<inlineCode parentName=\"td\">{`--config=parallel`}</inlineCode>{` is used. `}<br />{`Example: `}<inlineCode parentName=\"td\">{`generate:tests --config=parallel --groups=300`}</inlineCode>{` `}<br />{`Options `}<inlineCode parentName=\"td\">{`--time`}</inlineCode>{` and `}<inlineCode parentName=\"td\">{`--groups`}</inlineCode>{` are mutually exclusive and only one should be used.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--tests`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Defines the test configuration as a JSON string or JSON file path.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--allow-skipped`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Allows the framework to generate and run tests marked with `}<inlineCode parentName=\"td\">{`<skip>.`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--debug`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Performs schema validations on XML files. `}<br />{` DEFAULT: `}<inlineCode parentName=\"td\">{`generate:tests`}</inlineCode>{` implicitly performs schema validation on merged files. It does not indicate the file name where the error is encountered. `}<br />{` DEVELOPER: `}<inlineCode parentName=\"td\">{`--debug`}</inlineCode>{` performs per-file validation and returns additional debug information (such as the filename where an error occurred) when test generation fails because of an invalid XML schema. This option takes extra processing time. Use it after test generation has failed once.`}<br /></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`-r,--remove`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Removes the existing generated suites and tests cleaning up the `}<inlineCode parentName=\"td\">{`_generated`}</inlineCode>{` directory before the actual run. For example, `}<inlineCode parentName=\"td\">{`generate:tests SampleTest --remove`}</inlineCode>{` cleans up the entire `}<inlineCode parentName=\"td\">{`_generated`}</inlineCode>{` directory and generates `}<inlineCode parentName=\"td\">{`SampleTest`}</inlineCode>{` only.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`-l,--log`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Generate metadata files during test generation. Accepted parameters are: testEntityJson.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4 {...{\n      \"id\": \"examples-of-the-json-configuration\"\n    }}>{`Examples of the JSON configuration`}</h4>\n    <p>{`The configuration to generate a single test with no suites:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n   \"tests\":[\n      \"general_test1\"  //Generate the \"general_test1\" test.\n      ],\n   \"suites\": null\n}\n`}</code></pre>\n    <p>{`The configuration to generate a single test in the suite:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n   \"tests\": null,       // No tests outside the suite configuration will be generated.\n   \"suites\":{\n      \"sample\":[        // The suite that contains the test.\n         \"suite_test1\"  // The test to be generated.\n      ]\n   }\n}\n`}</code></pre>\n    <p>{`Complex configuration to generate a few non-suite tests, a single test in a suite, and an entire suite:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n   \"tests\":[\n      \"general_test1\",\n      \"general_test2\",\n      \"general_test3\"\n   ],\n   \"suites\":{           //Go to suites.\n      \"sample\":[        //Go to the \"sample\" suite.\n         \"suite_test1\"  //Generate the \"suite_test1\" test.\n      ],\n      \"sample2\":[]      //Generate all tests in the \"sample2\" suite.\n   }\n}\n`}</code></pre>\n    <p>{`The command that encodes this complex configuration:`}</p>\n    <p>{`Command to generate test by json string:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf generate:tests --tests '{\"tests\":[\"general_test1\",\"general_test2\",\"general_test3\"],\"suites\":{\"sample\":[\"suite_test1\"],\"sample2\":null}}'\n`}</code></pre>\n    <p>{`Note that the strings must be escaped and surrounded in quotes.`}</p>\n    <p>{`Command to generate test by json file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf generate:tests --tests ./foldername/filename.json\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"generatesuite\"\n    }}><inlineCode parentName=\"h3\">{`generate:suite`}</inlineCode></h3>\n    <h4 {...{\n      \"id\": \"description-3\"\n    }}>{`Description`}</h4>\n    <p>{`Generates one or more suites based on XML declarations.`}</p>\n    <h4 {...{\n      \"id\": \"usage-3\"\n    }}>{`Usage`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf generate:suite <suite name> [<suite name>] [--remove]\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"options-3\"\n    }}>{`Options`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Option`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`-r,--remove`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Removes the existing generated suites and tests cleaning up the `}<inlineCode parentName=\"td\">{`_generated`}</inlineCode>{` directory before the actual run. For example, `}<inlineCode parentName=\"td\">{`vendor/bin/mftf generate:suite WYSIWYG --remove`}</inlineCode>{` cleans up the entire `}<inlineCode parentName=\"td\">{`_generated`}</inlineCode>{` directory and generates `}<inlineCode parentName=\"td\">{`WYSIWYG`}</inlineCode>{` only.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4 {...{\n      \"id\": \"example-1\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf generate:suite suite1 suite2\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"generateurn-catalog\"\n    }}><inlineCode parentName=\"h3\">{`generate:urn-catalog`}</inlineCode></h3>\n    <h4 {...{\n      \"id\": \"description-4\"\n    }}>{`Description`}</h4>\n    <p>{`Generates a URN catalog, enabling PhpStorm to recognize and highlight URNs.\nIt also enables auto-completion in PhpStorm.`}</p>\n    <h4 {...{\n      \"id\": \"usage-4\"\n    }}>{`Usage`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf generate:urn-catalog [--force] [<path to misc.xml>]\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`misc.xml`}</inlineCode>{` is typically located at `}<inlineCode parentName=\"p\">{`<project root>/.idea/misc.xml`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"options-4\"\n    }}>{`Options`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Option`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`-f, --force`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Creates the `}<inlineCode parentName=\"td\">{`misc.xml`}</inlineCode>{` file if it does not exist in the given `}<inlineCode parentName=\"td\">{`path`}</inlineCode>{`.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4 {...{\n      \"id\": \"example-2\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf generate:urn-catalog .idea/misc.xml\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"reset\"\n    }}><inlineCode parentName=\"h3\">{`reset`}</inlineCode></h3>\n    <h4 {...{\n      \"id\": \"description-5\"\n    }}>{`Description`}</h4>\n    <p>{`Cleans any configuration files and generated artifacts from the environment.\nThe `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file is not affected.`}</p>\n    <h4 {...{\n      \"id\": \"usage-5\"\n    }}>{`Usage`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf reset [--hard]\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"options-5\"\n    }}>{`Options`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Option`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--hard`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Forces a reset of the configuration files.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4 {...{\n      \"id\": \"example-3\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf reset --hard\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"rungroup\"\n    }}><inlineCode parentName=\"h3\">{`run:group`}</inlineCode></h3>\n    <p>{`Generates and executes the listed groups of tests using Codeception.`}</p>\n    <h4 {...{\n      \"id\": \"usage-6\"\n    }}>{`Usage`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf run:group [--skip-generate|--remove|--xml] [--] <group1> [<group2>]\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"options-6\"\n    }}>{`Options`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Option`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`-k, --skip-generate`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Skips generating from the source XML. Instead, the command executes previously-generated groups of tests.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`-r, --remove`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Removes previously generated suites and tests before the actual generation and run.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--debug`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Performs schema validations on XML files. `}<inlineCode parentName=\"td\">{`run:group`}</inlineCode>{` implicitly performs schema validation on merged files. It does not indicate the file name where the error is encountered. `}<inlineCode parentName=\"td\">{`--debug`}</inlineCode>{` performs per-file validation and returns additional debug information (such as the filename where an error occurred).`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--xml`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Generate JUnit XML Log (default: \"report.xml\")`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h4>\n    <p>{`Clean up after the last test run; generate from XML and execute the tests with the annotations `}<inlineCode parentName=\"p\">{`group=\"group1\"`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`group=\"group2\"`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf -r -- run:group group1 group2\n`}</code></pre>\n    <p>{`Execute previously generated tests with the annotations `}<inlineCode parentName=\"p\">{`group=\"group1\"`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`group=\"group2\"`}</inlineCode>{`, skipping the regeneration of the test:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf run:group -k -- group1 group2\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"runtest\"\n    }}><inlineCode parentName=\"h3\">{`run:test`}</inlineCode></h3>\n    <p>{`Generates and executes tests by name using Codeception.`}</p>\n    <h4 {...{\n      \"id\": \"usage-7\"\n    }}>{`Usage`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf run:test [--skip-generate|--remove|--xml] [--] <name1> [<name2>]\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"options-7\"\n    }}>{`Options`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Option`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`-k, --skip-generate`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Skips generating from the source XML. Instead, the command executes previously-generated groups of tests.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`-r, --remove`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Remove previously generated suites and tests.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--debug`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Performs schema validations on XML files. `}<inlineCode parentName=\"td\">{`run:test`}</inlineCode>{` implicitly performs schema validation on merged files. It does not indicate the file name where the error is encountered. `}<inlineCode parentName=\"td\">{`--debug`}</inlineCode>{` performs per-file validation and returns additional debug information (such as the filename where an error occurred).`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--xml`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Generate JUnit XML Log (default: \"report.xml\")`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4 {...{\n      \"id\": \"examples-1\"\n    }}>{`Examples`}</h4>\n    <p>{`Generate the `}<inlineCode parentName=\"p\">{`LoginCustomerTest`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`StorefrontCreateCustomerTest`}</inlineCode>{` tests from XML and execute all the generated tests:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf run:test LoginCustomerTest StorefrontCreateCustomerTest\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"runmanifest\"\n    }}><inlineCode parentName=\"h3\">{`run:manifest`}</inlineCode></h3>\n    <p>{`Runs a testManifest.txt file.`}</p>\n    <p>{`This command runs all tests specified in a testManifest.xml file. It does not generate tests for you. You must do that as first.`}</p>\n    <h4 {...{\n      \"id\": \"usage-8\"\n    }}>{`Usage`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf run:manifest path/to/your/testManifest.txt\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"example-testmanifestxml-file\"\n    }}>{`Example testManifest.xml file`}</h4>\n    <p>{`Each line should contain either: one test path or one group (-g) reference.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-terminal\"\n      }}>{`tests/functional/tests/MFTF/_generated/default/AdminLoginSuccessfulTestCest.php\n-g PaypalTestSuite\ntests/functional/tests/MFTF/_generated/default/SomeOtherTestCest.php\ntests/functional/tests/MFTF/_generated/default/ThirdTestCest.php\n-g SomeOtherSuite\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"runfailed\"\n    }}><inlineCode parentName=\"h3\">{`run:failed`}</inlineCode></h3>\n    <p>{`Regenerates and reruns tests that previously failed.`}</p>\n    <p>{`This command cleans up previously generated tests. It generates and runs the tests listed in `}<inlineCode parentName=\"p\">{`dev/tests/acceptance/tests/_output/failed`}</inlineCode>{`.\nFor more details about `}<inlineCode parentName=\"p\">{`failed`}</inlineCode>{`, refer to `}<a parentName=\"p\" {...{\n        \"href\": \"../reporting.md\"\n      }}>{`Reporting`}</a>{`.`}</p>\n    <h4 {...{\n      \"id\": \"usage-9\"\n    }}>{`Usage`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf run:failed\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"options-8\"\n    }}>{`Options`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Option`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`--debug`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Performs schema validations on XML files. `}<inlineCode parentName=\"td\">{`run:failed`}</inlineCode>{` implicitly performs schema validation on merged files. It does not indicate the file name where the error is encountered. `}<inlineCode parentName=\"td\">{`--debug`}</inlineCode>{` performs per-file validation and returns additional debug information (such as the filename where an error occurred). Use it after test run has failed once.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4 {...{\n      \"id\": \"examples-2\"\n    }}>{`Examples`}</h4>\n    <p>{`Run the tests that failed in the previous run:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf run:failed\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"setupenv\"\n    }}><inlineCode parentName=\"h3\">{`setup:env`}</inlineCode></h3>\n    <p>{`Updates the `}<a parentName=\"p\" {...{\n        \"href\": \"../configuration.md\"\n      }}>{`configuration`}</a>{` parameter values in the `}{`[`}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{`]`}{` file.\nCreates the `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file if it does not exist.`}</p>\n    <h4 {...{\n      \"id\": \"usage-10\"\n    }}>{`Usage`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf setup:env [config_param_option1=<value>] [config_param_option2=<value>]\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`config_param`}</inlineCode>{` is a configuration parameter from the `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file.\nThe command consumes the parameters in a format of options assigned with values, for example `}<inlineCode parentName=\"p\">{`--MAGENTO_BASE_URL=http://magento.local/`}</inlineCode>{`.\nIf you specify a parameter that the `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file does not contain, the command returns an error.`}</p>\n    <p>{`You can also update configuration parameter values when you use the `}<a parentName=\"p\" {...{\n        \"href\": \"#buildproject\"\n      }}><inlineCode parentName=\"a\">{`build:project`}</inlineCode></a>{` command.`}</p>\n    <h4 {...{\n      \"id\": \"examples-3\"\n    }}>{`Examples`}</h4>\n    <p>{`To change values for the `}<inlineCode parentName=\"p\">{`MAGENTO_BASE_URL`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`BROWSER`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf setup:env --MAGENTO_BASE_URL=http://magento.local/ --BROWSER=firefox\n`}</code></pre>\n    <p>{`To create a `}<inlineCode parentName=\"p\">{`.env`}</inlineCode>{` file with example parameters:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf setup:env\n`}</code></pre>\n    <p>{`The example parameters are taken from the `}<inlineCode parentName=\"p\">{`etc/config/.env.example`}</inlineCode>{` file.`}</p>\n    <h3 {...{\n      \"id\": \"static-checks\"\n    }}><inlineCode parentName=\"h3\">{`static-checks`}</inlineCode></h3>\n    <p>{`Runs all or specific Functional Testing Framework static-checks on the test codebase that the Functional Testing Framework is currently attached to.\nBehavior for determining what tests to run is as follows:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`If test names are specified, only those tests are run.`}</li>\n      <li parentName=\"ul\">{`If no test names are specified, tests are run according to `}<inlineCode parentName=\"li\">{`staticRuleset.json`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`If no `}<inlineCode parentName=\"li\">{`staticRuleset.json`}</inlineCode>{` is found, all tests are run.`}</li>\n    </ul>\n    <p>{`Static checks errors are written to *.txt files under TEST_BP/tests/_output/static-results/`}</p>\n    <h4 {...{\n      \"id\": \"usage-11\"\n    }}>{`Usage`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf static-checks [<names>]...\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"options-9\"\n    }}>{`Options`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Option`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`-p, --path`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Path to a test module to run \"deprecatedEntityUsage\" and \"pauseActionUsage\" static check scripts. Option is ignored by other static check scripts.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4 {...{\n      \"id\": \"examples-4\"\n    }}>{`Examples`}</h4>\n    <p>{`To check what existing static check scripts are available`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf static-checks --help\n`}</code></pre>\n    <p>{`To run all existing static check scripts`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf static-checks\n`}</code></pre>\n    <p>{`To run specific static check scripts`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf static-checks testDependencies\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf static-checks actionGroupArguments\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf static-checks deprecatedEntityUsage\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf static-checks pauseActionUsage\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf static-checks annotations\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf static-checks deprecatedEntityUsage -p path/to/mftf/test/module\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf static-checks pauseActionUsage -p path/to/mftf/test/module\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf static-checks testDependencies actionGroupArguments\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"existing-static-checks\"\n    }}>{`Existing static checks`}</h4>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Argument`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`testDependencies`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Checks that test dependencies do not violate Magento module's composer dependencies.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`actionGroupArguments`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Checks that action groups do not have unused arguments.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`deprecatedEntityUsage`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Checks that deprecated test entities are not being referenced.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`annotations`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Checks various details of test annotations, such as missing annotations or duplicate annotations.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`pauseUsage`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Checks that pause action is not used in action groups, tests or suites.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h4 {...{\n      \"id\": \"defining-ruleset\"\n    }}>{`Defining ruleset`}</h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`static-checks`}</inlineCode>{` command will look for a `}<inlineCode parentName=\"p\">{`staticRuleset.json`}</inlineCode>{` file under either:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`dev/tests/acceptance/staticRuleset.json`}</inlineCode>{`, if embedded with Magento2`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`dev/staticRuleset.json`}</inlineCode>{`, if standalone`}</li>\n    </ul>\n    <p>{`This file works as the default configuration to easily allow for the integration of `}<inlineCode parentName=\"p\">{`static-checks`}</inlineCode>{` in a CI environment.\nCurrently, the ruleset only defines the tests to run. Here is an example of the expected format:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"tests\": [\n    \"actionGroupArguments\",\n    \"anotherTest\"\n  ]\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"upgradetests\"\n    }}><inlineCode parentName=\"h3\">{`upgrade:tests`}</inlineCode></h3>\n    <p>{`When the path argument is specified, this `}<inlineCode parentName=\"p\">{`upgrade`}</inlineCode>{` command applies all the major version Functional Testing Framework upgrade scripts to a `}<inlineCode parentName=\"p\">{`Test Module`}</inlineCode>{` in the given path.\nOtherwise, it will apply all the major version Functional Testing Framework upgrade scripts to all installed test components.`}</p>\n    <p><inlineCode parentName=\"p\">{`Test Module`}</inlineCode>{` should have the directory structure of ActionGroup, Data, Metadata, Page, Section, Test, and Suite.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The upgrade scripts are meant to be used for Test Modules under source code control. If you have old versions of test modules under vendor, those test modules will get upgraded`}</p>\n    <h4 {...{\n      \"id\": \"usage-12\"\n    }}>{`Usage`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf upgrade:tests [<path>]\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`<path>`}</inlineCode>{` is the path to a Functional Testing Framework `}<inlineCode parentName=\"p\">{`Test Module`}</inlineCode>{` that needs to be upgraded.\nThe command searches recursively for any `}<inlineCode parentName=\"p\">{`*.xml`}</inlineCode>{` files to upgrade.`}</p>\n    <h4 {...{\n      \"id\": \"examples-5\"\n    }}>{`Examples`}</h4>\n    <p>{`To upgrade all installed test:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf upgrade:tests\n`}</code></pre>\n    <p>{`To upgrade all test components inside modules in the `}<inlineCode parentName=\"p\">{`dev/tests/acceptance/tests/`}</inlineCode>{` directory:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf upgrade:tests /Users/user/magento2/dev/tests/acceptance/tests/\n`}</code></pre>\n    <p>{`To upgrade all test components inside the `}<inlineCode parentName=\"p\">{`Catalog`}</inlineCode>{` module:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf upgrade:tests /Users/user/magento2/app/code/Magento/Catalog/Test/Mftf/\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"codeceptrun\"\n    }}><inlineCode parentName=\"h3\">{`codecept:run`}</inlineCode></h3>\n    <p>{`A Functional Testing Framework wrapper command that invokes `}<inlineCode parentName=\"p\">{`vendor/bin/codecept run`}</inlineCode>{`. This command runs tests in functional suite. Tests must be generated before using this command.`}</p>\n    <h4 {...{\n      \"id\": \"usage-13\"\n    }}>{`Usage`}</h4>\n    <p>{`See the `}<a parentName=\"p\" {...{\n        \"href\": \"https://codeception.com/docs/reference/Commands#Run\"\n      }}>{`Run Command`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`vendor/bin/mftf codecept:run [<suite|test>] --[<option(s)>]\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"examples-6\"\n    }}>{`Examples`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`# Run all tests in functional suite\nvendor/bin/mftf codecept:run functional\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`# Run all tests in functional suite with options\nvendor/bin/mftf codecept:run functional --verbose --steps --debug\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`# Run one test\nvendor/bin/mftf codecept:run functional Magento/_generated/default/AdminCreateCmsPageTestCest.php --debug\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`# Run all tests in default group\nvendor/bin/mftf codecept:run functional --verbose --steps -g default\n`}</code></pre>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`You may want to limit the usage of this Codeception command with arguments and options for \"acceptance\" only, since it is what's supported by MFTF. When using this command, you should change \"acceptance\" to \"functional\" when referring to Codeception documentation.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}