{"version":3,"file":"component---src-pages-guide-integration-attributes-data-fixture-md-a6a9e8ac55c77b05e830.js","mappings":"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","sources":["webpack://commerce-testing/./src/pages/guide/integration/attributes/data-fixture.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-testing/commerce-testing/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"data-fixture-attribute\"\n    }}>{`Data fixture attribute`}</h1>\n    <p>{`Data fixture attributes apply fixtures that implement `}<inlineCode parentName=\"p\">{`Magento\\\\TestFramework\\\\Fixture\\\\DataFixtureInterface`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`Magento\\\\TestFramework\\\\Fixture\\\\RevertibleDataFixtureInterface`}</inlineCode>{`.`}</p>\n    <p>{`It takes two more optional parameters alongside the fixture class name. The second parameter is the data that is used to customize the fixture and the third parameter is the alias (ID) of the fixture that is used to retrieve the data returned by the fixture and also as a reference in other fixture parameters.`}</p>\n    <p>{`Use data fixtures to prepare a database for tests. The Integration Testing Framework (ITF) reverts the database to its initial state automatically.\nTo set up a date fixture, use the `}<inlineCode parentName=\"p\">{`DataFixture`}</inlineCode>{` attribute.`}</p>\n    <h2 {...{\n      \"id\": \"format\"\n    }}>{`Format`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php?start_inline=1\"\n      }}>{`#[\n    DataFixture(string $type, array $data = [], ?string $as = null)\n]\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"parameters\"\n    }}>{`Parameters`}</h3>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`type`}</strong>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`Name of a class that implements `}<inlineCode parentName=\"li\">{`Magento\\\\TestFramework\\\\Fixture\\\\DataFixtureInterface`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`Magento\\\\TestFramework\\\\Fixture\\\\RevertibleDataFixtureInterface`}</inlineCode>{`.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`data`}</strong>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The optional array of data passed on to the fixture.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`as`}</strong>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The fixture alias that will be used as a reference to retrieve the data returned by the fixture and also as a reference in other fixtures parameters.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"fixture-usage\"\n    }}>{`Fixture Usage`}</h2>\n    <h3 {...{\n      \"id\": \"retrieve-fixture-data-in-the-test\"\n    }}>{`Retrieve fixture data in the test`}</h3>\n    <p>{`A test can retrieve data that was returned by a Data Fixture using `}<inlineCode parentName=\"p\">{`Magento\\\\TestFramework\\\\Fixture\\\\DataFixtureStorageManager`}</inlineCode>{` and the fixture alias.`}</p>\n    <p>{`The following example shows how to retrieve data that was returned by the fixtures:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php?start_inline=1\"\n      }}>{`class ProductsList extends \\\\PHPUnit\\\\Framework\\\\TestCase\n{\n    #[\n        DataFixture(ProductFixture::class, as: 'product1'),\n        DataFixture(ProductFixture::class, as: 'product2'),\n        DataFixture(ProductFixture::class, as: 'product3')\n    ]\n    public function testGetProductsCount(): void\n    {\n        $fixtures = DataFixtureStorageManager::getStorage();\n        $product1 = $fixtures->get('product1');\n        $product2 = $fixtures->get('product2');\n        $product3 = $fixtures->get('product3');\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"supply-data-to-data-fixture-as-a-variable\"\n    }}>{`Supply data to data fixture as a variable`}</h3>\n    <p>{`It is possible to supply data as a variable from one fixture to another using the fixture alias in one of the following formats:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`$fixtureAlias$`}</inlineCode>{` is a reference to the data that was returned by the fixture with alias `}<inlineCode parentName=\"li\">{`fixtureAlias`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`$fixtureAlias.snake_case_property_name$`}</inlineCode>{` is a reference to the property `}<inlineCode parentName=\"li\">{`snake_case_property_name`}</inlineCode>{` in the data that was returned by the fixture with alias `}<inlineCode parentName=\"li\">{`fixtureAlias`}</inlineCode>{`.`}</li>\n    </ul>\n    <p>{`The following example shows how a fixture can use the data of another fixture:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php?start_inline=1\"\n      }}>{`class QuoteTest extends \\\\PHPUnit\\\\Framework\\\\TestCase\n{\n    #[\n        DataFixture(GuestCartFixture::class, as: 'cart'),\n        DataFixture(SetBillingAddressFixture::class, ['cart_id' => '$cart.id$']),\n    ]\n    public function testCollectTotals(): void\n    {\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"test-class-and-test-method-scopes\"\n    }}>{`Test class and test method scopes`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`DataFixture`}</inlineCode>{` can be specified for a particular test or for an entire test case.\nThe basic rules for fixture attributes at different levels are:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`DataFixture`}</inlineCode>{` at a test case level makes the framework apply the declared fixtures to each test in the test case.\nWhen the final test is complete, all class-level fixtures are reverted.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`DataFixture`}</inlineCode>{` for a particular test signals the framework to revert the fixtures declared on a test case level and applies the fixtures declared at a test method level instead.\nWhen the test is complete, the ITF reverts the applied fixtures.`}</li>\n    </ul>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The integration testing framework interacts with a database to revert the applied fixtures.`}</p>\n    <h2 {...{\n      \"id\": \"creating-the-fixture\"\n    }}>{`Creating the fixture`}</h2>\n    <p>{`Data Fixture is a PHP class that implements `}<inlineCode parentName=\"p\">{`Magento\\\\TestFramework\\\\Fixture\\\\DataFixtureInterface`}</inlineCode>{` or  `}<inlineCode parentName=\"p\">{`Magento\\\\TestFramework\\\\Fixture\\\\RevertibleDataFixtureInterface`}</inlineCode>{`. Its main purpose is to seed the database with the data needed to run a test.`}</p>\n    <h3 {...{\n      \"id\": \"principles\"\n    }}>{`Principles`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`Data Fixture class MUST implement `}<inlineCode parentName=\"li\">{`Magento\\\\TestFramework\\\\Fixture\\\\DataFixtureInterface`}</inlineCode>{` or  `}<inlineCode parentName=\"li\">{`Magento\\\\TestFramework\\\\Fixture\\\\RevertibleDataFixtureInterface`}</inlineCode>{` if the data created by the fixture is revertible. For instance, a fixture that creates an entity (for example, product).`}</li>\n      <li parentName=\"ol\">{`Data Fixture class MUST be placed in the `}<inlineCode parentName=\"li\">{`<ModuleName>/Test/Fixture`}</inlineCode>{` folder of the corresponding module with namespace: `}<inlineCode parentName=\"li\">{`<VendorName>\\\\<ModuleName>\\\\Test\\\\Fixture`}</inlineCode>{` (for example, `}<inlineCode parentName=\"li\">{`Magento\\\\Catalog\\\\Test\\\\Fixture`}</inlineCode>{`).`}</li>\n      <li parentName=\"ol\">{`Data Fixture class SHOULD follow single responsibility principle.`}</li>\n      <li parentName=\"ol\">{`Data Fixture class MUST depend only on services from modules that are declared in the `}<inlineCode parentName=\"li\">{`require`}</inlineCode>{` section of its module's composer.json file.`}</li>\n      <li parentName=\"ol\">{`Data Fixture MUST NOT depend on another fixture.`}</li>\n      <li parentName=\"ol\">{`Data Fixture SHOULD be implemented using service APIs.`}</li>\n      <li parentName=\"ol\">{`Data Fixture SHOULD have dynamic default data to allow generating unique fixtures.`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"dynamic-default-data\"\n    }}>{`Dynamic default data`}</h3>\n    <p>{`In order to generate multiple fixtures of the same type without having to manually configure unique fields, you can use the placeholder `}<inlineCode parentName=\"p\">{`%uniqid%`}</inlineCode>{` in the default value of unique fields and `}<inlineCode parentName=\"p\">{`Magento\\\\TestFramework\\\\Fixture\\\\Data\\\\ProcessorInterface`}</inlineCode>{` to substitute the placeholder with a unique sequence.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Catalog/Test/Fixture/Product.php\"\n      }}><inlineCode parentName=\"a\">{`Magento\\\\Catalog\\\\Test\\\\Fixture\\\\Product`}</inlineCode></a>{` demonstrates the usage of `}<inlineCode parentName=\"p\">{`%uniqid%`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`sku`}</inlineCode>{`: `}<inlineCode parentName=\"p\">{`simple-product%uniqid%`}</inlineCode>{`) in the fixture default data.`}</p>\n    <p>{`In the following example, a unique `}<inlineCode parentName=\"p\">{`sku`}</inlineCode>{` is automatically generated for the first fixture (for example, `}<inlineCode parentName=\"p\">{`simple-product61c10b2e86f991`}</inlineCode>{`) and the second fixture (for example, `}<inlineCode parentName=\"p\">{`simple-product61c10b2e86f992`}</inlineCode>{`). The sequence is random and therefore unpredictable.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php?start_inline=1\"\n      }}>{`class ProductsListTest extends \\\\PHPUnit\\\\Framework\\\\TestCase\n{\n     #[\n        DataFixture(ProductFixture::class),\n        DataFixture(ProductFixture::class)\n     ]\n    public function testGetProductsCount(): void\n    {\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"decoupling-fixtures\"\n    }}>{`Decoupling fixtures`}</h3>\n    <p>{`Fixtures must be written in the way that they only use one API to generate data. For example, the fixture that creates\na product should only invoke the \"Create Product\" API and return the product created. This fixture should not add any extra\nlogic beyond the \"create product\" API capabilities, such logic should be implemented in a separate fixture.`}</p>\n    <h3 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h3>\n    <p>{`Example 1:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php?start_inline=1\"\n      }}>{`class QuoteTest extends \\\\PHPUnit\\\\Framework\\\\TestCase\n{\n\n    #[\n        DataFixture(ProductFixture::class, as: 'p'),\n        DataFixture(GuestCartFixture::class, as: 'cart'),\n        DataFixture(AddProductToCartFixture::class, ['cart_id' => '$cart.id$', 'product_id' => '$p.id$', 'qty' => 2]),\n        DataFixture(SetBillingAddressFixture::class, ['cart_id' => '$cart.id$']),\n        DataFixture(SetShippingAddressFixture::class, ['cart_id' => '$cart.id$']),\n    ]\n    public function testCollectTotals(): void\n    {\n    }\n}\n`}</code></pre>\n    <p>{`Example 2:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php?start_inline=1\"\n      }}>{`class PriceTest extends \\\\PHPUnit\\\\Framework\\\\TestCase\n{\n    #[\n        DataFixture(ProductFixture::class, ['sku' => 'simple1', 'price' => 10], 'p1'),\n        DataFixture(ProductFixture::class, ['sku' => 'simple2', 'price' => 20], 'p2'),\n        DataFixture(ProductFixture::class, ['sku' => 'simple3', 'price' => 30], 'p3'),\n        DataFixture(BundleSelectionFixture::class, ['sku' => '$p1.sku$', 'price' => 10, 'price_type' => 0], 'link1'),\n        DataFixture(BundleSelectionFixture::class, ['sku' => '$p2.sku$', 'price' => 25, 'price_type' => 1], 'link2'),\n        DataFixture(BundleSelectionFixture::class, ['sku' => '$p3.sku$', 'price' => 25, 'price_type' => 0], 'link3'),\n        DataFixture(BundleOptionFixture::class, ['product_links' => ['$link1$', '$link2$', '$link3$']], 'opt1'),\n        DataFixture(\n            BundleProductFixture::class,\n            ['sku' => 'bundle1','price' => 50,'price_type' => 1,'_options' => ['$opt1$']],\n            'bundle1'\n        ),\n    ]\n    public function testBundleWithFixedPrice(): void\n    {\n\n    }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"fixture-rollback\"\n    }}>{`Fixture rollback`}</h3>\n    <p>{`A fixture that contains database transactions only are reverted automatically.\nOtherwise, when a fixture creates files or performs any actions other than a database transaction, provide the corresponding rollback logic, in the `}<inlineCode parentName=\"p\">{`revert`}</inlineCode>{` method of the revertible data fixture. Rollbacks are run after reverting all the fixtures related to database transactions.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`See the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/magento/magento2/blob/2.4-develop/app/code/Magento/Catalog/Test/Fixture/Product.php\"\n      }}><inlineCode parentName=\"a\">{`Magento\\\\Catalog\\\\Test\\\\Fixture\\\\Product`}</inlineCode></a>{` fixture for an example.`}</p>\n    <h3 {...{\n      \"id\": \"restrictions\"\n    }}>{`Restrictions`}</h3>\n    <p>{`Do not rely on and do not modify an application state from within a fixture. The `}<a parentName=\"p\" {...{\n        \"href\": \"../annotations/magento-app-isolation.md\"\n      }}>{`application isolation attribute`}</a>{` can reset the application state at any time.`}</p>\n    {\n      /* Link definitions */\n    }\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}