"use strict";(self.webpackChunkcommerce_testing=self.webpackChunkcommerce_testing||[]).push([[5021],{14139:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return i},default:function(){return x}});var a=n(58168),r=n(80045),d=(n(88763),n(15680)),m=n(83407);const l=["components"],i={},s=(o="InlineAlert",function(e){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),(0,d.mdx)("div",e)});var o;const p={_frontmatter:i},u=m.A;function x(e){let{components:t}=e,n=(0,r.A)(e,l);return(0,d.mdx)(u,(0,a.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,d.mdx)("h1",{id:"cli-commands-vendorbinmftf"},"CLI commands: vendor/bin/mftf"),(0,d.mdx)("p",null,"The Functional Testing Framework (MFTF) introduces the command line interface (CLI) tool ",(0,d.mdx)("inlineCode",{parentName:"p"},"vendor/bin/mftf")," to facilitate your interaction with the framework."),(0,d.mdx)("p",null,"Note that ",(0,d.mdx)("inlineCode",{parentName:"p"},"mftf")," commands replace the ",(0,d.mdx)("inlineCode",{parentName:"p"},"robo")," commands that were used in previous releases."),(0,d.mdx)("h2",{id:"command-format"},"Command format"),(0,d.mdx)("p",null,"In the project root directory (where you have installed the framework as a composer dependency), run commands using the following format:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf command [options] [<arguments>] [--remove|-r]\n")),(0,d.mdx)("h2",{id:"useful-commands"},"Useful commands"),(0,d.mdx)("p",null,"Use the following commands to run commonly performed tasks."),(0,d.mdx)("h3",{id:"apply-the-configuration-parameters"},"Apply the configuration parameters"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf build:project\n")),(0,d.mdx)("h3",{id:"upgrade-the-project"},"Upgrade the project"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf build:project --upgrade\n")),(0,d.mdx)("p",null,"Upgrades all installed test after a major Functional Testing Framework upgrade."),(0,d.mdx)("h3",{id:"generate-all-tests"},"Generate all tests"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf generate:tests\n")),(0,d.mdx)("h3",{id:"generate-tests-by-test-name"},"Generate tests by test name"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf generate:tests AdminLoginSuccessfulTest StorefrontPersistedCustomerLoginTest\n")),(0,d.mdx)("h3",{id:"generate-tests-by-testnamestxt-file"},"Generate tests by testNames.txt file"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf generate:tests -p path/to/your/testNames.txt\n")),(0,d.mdx)("p",null,"This command generate all tests specified in a testNames.txt file."),(0,d.mdx)("h4",{id:"example"},"Example"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"testName1\ntestName2\ntestNameN\nsuiteName:testInSuite\n")),(0,d.mdx)("h3",{id:"generate-test-by-test-and-suite-name"},"Generate test by test and suite name"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf generate:tests WYSIWYGDisabledSuite:AdminCMSPageCreatePageTest\n")),(0,d.mdx)("h3",{id:"generate-test-dependencies"},"Generate test dependencies"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf generate:tests -l testEntityJson\n")),(0,d.mdx)("p",null,"This command generate json file consist of all test dependent module."),(0,d.mdx)("h3",{id:"generate-test-dependencies-by-test-name"},"Generate test dependencies by test name"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf generate:tests testName1  testName2 .. testNameN -l testEntityJson\n")),(0,d.mdx)("h3",{id:"generate-and-run-the-tests-for-a-specified-group"},"Generate and run the tests for a specified group"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf run:group product -r\n")),(0,d.mdx)("p",null,"This command cleans up the previously generated tests; generates and runs tests for the product group (where ",(0,d.mdx)("inlineCode",{parentName:"p"},'group="product"'),")."),(0,d.mdx)("h3",{id:"generate-and-run-particular-tests"},"Generate and run particular tests"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf run:test AdminLoginSuccessfulTest StorefrontPersistedCustomerLoginTest -r\n")),(0,d.mdx)("p",null,"This command cleans up the previously generated tests; generates and runs the ",(0,d.mdx)("inlineCode",{parentName:"p"},"AdminLoginSuccessfulTest")," and ",(0,d.mdx)("inlineCode",{parentName:"p"},"StorefrontPersistedCustomerLoginTest")," tests."),(0,d.mdx)("h3",{id:"generate-and-run-particular-test-in-a-specific-suites-context"},"Generate and run particular test in a specific suite's context"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf run:test WYSIWYGDisabledSuite:AdminCMSPageCreatePageTest -r\n")),(0,d.mdx)("p",null,"This command cleans up previously generated tests; generates and run ",(0,d.mdx)("inlineCode",{parentName:"p"},"AdminCMSPageCreatePageTest")," within the context of the ",(0,d.mdx)("inlineCode",{parentName:"p"},"WYSIWYGDisabledSuite"),"."),(0,d.mdx)("h3",{id:"generate-and-run-a-testmanifesttxt-file"},"Generate and run a testManifest.txt file"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf run:manifest path/to/your/testManifest.txt\n")),(0,d.mdx)("p",null,"This command runs all tests specified in a ",(0,d.mdx)("inlineCode",{parentName:"p"},"testManifest.txt")," file. When you generate tests, a ",(0,d.mdx)("inlineCode",{parentName:"p"},"testManifest.txt")," file is also generated for you. You can pass this file directly to the ",(0,d.mdx)("inlineCode",{parentName:"p"},"run:manifest")," command and it will execute all listed tests. You can also create your own file in the same format to execute a subset of tests. Note: This command does not generate tests."),(0,d.mdx)("h3",{id:"generate-previously-failed-tests"},"Generate previously failed tests"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf generate:failed\n")),(0,d.mdx)("p",null,"This command cleans up the previously generated tests; generates the tests listed in ",(0,d.mdx)("inlineCode",{parentName:"p"},"dev/tests/acceptance/tests/_output/failed"),".\nFor more details about ",(0,d.mdx)("inlineCode",{parentName:"p"},"failed"),", refer to ",(0,d.mdx)("a",{parentName:"p",href:"../reporting.md"},"Reporting"),"."),(0,d.mdx)("h3",{id:"run-previously-failed-tests"},"Run previously failed tests"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf run:failed\n")),(0,d.mdx)("p",null,"This command runs the tests listed in ",(0,d.mdx)("inlineCode",{parentName:"p"},"dev/tests/acceptance/tests/_output/failed"),".\nFor more details about ",(0,d.mdx)("inlineCode",{parentName:"p"},"failed"),", refer to ",(0,d.mdx)("a",{parentName:"p",href:"../reporting.md"},"Reporting"),"."),(0,d.mdx)("h2",{id:"error-tolerance-during-generation"},"Error tolerance during generation"),(0,d.mdx)("p",null,"Starting from version 3.2.0, the Functional Testing Framework will not fail right away when encountering generation errors.\nInstead, the Functional Testing Framework will generate as many tests and suites as it can, log errors to ",(0,d.mdx)("inlineCode",{parentName:"p"},"mftf.log"),", and exit with a non-zero generation status."),(0,d.mdx)("p",null,"Note:"),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"Not all errors are tolerable at generation. For example, schema validation errors, parser errors, and WebApi authentication errors will cause ",(0,d.mdx)("inlineCode",{parentName:"li"},"hard")," failures, with no tests or suites being generated."),(0,d.mdx)("li",{parentName:"ul"},"Error tolerance in generation is meant to help local test development and testing and is expected to be run locally. All generation errors must be fixed in order to use other framework functionality, pass static checks, and to deliver test.")),(0,d.mdx)("h2",{id:"reference"},"Reference"),(0,d.mdx)("h3",{id:"buildproject"},(0,d.mdx)("inlineCode",{parentName:"h3"},"build:project")),(0,d.mdx)("h4",{id:"description"},"Description"),(0,d.mdx)("p",null,"Clone the example configuration files and build the Codeception project."),(0,d.mdx)("h4",{id:"usage"},"Usage"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf build:project [--upgrade] [config_param_options]\n")),(0,d.mdx)("h4",{id:"options"},"Options"),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Option"),(0,d.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"-u"),", ",(0,d.mdx)("inlineCode",{parentName:"td"},"--upgrade")),(0,d.mdx)("td",{parentName:"tr",align:null},"Upgrades all installed test according to requirements of the last major release. Specifying this flag upgrades only those tests in the default location. Example: ",(0,d.mdx)("inlineCode",{parentName:"td"},"build:project --upgrade"),".")))),(0,d.mdx)("p",null,"You can include options to set configuration parameter values for your environment since the project build process also ",(0,d.mdx)("a",{parentName:"p",href:"#setupenv"},"sets up the environment"),"."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf build:project --MAGENTO_BASE_URL=http://magento.local/ --MAGENTO_BACKEND_NAME=admin214365\n")),(0,d.mdx)("h3",{id:"doctor"},(0,d.mdx)("inlineCode",{parentName:"h3"},"doctor")),(0,d.mdx)("h4",{id:"description-1"},"Description"),(0,d.mdx)("p",null,"Diagnose the Functional Testing Framework configuration and setup. Currently this command will check the following:"),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"Verify admin credentials are valid. Allows the Functional Testing Framework to authenticate and run API requests to Adobe Commerce or Magento Open Source through cURL"),(0,d.mdx)("li",{parentName:"ul"},"Verify that Selenium is up and running and available for MFTF"),(0,d.mdx)("li",{parentName:"ul"},"Verify that new session of browser can open Admin and store front URLs"),(0,d.mdx)("li",{parentName:"ul"},"Verify that the Functional Testing Framework can run Adobe Commerce and Magento Open Source CLI commands")),(0,d.mdx)("h4",{id:"usage-1"},"Usage"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf doctor\n")),(0,d.mdx)("h4",{id:"options-1"},"Options"),(0,d.mdx)("h3",{id:"generatetests"},(0,d.mdx)("inlineCode",{parentName:"h3"},"generate:tests")),(0,d.mdx)("h4",{id:"description-2"},"Description"),(0,d.mdx)("p",null,"Perform XML schema validation and generate PHP code from the tests defined in XML files.\nThe path is set in the ",(0,d.mdx)("inlineCode",{parentName:"p"},"TESTS_MODULE_PATH")," ",(0,d.mdx)("a",{parentName:"p",href:"../configuration.md"},"configuration")," parameter."),(0,d.mdx)("h4",{id:"usage-2"},"Usage"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf generate:tests [option] [<test name>] [<test name>] [--remove]\n")),(0,d.mdx)("h4",{id:"options-2"},"Options"),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Option"),(0,d.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"--config=[<default> or <singleRun> or <parallel>]")),(0,d.mdx)("td",{parentName:"tr",align:null},"Creates a single manifest file with a list of all tests. The default location is ",(0,d.mdx)("inlineCode",{parentName:"td"},"tests/functional/Magento/FunctionalTest/_generated/testManifest.txt"),".",(0,d.mdx)("br",null)," You can split the list into multiple groups using ",(0,d.mdx)("inlineCode",{parentName:"td"},"--config=parallel"),"; the groups will be generated in ",(0,d.mdx)("inlineCode",{parentName:"td"},"_generated/groups/")," like ",(0,d.mdx)("inlineCode",{parentName:"td"},"_generated/groups/group1.txt, group2.txt, ..."),".",(0,d.mdx)("br",null)," Available values: ",(0,d.mdx)("inlineCode",{parentName:"td"},"default")," (default), ",(0,d.mdx)("inlineCode",{parentName:"td"},"singleRun"),"(same as ",(0,d.mdx)("inlineCode",{parentName:"td"},"default"),"), and ",(0,d.mdx)("inlineCode",{parentName:"td"},"parallel"),".",(0,d.mdx)("br",null)," Example: ",(0,d.mdx)("inlineCode",{parentName:"td"},"generate:tests --config=parallel"),".")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"--filter")),(0,d.mdx)("td",{parentName:"tr",align:null},"Option to filter tests to be generated.",(0,d.mdx)("br",null),"Template: '","<","filterName",">",":","<","filterValue",">","'.",(0,d.mdx)("br",null),"Existing filter types: severity, includeGroup, excludeGroup.",(0,d.mdx)("br",null),"Existing severity values: BLOCKER, CRITICAL, MAJOR, AVERAGE, MINOR.",(0,d.mdx)("br",null),"Example: ",(0,d.mdx)("inlineCode",{parentName:"td"},"vendor/bin/mftf generate:tests --filter=severity:CRITICAL --filter=severity:BLOCKER --filter=includeGroup:customer"))),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"--force")),(0,d.mdx)("td",{parentName:"tr",align:null},"Forces test generation, regardless of the module merge order defined in the Adobe Commerce or Magento Open Source instance. Example: ",(0,d.mdx)("inlineCode",{parentName:"td"},"generate:tests --force"),".")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"-i,--time")),(0,d.mdx)("td",{parentName:"tr",align:null},"Set time in minutes to determine the group size when ",(0,d.mdx)("inlineCode",{parentName:"td"},"--config=parallel")," is used. ",(0,d.mdx)("br",null),"Example: ",(0,d.mdx)("inlineCode",{parentName:"td"},"generate:tests --config=parallel --time=15")," ",(0,d.mdx)("br",null),"Option ",(0,d.mdx)("inlineCode",{parentName:"td"},"--time")," will be the default and the ",(0,d.mdx)("strong",{parentName:"td"},"default value")," is ",(0,d.mdx)("inlineCode",{parentName:"td"},"10")," when neither ",(0,d.mdx)("inlineCode",{parentName:"td"},"--time")," nor ",(0,d.mdx)("inlineCode",{parentName:"td"},"--groups")," is specified. ",(0,d.mdx)("br",null),"Example: ",(0,d.mdx)("inlineCode",{parentName:"td"},"generate:tests --config=parallel"))),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"-g,--groups")),(0,d.mdx)("td",{parentName:"tr",align:null},"Set number of groups to be split into when ",(0,d.mdx)("inlineCode",{parentName:"td"},"--config=parallel")," is used. ",(0,d.mdx)("br",null),"Example: ",(0,d.mdx)("inlineCode",{parentName:"td"},"generate:tests --config=parallel --groups=300")," ",(0,d.mdx)("br",null),"Options ",(0,d.mdx)("inlineCode",{parentName:"td"},"--time")," and ",(0,d.mdx)("inlineCode",{parentName:"td"},"--groups")," are mutually exclusive and only one should be used.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"--tests")),(0,d.mdx)("td",{parentName:"tr",align:null},"Defines the test configuration as a JSON string or JSON file path.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"--allow-skipped")),(0,d.mdx)("td",{parentName:"tr",align:null},"Allows the framework to generate and run tests marked with ",(0,d.mdx)("inlineCode",{parentName:"td"},"<skip>."))),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"--debug")),(0,d.mdx)("td",{parentName:"tr",align:null},"Performs schema validations on XML files. ",(0,d.mdx)("br",null)," DEFAULT: ",(0,d.mdx)("inlineCode",{parentName:"td"},"generate:tests")," implicitly performs schema validation on merged files. It does not indicate the filename where the error is encountered. ",(0,d.mdx)("br",null)," DEVELOPER: ",(0,d.mdx)("inlineCode",{parentName:"td"},"--debug")," performs per-file validation and returns additional debug information (such as the filename where an error occurred) when test generation fails because of an invalid XML schema. This option takes extra processing time. Use it after test generation has failed once.",(0,d.mdx)("br",null))),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"-r,--remove")),(0,d.mdx)("td",{parentName:"tr",align:null},"Removes the existing generated suites and tests cleaning up the ",(0,d.mdx)("inlineCode",{parentName:"td"},"_generated")," directory before the actual run. For example, ",(0,d.mdx)("inlineCode",{parentName:"td"},"generate:tests SampleTest --remove")," cleans up the entire ",(0,d.mdx)("inlineCode",{parentName:"td"},"_generated")," directory and generates ",(0,d.mdx)("inlineCode",{parentName:"td"},"SampleTest")," only.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"-l,--log")),(0,d.mdx)("td",{parentName:"tr",align:null},"Generate metadata files during test generation. Accepted parameters are: testEntityJson.")))),(0,d.mdx)("h4",{id:"examples-of-the-json-configuration"},"Examples of the JSON configuration"),(0,d.mdx)("p",null,"The configuration to generate a single test with no suites:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-json"},'{\n   "tests":[\n      "general_test1"  //Generate the "general_test1" test.\n      ],\n   "suites": null\n}\n')),(0,d.mdx)("p",null,"The configuration to generate a single test in the suite:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-json"},'{\n   "tests": null,       // No tests outside the suite configuration will be generated.\n   "suites":{\n      "sample":[        // The suite that contains the test.\n         "suite_test1"  // The test to be generated.\n      ]\n   }\n}\n')),(0,d.mdx)("p",null,"Complex configuration to generate a few non-suite tests, a single test in a suite, and an entire suite:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-json"},'{\n   "tests":[\n      "general_test1",\n      "general_test2",\n      "general_test3"\n   ],\n   "suites":{           //Go to suites.\n      "sample":[        //Go to the "sample" suite.\n         "suite_test1"  //Generate the "suite_test1" test.\n      ],\n      "sample2":[]      //Generate all tests in the "sample2" suite.\n   }\n}\n')),(0,d.mdx)("p",null,"The command that encodes this complex configuration:"),(0,d.mdx)("p",null,"Command to generate test by json string:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},'vendor/bin/mftf generate:tests --tests \'{"tests":["general_test1","general_test2","general_test3"],"suites":{"sample":["suite_test1"],"sample2":null}}\'\n')),(0,d.mdx)("p",null,"Note that the strings must be escaped and surrounded in quotes."),(0,d.mdx)("p",null,"Command to generate test by json file:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf generate:tests --tests ./foldername/filename.json\n")),(0,d.mdx)("h3",{id:"generatesuite"},(0,d.mdx)("inlineCode",{parentName:"h3"},"generate:suite")),(0,d.mdx)("h4",{id:"description-3"},"Description"),(0,d.mdx)("p",null,"Generates one or more suites based on XML declarations."),(0,d.mdx)("h4",{id:"usage-3"},"Usage"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf generate:suite <suite name> [<suite name>] [--remove]\n")),(0,d.mdx)("h4",{id:"options-3"},"Options"),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Option"),(0,d.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"-r,--remove")),(0,d.mdx)("td",{parentName:"tr",align:null},"Removes the existing generated suites and tests cleaning up the ",(0,d.mdx)("inlineCode",{parentName:"td"},"_generated")," directory before the actual run. For example, ",(0,d.mdx)("inlineCode",{parentName:"td"},"vendor/bin/mftf generate:suite WYSIWYG --remove")," cleans up the entire ",(0,d.mdx)("inlineCode",{parentName:"td"},"_generated")," directory and generates ",(0,d.mdx)("inlineCode",{parentName:"td"},"WYSIWYG")," only.")))),(0,d.mdx)("h4",{id:"example-1"},"Example"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf generate:suite suite1 suite2\n")),(0,d.mdx)("h3",{id:"generateurn-catalog"},(0,d.mdx)("inlineCode",{parentName:"h3"},"generate:urn-catalog")),(0,d.mdx)("h4",{id:"description-4"},"Description"),(0,d.mdx)("p",null,"Generates a URN catalog, enabling PhpStorm to recognize and highlight URNs.\nIt also enables auto-completion in PhpStorm."),(0,d.mdx)("h4",{id:"usage-4"},"Usage"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf generate:urn-catalog [--force] [<path to misc.xml>]\n")),(0,d.mdx)("p",null,(0,d.mdx)("inlineCode",{parentName:"p"},"misc.xml")," is typically located at ",(0,d.mdx)("inlineCode",{parentName:"p"},"<project root>/.idea/misc.xml"),"."),(0,d.mdx)("h4",{id:"options-4"},"Options"),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Option"),(0,d.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"-f, --force")),(0,d.mdx)("td",{parentName:"tr",align:null},"Creates the ",(0,d.mdx)("inlineCode",{parentName:"td"},"misc.xml")," file if it does not exist in the given ",(0,d.mdx)("inlineCode",{parentName:"td"},"path"),".")))),(0,d.mdx)("h4",{id:"example-2"},"Example"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf generate:urn-catalog .idea/misc.xml\n")),(0,d.mdx)("h3",{id:"reset"},(0,d.mdx)("inlineCode",{parentName:"h3"},"reset")),(0,d.mdx)("h4",{id:"description-5"},"Description"),(0,d.mdx)("p",null,"Cleans any configuration files and generated artifacts from the environment.\nThe ",(0,d.mdx)("inlineCode",{parentName:"p"},".env")," file is not affected."),(0,d.mdx)("h4",{id:"usage-5"},"Usage"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf reset [--hard]\n")),(0,d.mdx)("h4",{id:"options-5"},"Options"),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Option"),(0,d.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"--hard")),(0,d.mdx)("td",{parentName:"tr",align:null},"Forces a reset of the configuration files.")))),(0,d.mdx)("h4",{id:"example-3"},"Example"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf reset --hard\n")),(0,d.mdx)("h3",{id:"rungroup"},(0,d.mdx)("inlineCode",{parentName:"h3"},"run:group")),(0,d.mdx)("p",null,"Generates and executes the listed groups of tests using Codeception."),(0,d.mdx)("h4",{id:"usage-6"},"Usage"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf run:group [--skip-generate|--remove|--xml] [--] <group1> [<group2>]\n")),(0,d.mdx)("h4",{id:"options-6"},"Options"),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Option"),(0,d.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"-k, --skip-generate")),(0,d.mdx)("td",{parentName:"tr",align:null},"Skips generating from the source XML. Instead, the command executes previously-generated groups of tests.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"-r, --remove")),(0,d.mdx)("td",{parentName:"tr",align:null},"Removes previously generated suites and tests before the actual generation and run.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"--debug")),(0,d.mdx)("td",{parentName:"tr",align:null},"Performs schema validations on XML files. ",(0,d.mdx)("inlineCode",{parentName:"td"},"run:group")," implicitly performs schema validation on merged files. It does not indicate the filename where the error is encountered. ",(0,d.mdx)("inlineCode",{parentName:"td"},"--debug")," performs per-file validation and returns additional debug information (such as the filename where an error occurred).")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"--xml")),(0,d.mdx)("td",{parentName:"tr",align:null},'Generate JUnit XML Log (default: "report.xml")')))),(0,d.mdx)("h4",{id:"examples"},"Examples"),(0,d.mdx)("p",null,"Clean up after the last test run; generate from XML and execute the tests with the annotations ",(0,d.mdx)("inlineCode",{parentName:"p"},'group="group1"')," and ",(0,d.mdx)("inlineCode",{parentName:"p"},'group="group2"'),":"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf -r -- run:group group1 group2\n")),(0,d.mdx)("p",null,"Execute previously generated tests with the annotations ",(0,d.mdx)("inlineCode",{parentName:"p"},'group="group1"')," and ",(0,d.mdx)("inlineCode",{parentName:"p"},'group="group2"'),", skipping the regeneration of the test:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf run:group -k -- group1 group2\n")),(0,d.mdx)("h3",{id:"runtest"},(0,d.mdx)("inlineCode",{parentName:"h3"},"run:test")),(0,d.mdx)("p",null,"Generates and executes tests by name using Codeception."),(0,d.mdx)("h4",{id:"usage-7"},"Usage"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf run:test [--skip-generate|--remove|--xml] [--] <name1> [<name2>]\n")),(0,d.mdx)("h4",{id:"options-7"},"Options"),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Option"),(0,d.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"-k, --skip-generate")),(0,d.mdx)("td",{parentName:"tr",align:null},"Skips generating from the source XML. Instead, the command executes previously-generated groups of tests.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"-r, --remove")),(0,d.mdx)("td",{parentName:"tr",align:null},"Remove previously generated suites and tests.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"--debug")),(0,d.mdx)("td",{parentName:"tr",align:null},"Performs schema validations on XML files. ",(0,d.mdx)("inlineCode",{parentName:"td"},"run:test")," implicitly performs schema validation on merged files. It does not indicate the filename where the error is encountered. ",(0,d.mdx)("inlineCode",{parentName:"td"},"--debug")," performs per-file validation and returns additional debug information (such as the filename where an error occurred).")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"--xml")),(0,d.mdx)("td",{parentName:"tr",align:null},'Generate JUnit XML Log (default: "report.xml")')))),(0,d.mdx)("h4",{id:"examples-1"},"Examples"),(0,d.mdx)("p",null,"Generate the ",(0,d.mdx)("inlineCode",{parentName:"p"},"LoginCustomerTest")," and ",(0,d.mdx)("inlineCode",{parentName:"p"},"StorefrontCreateCustomerTest")," tests from XML and execute all the generated tests:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf run:test LoginCustomerTest StorefrontCreateCustomerTest\n")),(0,d.mdx)("h3",{id:"runmanifest"},(0,d.mdx)("inlineCode",{parentName:"h3"},"run:manifest")),(0,d.mdx)("p",null,"Runs a testManifest.txt file."),(0,d.mdx)("p",null,"This command runs all tests specified in a testManifest.xml file. It does not generate tests for you. You must do that as first."),(0,d.mdx)("h4",{id:"usage-8"},"Usage"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf run:manifest path/to/your/testManifest.txt\n")),(0,d.mdx)("h4",{id:"example-testmanifestxml-file"},"Example testManifest.xml file"),(0,d.mdx)("p",null,"Each line should contain either: one test path or one group (-g) reference."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-terminal"},"tests/functional/tests/MFTF/_generated/default/AdminLoginSuccessfulTestCest.php\n-g PaypalTestSuite\ntests/functional/tests/MFTF/_generated/default/SomeOtherTestCest.php\ntests/functional/tests/MFTF/_generated/default/ThirdTestCest.php\n-g SomeOtherSuite\n")),(0,d.mdx)("h3",{id:"runfailed"},(0,d.mdx)("inlineCode",{parentName:"h3"},"run:failed")),(0,d.mdx)("p",null,"Regenerates and reruns tests that previously failed."),(0,d.mdx)("p",null,"This command cleans up previously generated tests. It generates and runs the tests listed in ",(0,d.mdx)("inlineCode",{parentName:"p"},"dev/tests/acceptance/tests/_output/failed"),".\nFor more details about ",(0,d.mdx)("inlineCode",{parentName:"p"},"failed"),", refer to ",(0,d.mdx)("a",{parentName:"p",href:"../reporting.md"},"Reporting"),"."),(0,d.mdx)("h4",{id:"usage-9"},"Usage"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf run:failed\n")),(0,d.mdx)("h4",{id:"options-8"},"Options"),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Option"),(0,d.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"--debug")),(0,d.mdx)("td",{parentName:"tr",align:null},"Performs schema validations on XML files. ",(0,d.mdx)("inlineCode",{parentName:"td"},"run:failed")," implicitly performs schema validation on merged files. It does not indicate the filename where the error is encountered. ",(0,d.mdx)("inlineCode",{parentName:"td"},"--debug")," performs per-file validation and returns additional debug information (such as the filename where an error occurred). Use it after test run has failed once.")))),(0,d.mdx)("h4",{id:"examples-2"},"Examples"),(0,d.mdx)("p",null,"Run the tests that failed in the previous run:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf run:failed\n")),(0,d.mdx)("h3",{id:"setupenv"},(0,d.mdx)("inlineCode",{parentName:"h3"},"setup:env")),(0,d.mdx)("p",null,"Updates the ",(0,d.mdx)("a",{parentName:"p",href:"../configuration.md"},"configuration")," parameter values in the ","[",(0,d.mdx)("inlineCode",{parentName:"p"},".env"),"]"," file.\nCreates the ",(0,d.mdx)("inlineCode",{parentName:"p"},".env")," file if it does not exist."),(0,d.mdx)("h4",{id:"usage-10"},"Usage"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf setup:env [config_param_option1=<value>] [config_param_option2=<value>]\n")),(0,d.mdx)("p",null,(0,d.mdx)("inlineCode",{parentName:"p"},"config_param")," is a configuration parameter from the ",(0,d.mdx)("inlineCode",{parentName:"p"},".env")," file.\nThe command consumes the parameters in a format of options assigned with values, for example ",(0,d.mdx)("inlineCode",{parentName:"p"},"--MAGENTO_BASE_URL=http://magento.local/"),".\nIf you specify a parameter that the ",(0,d.mdx)("inlineCode",{parentName:"p"},".env")," file does not contain, the command returns an error."),(0,d.mdx)("p",null,"You can also update configuration parameter values when you use the ",(0,d.mdx)("a",{parentName:"p",href:"#buildproject"},(0,d.mdx)("inlineCode",{parentName:"a"},"build:project"))," command."),(0,d.mdx)("h4",{id:"examples-3"},"Examples"),(0,d.mdx)("p",null,"To change values for the ",(0,d.mdx)("inlineCode",{parentName:"p"},"MAGENTO_BASE_URL")," and ",(0,d.mdx)("inlineCode",{parentName:"p"},"BROWSER"),":"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf setup:env --MAGENTO_BASE_URL=http://magento.local/ --BROWSER=firefox\n")),(0,d.mdx)("p",null,"To create a ",(0,d.mdx)("inlineCode",{parentName:"p"},".env")," file with example parameters:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf setup:env\n")),(0,d.mdx)("p",null,"The example parameters are taken from the ",(0,d.mdx)("inlineCode",{parentName:"p"},"etc/config/.env.example")," file."),(0,d.mdx)("h3",{id:"static-checks"},(0,d.mdx)("inlineCode",{parentName:"h3"},"static-checks")),(0,d.mdx)("p",null,"Runs all or specific Functional Testing Framework static-checks on the test codebase that the Functional Testing Framework is currently attached to.\nBehavior for determining what tests to run is as follows:"),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"If test names are specified, only those tests are run."),(0,d.mdx)("li",{parentName:"ul"},"If no test names are specified, tests are run according to ",(0,d.mdx)("inlineCode",{parentName:"li"},"staticRuleset.json"),"."),(0,d.mdx)("li",{parentName:"ul"},"If no ",(0,d.mdx)("inlineCode",{parentName:"li"},"staticRuleset.json")," is found, all tests are run.")),(0,d.mdx)("p",null,"Static checks errors are written to *.txt files under TEST_BP/tests/_output/static-results/"),(0,d.mdx)("h4",{id:"usage-11"},"Usage"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf static-checks [<names>]...\n")),(0,d.mdx)("h4",{id:"options-9"},"Options"),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Option"),(0,d.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"-p, --path")),(0,d.mdx)("td",{parentName:"tr",align:null},'Path to a test module to run "deprecatedEntityUsage" and "pauseActionUsage" static check scripts. Option is ignored by other static check scripts.')))),(0,d.mdx)("h4",{id:"examples-4"},"Examples"),(0,d.mdx)("p",null,"To check what existing static check scripts are available"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf static-checks --help\n")),(0,d.mdx)("p",null,"To run all existing static check scripts"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf static-checks\n")),(0,d.mdx)("p",null,"To run specific static check scripts"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf static-checks testDependencies\n")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf static-checks actionGroupArguments\n")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf static-checks deprecatedEntityUsage\n")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf static-checks pauseActionUsage\n")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf static-checks annotations\n")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf static-checks deprecatedEntityUsage -p path/to/mftf/test/module\n")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf static-checks pauseActionUsage -p path/to/mftf/test/module\n")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf static-checks testDependencies actionGroupArguments\n")),(0,d.mdx)("h4",{id:"existing-static-checks"},"Existing static checks"),(0,d.mdx)("table",null,(0,d.mdx)("thead",{parentName:"table"},(0,d.mdx)("tr",{parentName:"thead"},(0,d.mdx)("th",{parentName:"tr",align:null},"Argument"),(0,d.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,d.mdx)("tbody",{parentName:"table"},(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"testDependencies")),(0,d.mdx)("td",{parentName:"tr",align:null},"Checks that test dependencies do not violate Magento module's composer dependencies.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"actionGroupArguments")),(0,d.mdx)("td",{parentName:"tr",align:null},"Checks that action groups do not have unused arguments.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"deprecatedEntityUsage")),(0,d.mdx)("td",{parentName:"tr",align:null},"Checks that deprecated test entities are not being referenced.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"annotations")),(0,d.mdx)("td",{parentName:"tr",align:null},"Checks various details of test annotations, such as missing annotations or duplicate annotations.")),(0,d.mdx)("tr",{parentName:"tbody"},(0,d.mdx)("td",{parentName:"tr",align:null},(0,d.mdx)("inlineCode",{parentName:"td"},"pauseUsage")),(0,d.mdx)("td",{parentName:"tr",align:null},"Checks that pause action is not used in action groups, tests or suites.")))),(0,d.mdx)("h4",{id:"defining-ruleset"},"Defining ruleset"),(0,d.mdx)("p",null,"The ",(0,d.mdx)("inlineCode",{parentName:"p"},"static-checks")," command will look for a ",(0,d.mdx)("inlineCode",{parentName:"p"},"staticRuleset.json")," file under either:"),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("inlineCode",{parentName:"li"},"dev/tests/acceptance/staticRuleset.json"),", if embedded with Magento2"),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("inlineCode",{parentName:"li"},"dev/staticRuleset.json"),", if standalone")),(0,d.mdx)("p",null,"This file works as the default configuration to easily allow for the integration of ",(0,d.mdx)("inlineCode",{parentName:"p"},"static-checks")," in a CI environment.\nCurrently, the ruleset only defines the tests to run. Here is an example of the expected format:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "tests": [\n    "actionGroupArguments",\n    "anotherTest"\n  ]\n}\n')),(0,d.mdx)("h4",{id:"defining-allow-list"},"Defining allow-list"),(0,d.mdx)("p",null,"Some ",(0,d.mdx)("inlineCode",{parentName:"p"},"static-checks")," allow modules to define an ",(0,d.mdx)("inlineCode",{parentName:"p"},"allow-list"),", which instructs the static check to ignore specific errors and allow checks to pass.\nAll ",(0,d.mdx)("inlineCode",{parentName:"p"},"allow-list")," files must be placed in the root of the corresponding module's ",(0,d.mdx)("inlineCode",{parentName:"p"},"Test/Mftf")," folder."),(0,d.mdx)("p",null,"The following ",(0,d.mdx)("inlineCode",{parentName:"p"},"static-checks")," use ",(0,d.mdx)("inlineCode",{parentName:"p"},"allow-list")," files:"),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("inlineCode",{parentName:"li"},"testDependencies")," as ",(0,d.mdx)("inlineCode",{parentName:"li"},"test-dependency-allowlist"))),(0,d.mdx)("h3",{id:"upgradetests"},(0,d.mdx)("inlineCode",{parentName:"h3"},"upgrade:tests")),(0,d.mdx)("p",null,"When the path argument is specified, this ",(0,d.mdx)("inlineCode",{parentName:"p"},"upgrade")," command applies all the major version Functional Testing Framework upgrade scripts to a ",(0,d.mdx)("inlineCode",{parentName:"p"},"Test Module")," in the given path.\nOtherwise, it will apply all the major version Functional Testing Framework upgrade scripts to all installed test components."),(0,d.mdx)("p",null,(0,d.mdx)("inlineCode",{parentName:"p"},"Test Module")," should have the directory structure of ActionGroup, Data, Metadata, Page, Section, Test, and Suite."),(0,d.mdx)(s,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,d.mdx)("p",null,"The upgrade scripts are meant to be used for Test Modules under source code control. If you have old versions of test modules under vendor, those test modules will get upgraded"),(0,d.mdx)("h4",{id:"usage-12"},"Usage"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf upgrade:tests [<path>]\n")),(0,d.mdx)("p",null,(0,d.mdx)("inlineCode",{parentName:"p"},"<path>")," is the path to a Functional Testing Framework ",(0,d.mdx)("inlineCode",{parentName:"p"},"Test Module")," that needs to be upgraded.\nThe command searches recursively for any ",(0,d.mdx)("inlineCode",{parentName:"p"},"*.xml")," files to upgrade."),(0,d.mdx)("h4",{id:"examples-5"},"Examples"),(0,d.mdx)("p",null,"To upgrade all installed test:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf upgrade:tests\n")),(0,d.mdx)("p",null,"To upgrade all test components inside modules in the ",(0,d.mdx)("inlineCode",{parentName:"p"},"dev/tests/acceptance/tests/")," directory:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf upgrade:tests /Users/user/magento2/dev/tests/acceptance/tests/\n")),(0,d.mdx)("p",null,"To upgrade all test components inside the ",(0,d.mdx)("inlineCode",{parentName:"p"},"Catalog")," module:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf upgrade:tests /Users/user/magento2/app/code/Magento/Catalog/Test/Mftf/\n")),(0,d.mdx)("h3",{id:"codeceptrun"},(0,d.mdx)("inlineCode",{parentName:"h3"},"codecept:run")),(0,d.mdx)("p",null,"A Functional Testing Framework wrapper command that invokes ",(0,d.mdx)("inlineCode",{parentName:"p"},"vendor/bin/codecept run"),". This command runs tests in functional suite. Tests must be generated before using this command."),(0,d.mdx)("h4",{id:"usage-13"},"Usage"),(0,d.mdx)("p",null,"See the ",(0,d.mdx)("a",{parentName:"p",href:"https://codeception.com/docs/reference/Commands#Run"},"Run Command"),"."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"vendor/bin/mftf codecept:run [<suite|test>] --[<option(s)>]\n")),(0,d.mdx)("h4",{id:"examples-6"},"Examples"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"# Run all tests in functional suite\nvendor/bin/mftf codecept:run functional\n")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"# Run all tests in functional suite with options\nvendor/bin/mftf codecept:run functional --verbose --steps --debug\n")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"# Run one test\nvendor/bin/mftf codecept:run functional Magento/_generated/default/AdminCreateCmsPageTestCest.php --debug\n")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-bash"},"# Run all tests in default group\nvendor/bin/mftf codecept:run functional --verbose --steps -g default\n")),(0,d.mdx)(s,{variant:"warning",slots:"text",mdxType:"InlineAlert"}),(0,d.mdx)("p",null,'You may want to limit the usage of this Codeception command with arguments and options for "acceptance" only, since it is what\'s supported by MFTF. When using this command, you should change "acceptance" to "functional" when referring to Codeception documentation.'))}x.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-functional-testing-framework-commands-mftf-md-25dfdc2e2f8feac5046b.js.map