{"version":3,"file":"component---src-pages-guide-integration-attributes-config-fixture-md-56238446762c02f42369.js","mappings":"sRAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,mCADR,oCAGA,yHAA0G,uBAAYC,WAAW,KAAvB,UAA1G,gBACA,eACE,GAAM,UADR,WAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,+BADZ,+GAML,eACE,GAAM,cADR,eAGA,oBACE,eAAIA,WAAW,OAAK,mBAAQA,WAAW,MAAnB,SAClB,eAAIA,WAAW,OACb,eAAIA,WAAW,MAAf,+CAAmE,cAAGA,WAAW,KAC7E,KAAQ,oHADuD,2BAAnE,8BAKJ,eAAIA,WAAW,OAAK,mBAAQA,WAAW,MAAnB,UAClB,eAAIA,WAAW,OACb,eAAIA,WAAW,MAAf,oDAGJ,eAAIA,WAAW,OAAK,mBAAQA,WAAW,MAAnB,cAClB,eAAIA,WAAW,OACb,eAAIA,WAAW,MAAf,8HAGJ,eAAIA,WAAW,OAAK,mBAAQA,WAAW,MAAnB,eAClB,eAAIA,WAAW,OACb,eAAIA,WAAW,MAAf,8OAIN,eACE,GAAM,cADR,eAGA,oBACE,eAAIA,WAAW,MAAf,QAA4B,uBAAYA,WAAW,MAAvB,UAA5B,wGAEA,eAAIA,WAAW,MAAf,uDAEF,eACE,GAAM,WADR,YAGA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBADZ,+rKAqNR,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-testing/./src/pages/guide/integration/attributes/config-fixture.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/commerce-testing/commerce-testing/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"configuration-fixture-attribute\"\n    }}>{`Configuration fixture attribute`}</h1>\n    <p>{`To set configuration values for individual tests and revert them after the test execution, use the `}<inlineCode parentName=\"p\">{`Config`}</inlineCode>{` attribute.`}</p>\n    <h2 {...{\n      \"id\": \"format\"\n    }}>{`Format`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php?start_inline=1\"\n      }}>{`#[\n   Config(string $path, mixed $value, string $scopeType = 'default', string? $scopeValue = null)\n]\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"parameters\"\n    }}>{`Parameters`}</h3>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`path`}</strong>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The XPath to the configuration option. See `}<a parentName=\"li\" {...{\n              \"href\": \"https://experienceleague.adobe.com/docs/commerce-operations/configuration-guide/paths/config-reference-sens.html\"\n            }}>{`configuration reference`}</a>{` for available options.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`value`}</strong>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`A fixture value for the configuration option.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`scopeType`}</strong>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The scope to use to set configuration value. Allowed values: default, store, group and website. Default value: default.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`scopeValue`}</strong>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`The code of the scope to be configured. If \"default\" scope is provided, this parameter can be omitted. If the scope type is store, group, or website, the default value of this parameter is the current value of the specified scope.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"principles\"\n    }}>{`Principles`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`The `}<inlineCode parentName=\"li\">{`Config`}</inlineCode>{` attribute is available at the test method level only.\nIt is not available on the test case level.`}</li>\n      <li parentName=\"ol\">{`A test may contain several configuration options.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n\n/**\n * Test class for \\\\Magento\\\\TestFramework\\\\attribute\\\\ConfigFixture.\n */\nnamespace Magento\\\\Test\\\\attribute;\n\nclass ConfigFixtureTest extends \\\\PHPUnit\\\\Framework\\\\TestCase\n{\n    /**\n     * @var \\\\Magento\\\\TestFramework\\\\attribute\\\\ConfigFixture|\\\\PHPUnit_Framework_MockObject_MockObject\n     */\n    protected $_object;\n\n    protected function setUp()\n    {\n        $this->_object = $this->createPartialMock(\n            \\\\Magento\\\\TestFramework\\\\attribute\\\\ConfigFixture::class,\n            ['_getConfigValue', '_setConfigValue']\n        );\n    }\n\n    #[\n         Config('web/unsecure/base_url', 'http://example.com/', 'store')\n    ]\n    public function testGlobalConfig()\n    {\n        $this->_object->expects(\n            $this->at(0)\n        )->method(\n            '_getConfigValue'\n        )->with(\n            'web/unsecure/base_url'\n        )->will(\n            $this->returnValue('http://localhost/')\n        );\n        $this->_object->expects(\n            $this->at(1)\n        )->method(\n            '_setConfigValue'\n        )->with(\n            'web/unsecure/base_url',\n            'http://example.com/'\n        );\n        $this->_object->startTest($this);\n\n        $this->_object->expects(\n            $this->once()\n        )->method(\n            '_setConfigValue'\n        )->with(\n            'web/unsecure/base_url',\n            'http://localhost/'\n        );\n        $this->_object->endTest($this);\n    }\n\n    #[\n         Config( 'dev/restrict/allow_ips', '192.168.0.1', 'store')\n    ]\n    public function testCurrentStoreConfig()\n    {\n        $this->_object->expects(\n            $this->at(0)\n        )->method(\n            '_getConfigValue'\n        )->with(\n            'dev/restrict/allow_ips',\n            ''\n        )->will(\n            $this->returnValue('127.0.0.1')\n        );\n        $this->_object->expects(\n            $this->at(1)\n        )->method(\n            '_setConfigValue'\n        )->with(\n            'dev/restrict/allow_ips',\n            '192.168.0.1',\n            ''\n        );\n        $this->_object->startTest($this);\n\n        $this->_object->expects(\n            $this->once()\n        )->method(\n            '_setConfigValue'\n        )->with(\n            'dev/restrict/allow_ips',\n            '127.0.0.1',\n            ''\n        );\n        $this->_object->endTest($this);\n    }\n\n    #[\n         Config('dev/restrict/allow_ips', '192.168.0.2', 'store', 'admin')\n    ]\n    public function testSpecificStoreConfig()\n    {\n        $this->_object->expects(\n            $this->at(0)\n        )->method(\n            '_getConfigValue'\n        )->with(\n            'dev/restrict/allow_ips',\n            'admin'\n        )->will(\n            $this->returnValue('192.168.0.1')\n        );\n        $this->_object->expects(\n            $this->at(1)\n        )->method(\n            '_setConfigValue'\n        )->with(\n            'dev/restrict/allow_ips',\n            '192.168.0.2',\n            'admin'\n        );\n        $this->_object->startTest($this);\n\n        $this->_object->expects(\n            $this->once()\n        )->method(\n            '_setConfigValue'\n        )->with(\n            'dev/restrict/allow_ips',\n            '192.168.0.1',\n            'admin'\n        );\n        $this->_object->endTest($this);\n    }\n\n    #[\n         Config('dev/restrict/allow_ips', '192.168.0.2')\n    ]\n    public function testGlobalStoreConfig()\n    {\n        $this->_object->expects(\n            $this->at(0)\n        )->method(\n            '_getConfigValue'\n        )->with(\n            'dev/restrict/allow_ips',\n            'admin'\n        )->will(\n            $this->returnValue('192.168.0.1')\n        );\n        $this->_object->expects(\n            $this->at(1)\n        )->method(\n            '_setConfigValue'\n        )->with(\n            'dev/restrict/allow_ips',\n            '192.168.0.2',\n            'admin'\n        );\n        $this->_object->startTest($this);\n\n        $this->_object->expects(\n            $this->once()\n        )->method(\n            '_setConfigValue'\n        )->with(\n            'dev/restrict/allow_ips',\n            '192.168.0.1',\n            'admin'\n        );\n        $this->_object->endTest($this);\n    }\n\n    public function testInitStoreAfterOfScope()\n    {\n        $this->_object->expects($this->never())->method('_getConfigValue');\n        $this->_object->expects($this->never())->method('_setConfigValue');\n        $this->_object->initStoreAfter();\n    }\n\n    #[\n         Config('current_store', 'web/unsecure/base_url', 'http://example.com/')\n    ]\n    public function testInitStoreAfter()\n    {\n        $this->_object->startTest($this);\n        $this->_object->expects(\n            $this->at(0)\n        )->method(\n            '_getConfigValue'\n        )->with(\n            'web/unsecure/base_url'\n        )->will(\n            $this->returnValue('http://localhost/')\n        );\n        $this->_object->expects(\n            $this->at(1)\n        )->method(\n            '_setConfigValue'\n        )->with(\n            'web/unsecure/base_url',\n            'http://example.com/'\n        );\n        $this->_object->initStoreAfter();\n    }\n}\n\n`}</code></pre>\n    {\n      /* Link definitions */\n    }\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}