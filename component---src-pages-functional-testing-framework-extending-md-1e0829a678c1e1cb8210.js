"use strict";(self.webpackChunkcommerce_testing=self.webpackChunkcommerce_testing||[]).push([[5943],{11060:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return d},default:function(){return l}});var o=n(87462),a=n(45987),r=(n(35776),n(3905)),i=n(91515);const s=["components"],d={},u=(m="InlineAlert",function(e){return console.warn("Component "+m+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.mdx)("div",e)});var m;const p={_frontmatter:d},c=i.Z;function l(e){let{components:t}=e,n=(0,a.Z)(e,s);return(0,r.mdx)(c,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"extending"},"Extending"),(0,r.mdx)("p",null,"There are cases when you need to create many tests that are very similar to each other.\nFor example, only one or two parameters (for example, URL) might vary between tests.\nTo avoid copy-pasting and to save some time the Functional Testing Framework (MFTF) enables you to extend test components such as ",(0,r.mdx)("a",{parentName:"p",href:"test/index.md"},"test"),", ",(0,r.mdx)("a",{parentName:"p",href:"data.md"},"data"),", and ",(0,r.mdx)("a",{parentName:"p",href:"test/action-groups.md"},"action group"),".\nYou can create or update any component of the parent body in your new test/action group/entity."),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"A test starting with ",(0,r.mdx)("inlineCode",{parentName:"li"},'<test name="SampleTest" extends="ParentTest">')," creates a test ",(0,r.mdx)("inlineCode",{parentName:"li"},"SampleTest")," that takes body of existing test ",(0,r.mdx)("inlineCode",{parentName:"li"},"ParentTest")," and adds to it the body of ",(0,r.mdx)("inlineCode",{parentName:"li"},"SampleTest"),"."),(0,r.mdx)("li",{parentName:"ul"},"An action group starting with ",(0,r.mdx)("inlineCode",{parentName:"li"},'<actionGroup name="SampleActionGroup" extends="ParentActionGroup">')," creates an action group based on the ",(0,r.mdx)("inlineCode",{parentName:"li"},"ParentActionGroup"),", but with the changes specified in ",(0,r.mdx)("inlineCode",{parentName:"li"},"SampleActionGroup"),"."),(0,r.mdx)("li",{parentName:"ul"},"An entity starting with ",(0,r.mdx)("inlineCode",{parentName:"li"},'<entity name="SampleEntity" extends="ParentEntity">')," creates an entity ",(0,r.mdx)("inlineCode",{parentName:"li"},"SampleEntity")," that is equivalent to merging the ",(0,r.mdx)("inlineCode",{parentName:"li"},"SampleEntity")," with the ",(0,r.mdx)("inlineCode",{parentName:"li"},"ParentEntity"),".")),(0,r.mdx)("p",null,'Specify needed variations for a parent object and produce a copy of the original that incorporates the specified changes (the "delta").'),(0,r.mdx)(u,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"Unlike merging, the parent test (or action group) will still exist after the test generation."),(0,r.mdx)(u,{variant:"warning",slots:"text",mdxType:"InlineAlert"}),(0,r.mdx)("p",null,"The extended test will be skipped if the parent test is skipped."),(0,r.mdx)("h2",{id:"extending-tests"},"Extending tests"),(0,r.mdx)("h3",{id:"update-a-test-step"},"Update a test step"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Use case"),": Create two similar tests with a different action group reference by overwriting a ",(0,r.mdx)("inlineCode",{parentName:"p"},"stepKey"),"."),(0,r.mdx)("blockquote",null,(0,r.mdx)("p",{parentName:"blockquote"},'Test with "extends":')),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<tests>\n    <test name="AdminLoginSuccessfulTest">\n        <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>\n        <actionGroup ref="AssertAdminSuccessLoginActionGroup" stepKey="assertLoggedIn"/>\n        <actionGroup ref="AdminLogoutActionGroup" stepKey="logoutFromAdmin"/>\n    </test>\n    <test name="AdminLoginAsOtherUserSuccessfulTest" extends="AdminLoginSuccessfulTest">\n        <actionGroup ref="AdminLoginAsOtherUserActionGroup" stepKey="loginAsAdmin"/>\n    </test>\n</tests>\n')),(0,r.mdx)("blockquote",null,(0,r.mdx)("p",{parentName:"blockquote"},'Test without "extends":')),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<tests>\n    <test name="AdminLoginSuccessfulTest">\n        <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>\n        <actionGroup ref="AssertAdminSuccessLoginActionGroup" stepKey="assertLoggedIn"/>\n        <actionGroup ref="AdminLogoutActionGroup" stepKey="logoutFromAdmin"/>\n    </test>\n    <test name="AdminLoginAsOtherUserSuccessfulTest">\n        <actionGroup ref="AdminLoginAsOtherUserActionGroup" stepKey="loginAsAdmin"/>\n        <actionGroup ref="AssertAdminSuccessLoginActionGroup" stepKey="assertLoggedIn"/>\n        <actionGroup ref="AdminLogoutActionGroup" stepKey="logoutFromAdmin"/>\n    </test>\n</tests>\n')),(0,r.mdx)("h3",{id:"add-a-test-step"},"Add a test step"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Use case"),": Create two similar tests where the second test contains two additional steps specified to occur ",(0,r.mdx)("inlineCode",{parentName:"p"},"before")," or ",(0,r.mdx)("inlineCode",{parentName:"p"},"after")," other ",(0,r.mdx)("inlineCode",{parentName:"p"},"stepKeys"),"."),(0,r.mdx)("blockquote",null,(0,r.mdx)("p",{parentName:"blockquote"},'Tests with "extends":')),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<tests>\n    <test name="AdminLoginSuccessfulTest">\n        <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>\n        <actionGroup ref="AssertAdminSuccessLoginActionGroup" stepKey="assertLoggedIn"/>\n        <actionGroup ref="AdminLogoutActionGroup" stepKey="logoutFromAdmin"/>\n    </test>\n    <test name="AdminLoginCheckRememberMeSuccessfulTest" extends="AdminLoginSuccessfulTest">\n        <actionGroup ref="AdminCheckRememberMeActionGroup" stepKey="checkRememberMe" after="loginAsAdmin"/>\n        <actionGroup ref="AssertAdminRememberMeActionGroup" stepKey="assertRememberMe" before="logoutFromAdmin"/>\n    </test>\n</tests>\n')),(0,r.mdx)("blockquote",null,(0,r.mdx)("p",{parentName:"blockquote"},'Tests without "extends":')),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<tests>\n    <test name="AdminLoginSuccessfulTest">\n        <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>\n        <actionGroup ref="AssertAdminSuccessLoginActionGroup" stepKey="assertLoggedIn"/>\n        <actionGroup ref="AdminLogoutActionGroup" stepKey="logoutFromAdmin"/>\n    </test>\n    <test name="AdminLoginCheckRememberMeSuccessfulTest">\n        <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>\n        <actionGroup ref="AdminCheckRememberMeActionGroup" stepKey="checkRememberMe"/>\n        <actionGroup ref="AssertAdminSuccessLoginActionGroup" stepKey="assertLoggedIn"/>\n        <actionGroup ref="AssertAdminRememberMeActionGroup" stepKey="assertRememberMe"/>\n        <actionGroup ref="AdminLogoutActionGroup" stepKey="logoutFromAdmin"/>\n    </test>\n</tests>\n')),(0,r.mdx)("h3",{id:"update-a-test-before-hook"},"Update a test before hook"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Use case"),": Create two similar tests where the second test contains an additional action in the ",(0,r.mdx)("inlineCode",{parentName:"p"},"before")," hook."),(0,r.mdx)("blockquote",null,(0,r.mdx)("p",{parentName:"blockquote"},'Tests with "extends":')),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<tests>\n    <test name="AdminLoginSuccessfulTest">\n        <before>\n            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>\n        </before>\n        <actionGroup ref="AssertAdminSuccessLoginActionGroup" stepKey="assertLoggedIn"/>\n        <actionGroup ref="AdminLogoutActionGroup" stepKey="logoutFromAdmin"/>\n    </test>\n    <test name="AdminLoginCheckRememberMeSuccessfulTest" extends="AdminLoginSuccessfulTest">\n        <before>\n            <actionGroup ref="AdminCheckRememberMeActionGroup" stepKey="checkRememberMe" after="loginAsAdmin"/>\n        </before>\n    </test>\n</tests>\n')),(0,r.mdx)("blockquote",null,(0,r.mdx)("p",{parentName:"blockquote"},'Tests without "extends":')),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<tests>\n    <test name="AdminLoginSuccessfulTest">\n        <before>\n            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>\n        </before>\n        <actionGroup ref="AssertAdminSuccessLoginActionGroup" stepKey="assertLoggedIn"/>\n        <actionGroup ref="AdminLogoutActionGroup" stepKey="logoutFromAdmin"/>\n    </test>\n    <test name="AdminLoginCheckRememberMeSuccessfulTest">\n        <before>\n            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>\n            <actionGroup ref="AdminCheckRememberMeActionGroup" stepKey="checkRememberMe"/>\n        </before>\n        <actionGroup ref="AssertAdminSuccessLoginActionGroup" stepKey="assertLoggedIn"/>\n        <actionGroup ref="AdminLogoutActionGroup" stepKey="logoutFromAdmin"/>\n    </test>\n</tests>\n')),(0,r.mdx)("h2",{id:"extending-action-groups"},"Extending action groups"),(0,r.mdx)("p",null,"Extend an ",(0,r.mdx)("a",{parentName:"p",href:"test/action-groups.md"},"action group")," to add or update ",(0,r.mdx)("a",{parentName:"p",href:"test/actions.md"},"actions")," in your module."),(0,r.mdx)("h3",{id:"update-an-action"},"Update an action"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Use case"),": The ",(0,r.mdx)("inlineCode",{parentName:"p"},"AssertAdminCountProductActionGroup")," action group counts the particular product.\nModify the action group to use another product."),(0,r.mdx)("blockquote",null,(0,r.mdx)("p",{parentName:"blockquote"},'Action groups with "extends":')),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<actionGroups>\n    <actionGroup name="AssertAdminCountProductActionGroup">\n        <arguments>\n            <argument name="count" type="string"/>\n        </arguments>\n        <grabMultiple selector="selectorForProductA" stepKey="grabProducts"/>\n        <assertCount stepKey="assertCount">\n            <expectedResult type="int">{{count}}</expectedResult>\n            <actualResult type="variable">grabProducts</actualResult>\n        </assertCount>\n    </actionGroup>\n\n    <actionGroup name="AssertAdminOtherCountProductActionGroup" extends="AssertAdminCountProductActionGroup">\n        <grabMultiple selector="selectorForProductB" stepKey="grabProducts"/>\n    </actionGroup>\n</actionGroups>\n')),(0,r.mdx)("blockquote",null,(0,r.mdx)("p",{parentName:"blockquote"},'Action groups without "extends":')),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<actionGroups>\n    <actionGroup name="AssertAdminCountProductActionGroup">\n        <arguments>\n            <argument name="count" type="string"/>\n        </arguments>\n        <grabMultiple selector="selectorForProductA" stepKey="grabProducts"/>\n        <assertCount stepKey="assertCount">\n            <expectedResult type="int">{{count}}</expectedResult>\n            <actualResult type="variable">grabProducts</actualResult>\n        </assertCount>\n    </actionGroup>\n\n    <actionGroup name="AssertAdminOtherCountProductActionGroup">\n        <arguments>\n            <argument name="count" type="string"/>\n        </arguments>\n        <grabMultiple selector="selectorForProductB" stepKey="grabProducts"/>\n        <assertCount stepKey="assertCount">\n            <expectedResult type="int">{{count}}</expectedResult>\n            <actualResult type="variable">grabProducts</actualResult>\n        </assertCount>\n    </actionGroup>\n</actionGroups>\n')),(0,r.mdx)("h3",{id:"add-an-action"},"Add an action"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Use case"),": The ",(0,r.mdx)("inlineCode",{parentName:"p"},"AdminGetProductCountActionGroup")," action group returns the count of products.\nAdd a new test ",(0,r.mdx)("inlineCode",{parentName:"p"},"AssertAdminVerifyProductCountActionGroup")," that asserts the count of products:"),(0,r.mdx)("blockquote",null,(0,r.mdx)("p",{parentName:"blockquote"},'Action groups with "extends":')),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<actionGroups>\n    <actionGroup name="AdminGetProductCountActionGroup">\n        <arguments>\n            <argument name="productSelector" type="string"/>\n        </arguments>\n        <grabMultiple selector="{{productSelector}}" stepKey="grabProducts"/>\n    </actionGroup>\n\n    <actionGroup name="AssertAdminVerifyProductCountActionGroup" extends="AdminGetProductCountActionGroup">\n        <arguments>\n            <argument name="count" type="string"/>\n        </arguments>\n        <assertCount stepKey="assertCount" after="grabProducts">\n            <expectedResult type="int">{{count}}</expectedResult>\n            <actualResult type="variable">grabProducts</actualResult>\n        </assertCount>\n    </actionGroup>\n</actionGroups>\n')),(0,r.mdx)("blockquote",null,(0,r.mdx)("p",{parentName:"blockquote"},'Action groups without "extends":')),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<actionGroups>\n    <actionGroup name="AdminGetProductCountActionGroup">\n        <arguments>\n            <argument name="productSelector" type="string"/>\n        </arguments>\n        <grabMultiple selector="{{productSelector}}" stepKey="grabProducts"/>\n    </actionGroup>\n\n    <actionGroup name="AssertAdminVerifyProductCountActionGroup">\n        <arguments>\n            <argument name="count" type="string"/>\n            <argument name="productSelector" type="string"/>\n        </arguments>\n        <grabMultiple selector="{{productSelector}}" stepKey="grabProducts"/>\n        <assertCount stepKey="assertCount">\n            <expectedResult type="int">{{count}}</expectedResult>\n            <actualResult type="variable">grabProducts</actualResult>\n        </assertCount>\n    </actionGroup>\n</actionGroups>\n')),(0,r.mdx)("h2",{id:"extending-data"},"Extending data"),(0,r.mdx)("p",null,"Extend data to reuse entities in your module."),(0,r.mdx)("h3",{id:"update-a-data-entry"},"Update a data entry"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Use case"),": Create an entity named ",(0,r.mdx)("inlineCode",{parentName:"p"},"DivPanelGreen"),", which is similar to the ",(0,r.mdx)("inlineCode",{parentName:"p"},"DivPanel")," entity, except that it is green."),(0,r.mdx)("blockquote",null,(0,r.mdx)("p",{parentName:"blockquote"},'Entities with "extends":')),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<entities>\n    <entity name="DivPanel">\n        <data key="divColor">Red</data>\n        <data key="divSize">80px</data>\n        <data key="divWidth">100%</data>\n    </entity>\n    <entity name="DivPanelGreen" extends="DivPanel">\n        <data key="divColor">Green</data>\n    </entity>\n</entities>\n')),(0,r.mdx)("blockquote",null,(0,r.mdx)("p",{parentName:"blockquote"},'Entities without "extends":')),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<entities>\n    <entity name="DivPanel">\n        <data key="divColor">Red</data>\n        <data key="divSize">80px</data>\n        <data key="divWidth">100%</data>\n    </entity>\n    <entity name="DivPanelGreen" extends="DivPanel">\n        <data key="divColor">Green</data>\n        <data key="divSize">80px</data>\n        <data key="divWidth">100%</data>\n    </entity>\n</entities>\n')),(0,r.mdx)("h3",{id:"add-a-data-entry"},"Add a data entry"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Use case"),": Create an entity named ",(0,r.mdx)("inlineCode",{parentName:"p"},"DivPanelGreen"),", which is similar to the ",(0,r.mdx)("inlineCode",{parentName:"p"},"DivPanel")," entity, except that it has a specific panel color."),(0,r.mdx)("blockquote",null,(0,r.mdx)("p",{parentName:"blockquote"},'Entities with "extends":')),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<entities>\n    <entity name="DivPanel">\n        <data key="divColor">Red</data>\n        <data key="divSize">80px</data>\n        <data key="divWidth">100%</data>\n    </entity>\n    <entity name="DivPanelGreen" extends="DivPanel">\n        <data key="divColor">#000000</data>\n        <data key="AttributeHidden">True</data>\n    </entity>\n</entities>\n')),(0,r.mdx)("blockquote",null,(0,r.mdx)("p",{parentName:"blockquote"},'Entities without "extends":')),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<entities>\n    <entity name="DivPanel">\n        <data key="divColor">Red</data>\n        <data key="divSize">80px</data>\n        <data key="divWidth">100%</data>\n    </entity>\n    <entity name="DivPanelGreen" extends="DivPanel">\n        <data key="divColor">#000000</data>\n        <data key="divSize">80px</data>\n        <data key="divWidth">100%</data>\n        <data key="AttributeHidden">True</data>\n    </entity>\n</entities>\n')))}l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-functional-testing-framework-extending-md-1e0829a678c1e1cb8210.js.map